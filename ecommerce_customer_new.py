from pyfcm import FCMNotification
from flask import Flask, request, jsonify, json,render_template
from flask_api import status
from jinja2._compat import izip
from jinja2 import Environment, FileSystemLoader
from datetime import datetime,timedelta,date
import pymysql
from smtplib import SMTP
from flask_cors import CORS, cross_origin
from flask import Blueprint
from flask_restplus import Api, Resource, fields
from werkzeug.utils import cached_property
from werkzeug.datastructures import FileStorage
import requests
import calendar
import json
from instamojoConfig import CLIENT_ID,CLIENT_SECRET,referrer
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
import os
import hashlib
import random, string
import math
import re
from datetime import datetime



env = Environment(
    loader=FileSystemLoader('%s/templates/' % os.path.dirname(__file__)))

app = Flask(__name__)
cors = CORS(app)

ecommerce_customer_new = Blueprint('ecommerce_customer_new_api', __name__)
api = Api(ecommerce_customer_new,  title='Ecommerce API',description='Ecommerce API')
name_space = api.namespace('EcommerceCustomerNew',description='Ecommerce Customer')

#----------------------database-connection---------------------#
'''def mysql_connection():
	connection = pymysql.connect(host='creamsonservices.com',
	                             user='creamson_langlab',
	                             password='Langlab@123',
	                             db='creamson_ecommerce',
	                             charset='utf8mb4',
	                             cursorclass=pymysql.cursors.DictCursor)
	return connection

def mysql_connection_analytics():
	connection_analytics = pymysql.connect(host='creamsonservices.com',
	                             user='creamson_langlab',
	                             password='Langlab@123',
	                             db='ecommerce_analytics',
	                             charset='utf8mb4',
	                             cursorclass=pymysql.cursors.DictCursor)
	return connection_analytics'''

def mysql_connection():
	connection = pymysql.connect(host='ecommerce.cdcuaa7mp0jm.us-east-2.rds.amazonaws.com',
	                             user='admin',
	                             password='oxjkW0NuDtjKfEm5WZuP',
	                             db='ecommerce',
	                             charset='utf8mb4',
	                             cursorclass=pymysql.cursors.DictCursor)
	return connection

def mysql_connection_analytics():
	connection = pymysql.connect(host='ecommerce.cdcuaa7mp0jm.us-east-2.rds.amazonaws.com',
	                             user='admin',
	                             password='oxjkW0NuDtjKfEm5WZuP',
	                             db='ecommerce_analytics',
	                             charset='utf8mb4',
	                             cursorclass=pymysql.cursors.DictCursor)
	return connection

#----------------------database-connection---------------------#


app.config['CORS_HEADERS'] = 'Content-Type'

customer_postmodel = api.model('SelectCustomer', {
	"first_name":fields.String,
	"last_name":fields.String,
	"email":fields.String,
	"password":fields.String,
	"phoneno":fields.Integer(required=True),
	"address_line_1":fields.String,
	"address_line_2":fields.String,
	"city":fields.String,
	"county":fields.String,
	"state":fields.String,
	"pincode":fields.Integer,
	"emergency_contact":fields.Integer,
	"referal_code":fields.String,
	"registration_type":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

customer_retailer_postmodel = api.model('SelectCustomerRetailer', {
	"first_name":fields.String,
	"last_name":fields.String,
	"email":fields.String,
	"password":fields.String,
	"phoneno":fields.Integer(required=True),
	"address_line_1":fields.String,
	"address_line_2":fields.String,
	"city":fields.String,
	"retailer_store":fields.String,
	"county":fields.String,
	"state":fields.String,
	"pincode":fields.Integer,
	"emergency_contact":fields.Integer,
	"referal_code":fields.String,
	"registration_type":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

customer_retailer_postmodel_tech = api.model('SelectCustomerRetailerTech', {
	"first_name":fields.String,
	"last_name":fields.String,
	"email":fields.String,
	"password":fields.String,
	"phoneno":fields.Integer(required=True),
	"address_line_1":fields.String,
	"address_line_2":fields.String,
	"city":fields.String,
	"retailer_store":fields.String,
	"county":fields.String,
	"state":fields.String,
	"pincode":fields.Integer,
	"emergency_contact":fields.Integer,
	"referal_code":fields.String,
	"registration_type":fields.Integer(required=True),
	"imei":fields.Integer(required=True),
	"retid":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})

checkemail_postmodel = api.model('checkEmail',{
	"email":fields.String(required=True),
})

checkreferal_postmodel = api.model('checkReferal',{
	"referral_code":fields.String(required=True),
})

checkphoneno_postmodel = api.model('checkPhone',{
	"phoneno":fields.String(required=True),
})

login_postmodel = api.model('loginCustomer',{
	"email":fields.String(required=True),
	"password":fields.String(required=True)
})

devicetoken_postmodel = api.model('deviceToken',{
	"user_id":fields.Integer(required=True),	
	"device_type":fields.Integer(required=True),
	"device_token":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})

changepassword_putmodel = api.model('changePasswod',{
	"new_password":fields.String(required=True),
})

changeretailer_putmodel = api.model('changeRetailer',{
	"city":fields.String,
	"retailer_store":fields.String,
})

checkotp_postmodel = api.model('checkOtp',{
	"phoneno":fields.String(required=True),
	"otp":fields.String(required=True)
})

checkotp_organisation_postmodel = api.model('checkOtpOrganisation',{
	"phoneno":fields.String(required=True),
	"otp":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})

customer_product_postmodel = api.model('customerproduct',{
	"customer_id":fields.Integer(required=True),
	"product_meta_id":fields.Integer(required=True),
	"is_favourite":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})


add_to_cart_postmodel = api.model('addToCart',{
	"customer_id":fields.Integer(required=True),
	"product_meta_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

add_to_cart_postmodel_with_qty = api.model('addToCartWithQty',{
	"customer_id":fields.Integer(required=True),
	"product_meta_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True),
	"qty":fields.Integer(required=True)
})

cart_putmodel = api.model('updateCart',{
	"qty":fields.Integer(required=True)
})

customer_stories_postmodel = api.model('customerstories',{
	"user_id":fields.Integer(required=True),
	"review":fields.String(required=True),
	"ratting":fields.Integer(required=True)
})

customer_address_putmodel = api.model('customerAddress',{
	"address_line_1":fields.String,
	"address_line_2":fields.String,
	"city":fields.String,
	"country":fields.String,
	"state":fields.String,
	"pincode":fields.Integer
})

customer_basic_putmodel = api.model('customerBasic',{
	"first_name":fields.String,
	"email":fields.String
})

apply_cupon_postmodel = api.model('cuponPostModel',{
	"coupon_code":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})

create_payment_link_model = api.model('create_payment_link_model', {
	"amount":fields.Integer(required=True),
	"purpose":fields.String(),
	"buyer_name":fields.String(),
	"email":fields.String(),
	"phone":fields.Integer(),
	"user_id":fields.Integer(required=True),
	"transaction_id":fields.Integer(),
	"coupon_code":fields.String,
	"organisation_id":fields.Integer(required=True),
	"order_payment_status":fields.Integer(required=True),
	"delivery_option":fields.Integer(required=True),
	"delivery_charges":fields.String(required=True)
})

save_order = api.model('save_order', {
	"amount":fields.Integer(required=True),
	"purpose":fields.String(required=True),
	"user_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"organisation_id":fields.Integer(required=True),
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

save_order_r = api.model('save_order_r', {
	"amount":fields.Integer(required=True),
	"purpose":fields.String(required=True),
	"user_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"organisation_id":fields.Integer(required=True),
	"payment_id":fields.String(required=True),
	"update_status":fields.String(required=True),
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

create_invoice = api.model('create_invoice', {
	"user_id":fields.Integer(required=True),
	"transaction_id":fields.Integer(required=True)
})

buy_model = api.model('buy_model', {
	"product_meta_id":fields.Integer(required=True),
	"amount":fields.Integer(required=True),
	"purpose":fields.String(required=True),
	"user_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"organisation_id":fields.Integer(required=True)
})

buy_model_cashon = api.model('buy_model_cash_on', {
	"product_meta_id":fields.List(fields.Integer),	
	"user_id":fields.Integer(required=True),	
	"organisation_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

buy_model_cashon_with_qty = api.model('buy_model', {
	"product_meta_id":fields.Integer(required=True),	
	"user_id":fields.Integer(required=True),	
	"organisation_id":fields.Integer(required=True),
	"qty":fields.Integer(required=True),
	"amount":fields.Integer(required=True),
	"coupon_code":fields.String,
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

buy_model_with_qty = api.model('buy_model_with_qty', {
	"product_meta_id":fields.Integer(required=True),
	"amount":fields.Integer(required=True),
	"purpose":fields.String(required=True),
	"user_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"qty":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True),
	"payment_id":fields.String(required=True),
	"update_status":fields.String(required=True),
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

buy_model_with_bundel = api.model('buy_model_with_bundel', {
	"productmetaid":fields.List(fields.Integer),
	"amount":fields.Integer(required=True),
	"purpose":fields.String(required=True),
	"user_id":fields.Integer(required=True),
	"coupon_code":fields.String,
	"qty":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True),
	"payment_id":fields.String(required=True),
	"update_status":fields.String(required=True),
	"order_payment_status":fields.Integer,
	"delivery_option":fields.Integer,
	"delivery_charges":fields.String
})

appmsg_model = api.model('appmsg_model', {	
	"firebase_key":fields.String(),
	"device_id":fields.String()
})

appmsg_model_order = api.model('appmsg_model_order', {	
	"firebase_key":fields.String(),
	"device_id":fields.String(),
	"update_status":fields.String()
})


send_email_model = api.model('email_model', {	
	"To":fields.String(),
	"Subject":fields.String(),
	"text":fields.String()
})

customer_exchange_model = api.model('customer_exchange_model', {	
	"customer_id":fields.Integer(required=True),
	"amount":fields.Integer,	
	"front_image":fields.String,
	"back_image":fields.String,
	"device_model":fields.String,
	"question_ans_id":fields.List(fields.Integer(required=True)),
	"organisation_id":fields.Integer(required=True),
	"question_type": fields.Integer(required=True)	
})

customer_wallet_putmodel = api.model('customer_wallet_putmodel', {	
	"wallet":fields.Float(required=True)	
})

enquiry_postmodel = api.model('enquiry_postmodel',{
	"enquiry_type_id":fields.Integer(required=True),
	"user_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

enquiry_communication_postmodel = api.model('enquiry_communication_postmodel',{
	"enquiry_id":fields.Integer(required=True),
	"user_id":fields.Integer(required=True),
	"image":fields.String,
	"text":fields.String(required=True),
	"organisation_id":fields.Integer(required=True)
})

productreplication_postmodel = api.model('product_replication_postmodel',{	
	"from_organisation_id":fields.Integer(required=True),
	"brand_id":fields.List(fields.Integer),
	"to_organisation_id":fields.Integer(required=True),
	"coppy_all_product":fields.Integer(required=True)
})

customer_exchange_putmodel = api.model('customer_exchange_putmodel',{
	"question_ans_id":fields.List(fields.Integer),
	"device_model":fields.String,
	"question_type":fields.Integer(required=True)
})

customer_exchange_device_putmodel = api.model('customer_exchange_device_putmodel',{
	"amount":fields.Integer,
	"front_image":fields.String,
	"back_image":fields.String,
	"final_submission_status":fields.Integer
})

customer_enquiry_postmodel = api.model('customer_enquiry_postmodel',{
	"phoneno":fields.String,
	"name":fields.String,
	"address":fields.String,
	"email":fields.String,
	"comment":fields.String,
	"customer_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True),
})

class DictModel(fields.Raw):
	def format(self, value):
		dictmodel = {}
		return dictmodel

communication_model = api.model('communication_model', {
	"sourceapp":fields.String(),
	"mailParams":DictModel(),
	"organisation_id":fields.Integer(required=True)
})

clone_exchange_postmodel = api.model('clone_exchange_postmodel', {
	"customer_id":fields.Integer(required=True),
	"exchange_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

signup_loyality_postmodel = api.model('SelectSignUpLoyalityPostmodel', {	
	"customer_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

loyality_product_purchase_postmodel = api.model('loyality_product_purchase_postmodel', {
	"customer_id":fields.Integer(required=True),
	"product_meta_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

loyality_first_purchase_postmodel = api.model('loyality_first_purchase_postmodel', {
	"customer_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

customer_review_postmodel = api.model('customer_review_postmodel', {
	"customer_id":fields.Integer(required=True),
	"review":fields.String(required=True),
	"retailer_store_store_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

loyality_prebook_postmodel = api.model('loyality_prebook_postmodel', {
	"customer_id":fields.Integer(required=True),	
	"organisation_id":fields.Integer(required=True)
})

loyality_lifetime_purchase_postmodel = api.model('loyality_lifetime_purchase_postmodel', {
	"customer_id":fields.Integer(required=True),	
	"organisation_id":fields.Integer(required=True)
})

referal_loyality_postmodel = api.model('referal_loyality_postmodel', {
	"customer_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

loyality_exchange_postmodel = api.model('loyality_exchange_postmodel', {
	"exchange_id":fields.Integer(required=True),
	"customer_id":fields.Integer(required=True),
	"organisation_id":fields.Integer(required=True)
})

customer_sms_postmodel = api.model('customer_sms_postmodel', {	
	"customer_id":fields.List(fields.Integer),
	"organisation_id":fields.Integer(required=True)
})

customer_email_postmodel = api.model('customer_email_postmodel', {	
	"customer_id":fields.List(fields.Integer),
	"organisation_id":fields.Integer(required=True),
	"title":fields.String(required=True),
	"message":fields.String(required=True),
})


enquiry_communication_parser = api.parser()
enquiry_communication_parser.add_argument('file', location='files', type=FileStorage, required=True)

upload_parser = api.parser()
upload_parser.add_argument('file', location='files', type=FileStorage, required=True)

#BASE_URL = 'http://ec2-3-19-228-138.us-east-2.compute.amazonaws.com/flaskapp/'
BASE_URL = 'http://ec2-18-221-89-14.us-east-2.compute.amazonaws.com/flaskapp/'

MOJO_TEST_URL = 'https://test.instamojo.com/'

MOJO_BASE_URL = 'https://api.instamojo.com/'

EMAIL_ADDRESS = 'communications@creamsonservices.com'
EMAIL_PASSWORD = 'CReam7789%$intELLi'

regex = '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

#----------------------Check-Email-Exist---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/CheckEmail/<int:organisation_id>",methods=['POST'])
@cross_origin(origin='*')	
def CheckEmail(organisation_id):

	connection = mysql_connection()
	cursor = connection.cursor()

	details = request.get_json()
	email = details.get('email')

	get_query = ("""SELECT *
			FROM `admins` WHERE `email` = %s and `role_id` = 4 and `organisation_id` = %s""")
	getData = (email,organisation_id)
	count_customer = cursor.execute(get_query,getData)

	connection.commit()
	cursor.close()

	if count_customer > 0:
		data = cursor.fetchone()
		return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "error",
			    		"message":"Customer Email Already Exist"
			    	},
			    	"responseList":{"phoneno":data['phoneno'],"city":data['city']} }), status.HTTP_200_OK

	else:
		return ({"attributes": {
		    		"status_desc": "customer_details",
		    		"status": "success",
		    		"message":"Email Id not Exist"
		    	},
		    	"responseList":{"email":details['email'],"phoneno":"","city":""}}), status.HTTP_200_OK
		

#----------------------Check-Email-Exist---------------------#


#----------------------Check-Phone-No-Exist---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/CheckPhoneno/<int:organisation_id>",methods=['POST'])
@cross_origin(origin='*')	
def CheckPhoneno(organisation_id):

	connection = mysql_connection()
	cursor = connection.cursor()

	details = request.get_json()


	get_query = ("""SELECT *
			FROM `admins` WHERE `phoneno` = %s and `role_id` = 4 and `organisation_id` = %s""")
	getData = (details['phoneno'],organisation_id)
	count_customer = cursor.execute(get_query,getData)

	connection.commit()
	cursor.close()

	if count_customer > 0:
		data = cursor.fetchone()
		return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "error",
			    		"message":"Customer Phoneno Already Exist"
			    	},
			    	"responseList":{"city":data['city']} }), status.HTTP_200_OK

	else:
		return ({"attributes": {
		    		"status_desc": "customer_details",
		    		"status": "success",
		    		"message":""
		    	},
		    	"responseList":{"phoneno":details['phoneno']}}), status.HTTP_200_OK

		

#----------------------Check-Phone-No-Exist---------------------#

#----------------------Location-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getLocation/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getLocation(organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rs.`retailer_store_id`,rs.`retailer_name`,rs.`city`,rsi.`image`
			FROM `retailer_store` rs 
			INNER JOIN `retailer_store_image` rsi ON rsi.`retailer_store_id` = rs.`retailer_store_id`
			WHERE rs.`organisation_id` = %s """)

		get_data = (organisation_id)
		cursor.execute(get_query,get_data)
		location_data = cursor.fetchall()

		for key,data in enumerate(location_data):
			get_query =  ("""SELECT rss.`address`,rss.`latitude`,rss.`longitude`,rss.`phoneno`
				FROM `retailer_store_stores` rss 
				where rss.`organisation_id` = %s and rss.`retailer_store_id` = %s""")	
			get_data = (organisation_id,data['retailer_store_id'])
			count_reatiler = cursor.execute(get_query,get_data)

			if count_reatiler > 0:
				location_data[key]['is_retailer_store'] = 1
			else:
				location_data[key]['is_retailer_store'] = 0

		return ({"attributes": {
		    		"status_desc": "location_details",
		    		"status": "success"
		    	},
		    	"responseList":location_data}), status.HTTP_200_OK

#----------------------Location-List---------------------#

#----------------------Retailer-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getRetailer/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getRetailer(organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rs.`retailer_store_id`,rs.`retailer_name`,rs.`latitude`,rs.`longitude`,rs.`city`,rs.`county`,rsi.`image`,rs.`phoneno`
			FROM `retailer_store` rs 
			INNER JOIN `retailer_store_image` rsi ON rsi.`retailer_store_id` = rs.`retailer_store_id` where rs.`organisation_id` = %s""")	
		get_data = (organisation_id)
		cursor.execute(get_query,get_data)
		retailer_data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "retailer_details",
		    		"status": "success"
		    	},
		    	"responseList":retailer_data}), status.HTTP_200_OK

#----------------------Retailer-List---------------------#

#----------------------Retailer-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getRetailerByLocationId/<int:location_id>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getRetailerByLocationId(location_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rss.`retailer_store_store_id`,rss.`retailer_store_id`,rss.`address`,rss.`latitude`,rss.`longitude`,rss.`phoneno`
			FROM `retailer_store_stores` rss 
			where rss.`organisation_id` = %s and rss.`retailer_store_id` = %s""")	
		get_data = (organisation_id,location_id)
		cursor.execute(get_query,get_data)
		retailer_data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "retailer_details",
		    		"status": "success"
		    	},
		    	"responseList":retailer_data}), status.HTTP_200_OK

#----------------------Retailer-List---------------------#

#----------------------Emi-List---------------------#

@name_space.route("/getEmiList/<int:organisation_id>")	
class getEmiList(Resource):
	def get(self,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT * FROM `emi_bank` where `organisation_id` = %s and `status` = 1""")	
		get_data = (organisation_id)
		cursor.execute(get_query,get_data)
		emi_bank_data = cursor.fetchall()		

		for key,data in enumerate(emi_bank_data):
			get_plan_query = ("""SELECT * FROM `plan` where `emi_bank_id` = %s""")
			get_plan_data = (data['emi_bank_id'])
			plan_count = cursor.execute(get_plan_query,get_plan_data)

			if plan_count > 0:
				emi_bank_data[key]['having_plan'] = 1
			else:
				emi_bank_data[key]['having_plan'] = 0

			#emi_bank_data[key]['having_plan'] = 0

			emi_bank_data[key]['last_update_ts'] = str(data['last_update_ts'])	


		get_brand_query =  ("""SELECT * FROM `emi_brand` where `organisation_id` = %s""")	
		get_brand_data = (organisation_id)
		cursor.execute(get_brand_query,get_brand_data)
		emi_band_data = cursor.fetchall()

		for bkey,bdata in enumerate(emi_band_data):
			emi_band_data[bkey]['last_update_ts'] = str(bdata['last_update_ts'])

		return ({"attributes": {
		    		"status_desc": "emi_details",
		    		"status": "success"
		    	},
		    	"responseList":{"bank_list":emi_bank_data,"brand_list":emi_band_data}}), status.HTTP_200_OK

#----------------------Emi-List---------------------#

#----------------------Emi-Band-List---------------------#

@name_space.route("/getEmiBrandList/<int:organisation_id>")	
class getEmiBrandList(Resource):
	def get(self,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT * FROM `emi_brand` where `organisation_id` = %s""")	
		get_data = (organisation_id)
		cursor.execute(get_query,get_data)
		emi_bank_data = cursor.fetchall()

		for key,data in enumerate(emi_bank_data):
			emi_bank_data[key]['last_update_ts'] = str(data['last_update_ts'])


		return ({"attributes": {
		    		"status_desc": "emi_bank_details",
		    		"status": "success"
		    	},
		    	"responseList":emi_bank_data}), status.HTTP_200_OK

#----------------------Emi-Band-List---------------------#

#----------------------User-Retailer---------------------#

@name_space.route("/getUserRetailerInformation/<int:user_id>")	
class getUserRetailerInformation(Resource):
	def get(self,user_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rs.`retailer_name`,rs.`address_line_1`,rs.`address_line_2`,rs.`latitude`,rs.`longitude`,
			rs.`city`,rs.`county`,rs.`state`,rs.`pincode`,rs.`phoneno`
			FROM `user_retailer_mapping` urm 
			INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`
			where urm.`user_id` = %s""")	

		get_data = (user_id)
		cursor.execute(get_query,get_data)
		user_retailer_data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "user_retailer_information",
		    		"status": "success"
		    	},
		    	"responseList":user_retailer_data}), status.HTTP_200_OK

#----------------------User-Retailer---------------------#

#----------------------User-Retailer---------------------#

@name_space.route("/getUserRetailerInformationWithStore/<int:user_id>")	
class getUserRetailerInformationWithStore(Resource):
	def get(self,user_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rs.`retailer_name`,rs.`address_line_1`,rs.`address_line_2`,rss.`latitude`,rss.`longitude`,
			rs.`city`,rs.`county`,rs.`state`,rs.`pincode`,rss.`phoneno`,rss.`address`
			FROM `user_retailer_mapping` urm 
			INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`
			INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = urm.`retailer_store_id`
			where urm.`user_id` = %s""")	

		get_data = (user_id)
		cursor.execute(get_query,get_data)
		user_retailer_data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "user_retailer_information",
		    		"status": "success"
		    	},
		    	"responseList":user_retailer_data}), status.HTTP_200_OK

#----------------------User-Retailer---------------------#

#----------------------User-Retailer---------------------#

@name_space.route("/getUserRetailerInformationWithStoreByOrganisationId/<int:user_id>/<int:organisation_id>")	
class getUserRetailerInformationWithStoreByOrganisationId(Resource):
	def get(self,user_id,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_query =  ("""SELECT rs.`retailer_name`,rs.`address_line_1`,rs.`address_line_2`,rss.`latitude`,rss.`longitude`,
			rs.`city`,rs.`county`,rs.`state`,rs.`pincode`,rss.`phoneno`,rss.`address`
			FROM `user_retailer_mapping` urm 
			INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`
			INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = urm.`retailer_store_id`
			where urm.`user_id` = %s and urm.`organisation_id` = %s""")	

		get_data = (user_id,organisation_id)
		cursor.execute(get_query,get_data)
		user_retailer_data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "user_retailer_information",
		    		"status": "success"
		    	},
		    	"responseList":user_retailer_data}), status.HTTP_200_OK

#----------------------User-Retailer---------------------#

#----------------------Check-Referal-Exist---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/Checkreferal",methods=['POST'])
@cross_origin(origin='*')	
def Checkreferal():	
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		get_referal_query = ("""SELECT *
			FROM `customer_referral` WHERE `referral_code` = %s""")
		getReferalData = (details['referral_code'])
		count_referal = cursor.execute(get_referal_query,getReferalData)

		if count_referal > 0:
			
			return ({"attributes": {
				    	"status_desc": "referal_details",
				    	"status": "success",
				    	"message":"referral code Exist"
				    },
				    "responseList":{} }), status.HTTP_200_OK		
				
		else:
			return ({"attributes": {
		    		"status_desc": "referal_details",
		    		"status": "error",
		    		"message":"referal code Not Exsits"
		    	},
		    	"responseList":{} }), status.HTTP_200_OK

		

#----------------------Check-Referal-Exists---------------------#

#----------------------Add-Customer---------------------#

@name_space.route("/AddCustomer")
class AddCustomer(Resource):
	@api.expect(customer_postmodel)
	def post(self):
	
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		first_name = details['first_name']
		last_name = details['last_name']
		email = details['email']
		password = details['password']
		phoneno = details['phoneno']
		address_line_1 = details['address_line_1']
		address_line_2 = details['address_line_2']
		city = details['city']
		county = details['county']
		state = details['state']
		pincode = details['pincode']
		emergency_contact = details['emergency_contact']
		role_id = 4
		admin_status = 1
		organisation_id = details['organisation_id']
		registration_type = details['registration_type']

		now = datetime.now()
		date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

		if registration_type == 1:
			count_phone_type = 0

		else:
			get_phone_type_query = ("""SELECT *
				FROM `admins` WHERE `phoneno` = %s and `registration_type` = %s and `organisation_id` = %s""")
			get_phone_type_data = (phoneno,registration_type,organisation_id)

			count_phone_type = cursor.execute(get_phone_type_query,get_phone_type_data)

		if count_phone_type > 0:
			date_of_lastlogin = date_of_creation
			loggedin_status = 1

			update_query = ("""UPDATE `admins` SET `loggedin_status` = %s, `date_of_lastlogin` = %s
						WHERE `phoneno` = %s and `organisation_id` = %s""")
			update_data = (loggedin_status,date_of_lastlogin,phoneno,organisation_id)
			cursor.execute(update_query,update_data)

			get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
					a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
					a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,
					rs.`retailer_name`,rs.`phoneno` as retailer_phoneno					
					FROM `admins` a
					INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
					INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
					WHERE a.`phoneno` = %s and a.`registration_type` = %s """)
			getDataLogin = (phoneno,registration_type)
			cursor.execute(get_query_login_data,getDataLogin)
			login_data = cursor.fetchone()

			

		else:
			
			insert_query = ("""INSERT INTO `admins`(`first_name`,`last_name`,`email`,`org_password`,
										`phoneno`,`address_line_1`,`address_line_2`,`city`,`country`,
										`state`,`pincode`,`emergency_contact`,`role_id`,`registration_type`,`status`,`organisation_id`,`date_of_creation`) 
			VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
			data = (first_name,last_name,email,password,phoneno,address_line_1,address_line_2,city,county,state,pincode,emergency_contact,role_id,registration_type,admin_status,organisation_id,date_of_creation)
			cursor.execute(insert_query,data)

			admin_id = cursor.lastrowid				
							

			get_query_city = ("""SELECT *
				FROM `retailer_store` WHERE `city` = %s and organisation_id = %s""")
			getDataCity = (details['city'],organisation_id)
			count_city = cursor.execute(get_query_city,getDataCity)

			if count_city > 0:
				city_data = cursor.fetchone()
				insert_mapping_user_retailer = ("""INSERT INTO `user_retailer_mapping`(`user_id`,`retailer_id`,`status`,`organisation_id`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s)""")
						#organisation_id = 1
				last_update_id = 1
				city_insert_data = (admin_id,city_data['retailer_store_id'],admin_status,organisation_id,last_update_id)	
				cursor.execute(insert_mapping_user_retailer,city_insert_data)

			insert_customer_referal_code_query = ("""INSERT INTO `customer_referral`(`customer_id`,`referral_code`,`organisation_id`,`status`,`last_update_id`)
					VALUES(%s,%s,%s,%s,%s)""")
			#organisation_id = 1
			last_update_id = 1	

			customer_referral_code = ''.join(random.choices(string.ascii_letters + string.digits, k=8))

			referal_data = (admin_id,customer_referral_code,organisation_id,admin_status,last_update_id)
			cursor.execute(insert_customer_referal_code_query,referal_data)		

			if details['referal_code']:				

				get_referal_query = ("""SELECT *
					FROM `customer_referral` WHERE `referral_code` = %s""")
				getReferalData = (details['referal_code'])
				count_referal = cursor.execute(get_referal_query,getReferalData)

				if count_referal > 0:

					referal = cursor.fetchone()
					customer_referral_id = referal['customer_referral_id']
							

					insert_user_referal_code_query = ("""INSERT INTO `user_referral_mapping`(`customer_referral_id`,`customer_id`,`organisation_id`,`status`,`last_update_id`)
						VALUES(%s,%s,%s,%s,%s)""")
					user_referal_data = (customer_referral_id,admin_id,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_user_referal_code_query,user_referal_data)

					customer_referral_user_id = referal['customer_id']

							#organisation_id = 1
					referal_user_loyality_type = 1
					get_loyality_query = ("""SELECT *
							FROM `loyality_master`
				 			WHERE `organisation_id` = %s and loyality_type =%s """)

					get_loyality_data = (organisation_id,referal_user_loyality_type)
					cursor.execute(get_loyality_query,get_loyality_data)
					loyality_data = cursor.fetchone()

					referred_user_loyality_type = 2
					get_refferd_user_loyality_query = ("""SELECT *
							FROM `loyality_master`
				 			WHERE `organisation_id` = %s and loyality_type =%s""")
					get_reffered_loyality_data = (organisation_id,referred_user_loyality_type)
					cursor.execute(get_refferd_user_loyality_query,get_reffered_loyality_data)
					refered_loyality_data = cursor.fetchone()

					get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
					customer_wallet_data = (customer_referral_user_id)
					cursor.execute(get_customer_wallet_query,customer_wallet_data)
					wallet_data = cursor.fetchone()

					wallet = loyality_data['loyality_amount']+wallet_data['wallet']

					update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
					update_data = (wallet,customer_referral_user_id)
					cursor.execute(update_customer_wallet_query,update_data)

					update_refferd_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
					update_reffered_customer_data = (refered_loyality_data['loyality_amount'],admin_id)
					cursor.execute(update_refferd_customer_wallet_query,update_reffered_customer_data)

					insert_referal_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
						`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
					transaction_source = "refer"
					updated_value = wallet
					previous_value = 0
					referal_wallet_transaction_data = (customer_referral_user_id,loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_referal_wallet_transaction_query,referal_wallet_transaction_data)	

					insert_referred_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
						`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
					updated_reffered_value = refered_loyality_data['loyality_amount']

					referrd_wallet_transaction_data = (admin_id,refered_loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_referred_wallet_transaction_query,referrd_wallet_transaction_data)	


					get_user_device_query = ("""SELECT `device_token`
						FROM `devices` WHERE  `user_id` = %s""")

					get_user_device_data = (customer_referral_user_id)
					device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

					if device_token_count > 0:
						device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						headers = {'Content-type':'application/json', 'Accept':'application/json'}
						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
						payloadpushData = {
							"device_id":device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key']
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

					get_refferd_user_device_query = ("""SELECT `device_token`
						FROM `devices` WHERE  `user_id` = %s""")

					get_refferd_user_device_data = (admin_id)
					reffred_user_device_token_count = cursor.execute(get_refferd_user_device_query,get_refferd_user_device_data)	

					if reffred_user_device_token_count > 0:
						refferd_user_device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
							FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						headers = {'Content-type':'application/json', 'Accept':'application/json'}
						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
						payloadpushData = {
							"device_id":refferd_user_device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key']
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
				a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,rs.`retailer_name`,
				rs.`phoneno` as retailer_phoneno				
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
				INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
				WHERE a.`admin_id` = %s """)
			getDataLogin = (admin_id)
			cursor.execute(get_query_login_data,getDataLogin)
			login_data = cursor.fetchone()

			get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

			get_loyality_data_type_1 = (organisation_id)
			count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

			referal_loyalty_data_type_1 = cursor.fetchone()

			get_loyality_query_type_2 = ("""SELECT *
				FROM `loyality_master`			
				WHERE `organisation_id` = %s and `loyality_type` = 2""")

			get_loyality_data_type_2 = (organisation_id)
			count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

			referal_loyalty_data_type_2 = cursor.fetchone()

			if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

				if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
					is_referal = 0
				else:
					is_referal = 1
			else:
				is_referal = 0	

			login_data['is_referal'] = is_referal

			user_id = admin_id
			organisation_id = organisation_id		

			'''get_customer_query = ("""SELECT a.`First_name`,a.`phoneno`,a.`email`,rs.`city`,rss.`store_name`,a.`loggedin_status`,a.`registration_type`
				FROM `admins` a	
				INNER JOIN `user_retailer_mapping` urm ON urm.`user_id` = a.`admin_id`	
				INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = urm.`retailer_store_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`	
				where a.`organisation_id` = %s and a.`admin_id` = %s and urm.`organisation_id` = %s""")
			get_customer_data = (organisation_id,user_id,organisation_id)
			cursor.execute(get_customer_query,get_customer_data)

			customer_data = cursor.fetchone()

			if customer_data['First_name'] == '':
				customer_data['Last_Name'] = customer_data['store_name']+" Customer"
			else:
				customer_data['Last_Name'] = customer_data['First_name']

			if customer_data['loggedin_status'] == 1:
				customer_data['loggedin_status'] = "logged In" 
			else:
				customer_data['loggedin_status'] = "Never Logged In"

			if customer_data['registration_type'] == 4 or data['registration_type'] == 1:
				customer_data['Lead_Source'] = "Online Store"
			else:
				customer_data['Lead_Source'] = "Facebook"

			get_zoho_query = ("""SELECT * FROM `organisation_zoho_details` where `organisation_id` = %s""")
			get_zoho_data = (organisation_id)
			zoho_count = cursor.execute(get_zoho_query,get_zoho_data)
			print(cursor._last_executed)

			print(zoho_count)

			if zoho_count > 0:
				zoho_data = cursor.fetchone()

				if zoho_data['Is_active'] == 1:
					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					Url = BASE_URL + "zoho_crm_ecommerce_product/ZohoCrmEcommerceProduct/customerImportintoZoho"
					payloadhData = {
							"First_Name":"",
							"Last_Name":  customer_data['Last_Name'],
							"Email": customer_data['email'],
							"store": customer_data['store_name'],
							"City": customer_data['city'],
							"Phone": customer_data['phoneno'],
							"Loggedin_Status":customer_data['loggedin_status'],
							"Lead_Source":customer_data['Lead_Source'],
							"organisation_id":organisation_id
					}

					print(Url)
					print(payloadhData)
					create_customer_to_zoho = requests.post(Url,data=json.dumps(payloadhData), headers=headers).json()	'''			

		connection.commit()
		cursor.close()

		return ({"attributes": {
				    "status_desc": "customer_details",
				    "status": "success"
				},
				"responseList":login_data}), status.HTTP_200_OK

#----------------------Add-Customer---------------------#

#----------------------Add-Customer---------------------#

#@name_space.route("/AddCustomerWithRetailer")
#class AddCustomerWithRetailer(Resource):
	#@api.expect(customer_retailer_postmodel)
	#def post(self):

@ecommerce_customer_new.route("/EcommerceCustomerNew/AddCustomerWithRetailer",methods=['POST'])
@cross_origin(origin='*')	
def AddCustomerWithRetailer():	
	connection = mysql_connection()
	cursor = connection.cursor()		
		
	details = request.get_json()	

	first_name = details['first_name']
	last_name = details['last_name']
	email = details['email']
	password = details['password']
	phoneno = details['phoneno']
	address_line_1 = details['address_line_1']
	address_line_2 = details['address_line_2']
	city = details['city']
	retailer_store = details['retailer_store']
	county = details['county']
	state = details['state']
	pincode = details['pincode']
	emergency_contact = details['emergency_contact']
	role_id = 4
	admin_status = 1
	organisation_id = details['organisation_id']
	registration_type = details['registration_type']

	now = datetime.now()
	date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

	if registration_type == 1:
		count_phone_type = 0

	else:
		get_phone_type_query = ("""SELECT *
				FROM `admins` WHERE `phoneno` = %s and `registration_type` = %s and `organisation_id` = %s""")
		get_phone_type_data = (phoneno,registration_type,organisation_id)

		count_phone_type = cursor.execute(get_phone_type_query,get_phone_type_data)

	if count_phone_type > 0:
		date_of_lastlogin = date_of_creation
		loggedin_status = 1

		'''update_query = ("""UPDATE `admins` SET `loggedin_status` = %s, `date_of_lastlogin` = %s
						WHERE `phoneno` = %s and `organisation_id` = %s""")
		update_data = (loggedin_status,date_of_lastlogin,phoneno,organisation_id)
		cursor.execute(update_query,update_data)'''

		get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
					a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
					a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,
					rs.`retailer_name`,rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rss.`retailer_store_store_id`,rs.`city` as reatiler_city					
					FROM `admins` a
					INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
					INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
					INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id`
					WHERE a.`phoneno` = %s and a.`registration_type` = %s and a.`organisation_id` = %s and rss.`organisation_id` = %s""")
		getDataLogin = (phoneno,registration_type,organisation_id,organisation_id)
		cursor.execute(get_query_login_data,getDataLogin)
		login_data = cursor.fetchone()

		get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

		get_loyality_data_type_1 = (organisation_id)
		count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

		referal_loyalty_data_type_1 = cursor.fetchone()

		get_loyality_query_type_2 = ("""SELECT *
				FROM `loyality_master`			
				WHERE `organisation_id` = %s and `loyality_type` = 2""")

		get_loyality_data_type_2 = (organisation_id)
		count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

		referal_loyalty_data_type_2 = cursor.fetchone()

		if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

			if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
				is_referal = 0
			else:
				is_referal = 1
		else:
			is_referal = 0	

		login_data['is_referal'] = is_referal

	else:
			
		insert_query = ("""INSERT INTO `admins`(`first_name`,`last_name`,`email`,`org_password`,
										`phoneno`,`address_line_1`,`address_line_2`,`city`,`country`,
										`state`,`pincode`,`emergency_contact`,`role_id`,`registration_type`,`status`,`organisation_id`,`date_of_creation`) 
		VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
		data = (first_name,last_name,email,password,phoneno,address_line_1,address_line_2,city,county,state,pincode,emergency_contact,role_id,registration_type,admin_status,organisation_id,date_of_creation)
		cursor.execute(insert_query,data)

		admin_id = cursor.lastrowid				
							

		get_query_city = ("""SELECT *
				FROM `retailer_store` WHERE `city` = %s and organisation_id = %s""")
		getDataCity = (details['city'],organisation_id)
		count_city = cursor.execute(get_query_city,getDataCity)

		if count_city > 0:
			city_data = cursor.fetchone()

			get_query_retailer_store = ("""SELECT *
					FROM `retailer_store_stores` WHERE `retailer_store_id` = %s and `organisation_id` = %s and `address` = %s""")
			getDataRetailerStore = (city_data['retailer_store_id'],organisation_id,retailer_store)
			count_retailer_store = cursor.execute(get_query_retailer_store,getDataRetailerStore)
			retailer_store_data = cursor.fetchone()

			insert_mapping_user_retailer = ("""INSERT INTO `user_retailer_mapping`(`user_id`,`retailer_id`,`retailer_store_id`,`status`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s,%s)""")
						#organisation_id = 1
			last_update_id = organisation_id
			city_insert_data = (admin_id,city_data['retailer_store_id'],retailer_store_data['retailer_store_store_id'],admin_status,organisation_id,last_update_id)	
			cursor.execute(insert_mapping_user_retailer,city_insert_data)

		insert_customer_referal_code_query = ("""INSERT INTO `customer_referral`(`customer_id`,`referral_code`,`organisation_id`,`status`,`last_update_id`)
					VALUES(%s,%s,%s,%s,%s)""")
			#organisation_id = 1
		last_update_id = 1	

		customer_referral_code = ''.join(random.choices(string.ascii_letters + string.digits, k=8))

		referal_data = (admin_id,customer_referral_code,organisation_id,admin_status,last_update_id)
		cursor.execute(insert_customer_referal_code_query,referal_data)		

		if details['referal_code']:				
			get_loyality_settings_query = ("""SELECT `setting_value`
					FROM `referal_loyality_settings` WHERE `organisation_id` = %s""")
			getLoyalitySettingsData = (organisation_id)
			count_loyality_settings = cursor.execute(get_loyality_settings_query,getLoyalitySettingsData)

			if count_loyality_settings > 0:
				loyality_settings = cursor.fetchone()

				if loyality_settings['setting_value'] == 1:

					get_referal_query = ("""SELECT `customer_referral_id`,`referral_code`,`customer_id`
								FROM `customer_referral` WHERE `referral_code` = %s and `organisation_id` = %s""")
					getReferalData = (details['referal_code'],organisation_id)
					count_referal = cursor.execute(get_referal_query,getReferalData)

					if count_referal > 0:
						referal = cursor.fetchone()

						reffered_user_id = referal['customer_id']

						customer_referral_id = referal['customer_referral_id']

						user_referal_status = 1

						insert_user_referal_code_query = ("""INSERT INTO `user_referral_mapping`(`customer_referral_id`,`customer_id`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s)""")
						user_referal_data = (customer_referral_id,admin_id,details['organisation_id'],user_referal_status,details['organisation_id'])

						cursor.execute(insert_user_referal_code_query,user_referal_data)

						referal_user_loyality_type = 1
						get_referal_loyality_query = ("""SELECT *
										FROM `loyality_master`
							 			WHERE `organisation_id` = %s and loyality_type =%s """)

						get_referal_loyality_data = (organisation_id,referal_user_loyality_type)
						count_referal_loyality = cursor.execute(get_referal_loyality_query,get_referal_loyality_data)

						if count_referal_loyality > 0:
							referal_loyality_data = cursor.fetchone()

							if referal_loyality_data['loyality_amount'] > 0:

								get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
								customer_wallet_data = (admin_id)
								cursor.execute(get_customer_wallet_query,customer_wallet_data)
								wallet_data = cursor.fetchone()

								wallet = referal_loyality_data['loyality_amount']+wallet_data['wallet']
								transaction_id = 0
								redeem_history_id = 0
								

								insert_referal_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
										`updated_value`,`transaction_id`,`redeem_history_id`,`organisation_id`,`status`,`last_update_id`)
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
								transaction_source = "referal"
								updated_value = wallet
								previous_value = wallet_data['wallet']
								wallet_transation_status = 1
								referal_wallet_transaction_data = (admin_id,referal_loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,transaction_id,redeem_history_id,organisation_id,wallet_transation_status,organisation_id)

								cursor.execute(insert_referal_wallet_transaction_query,referal_wallet_transaction_data)

								update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
																		WHERE `admin_id` = %s """)
								update_data = (wallet,admin_id)
								cursor.execute(update_customer_wallet_query,update_data)

								get_user_device_query = ("""SELECT `device_token`
										FROM `devices` WHERE  `user_id` = %s and `organisation_id` = %s""")

								get_user_device_data = (admin_id,organisation_id)
								device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

								if device_token_count > 0:
									device_token_data = cursor.fetchone()

									get_organisation_firebase_query = ("""SELECT `firebase_key`
										FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
									get_organisation_firebase_data = (organisation_id)
									cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
									firebase_data = cursor.fetchone()

									headers = {'Content-type':'application/json', 'Accept':'application/json'}
									sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
									payloadpushData = {
										"device_id":device_token_data['device_token'],
										"firebase_key": firebase_data['firebase_key']
									}

									send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

						referred_user_loyality_type = 2
						get_refferd_user_loyality_query = ("""SELECT *
										FROM `loyality_master`
							 			WHERE `organisation_id` = %s and loyality_type =%s""")
						get_reffered_loyality_data = (organisation_id,referred_user_loyality_type)
						count_refferd_loyality = cursor.execute(get_refferd_user_loyality_query,get_reffered_loyality_data)

						if count_refferd_loyality > 0 :
							refered_loyality_data = cursor.fetchone()

							if refered_loyality_data['loyality_amount'] > 0:
							
								get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
								customer_wallet_data = (reffered_user_id)
								cursor.execute(get_customer_wallet_query,customer_wallet_data)
								wallet_data = cursor.fetchone()

								wallet = refered_loyality_data['loyality_amount']+wallet_data['wallet']
								transaction_id = 0
								redeem_history_id = 0

								insert_referal_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
										`updated_value`,`transaction_id`,`redeem_history_id`,`organisation_id`,`status`,`last_update_id`)
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
								transaction_source = "referal"
								updated_value = wallet
								previous_value = wallet_data['wallet']
								wallet_transation_status = 1
								referal_wallet_transaction_data = (reffered_user_id,refered_loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,transaction_id,redeem_history_id,organisation_id,wallet_transation_status,organisation_id)

								cursor.execute(insert_referal_wallet_transaction_query,referal_wallet_transaction_data)

								update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
																		WHERE `admin_id` = %s """)
								update_data = (wallet,reffered_user_id)
								cursor.execute(update_customer_wallet_query,update_data)

								get_refferd_user_device_query = ("""SELECT `device_token`
										FROM `devices` WHERE  `user_id` = %s and `organisation_id` = %s""")

								get_refferd_user_device_data = (reffered_user_id,organisation_id)
								reffred_user_device_token_count = cursor.execute(get_refferd_user_device_query,get_refferd_user_device_data)	

								if reffred_user_device_token_count > 0:
									refferd_user_device_token_data = cursor.fetchone()

									get_organisation_firebase_query = ("""SELECT `firebase_key`
											FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
									get_organisation_firebase_data = (organisation_id)
									cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
									firebase_data = cursor.fetchone()

									headers = {'Content-type':'application/json', 'Accept':'application/json'}
									sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
									payloadpushData = {
										"device_id":refferd_user_device_token_data['device_token'],
										"firebase_key": firebase_data['firebase_key']
									}

									send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()
				

		get_loyality_settings_query = ("""SELECT `setting_value`
					FROM `referal_loyality_settings` WHERE `organisation_id` = %s""")
		getLoyalitySettingsData = (organisation_id)
		count_loyality_settings = cursor.execute(get_loyality_settings_query,getLoyalitySettingsData)

		if count_loyality_settings >0:
			loyality_settings = cursor.fetchone()

			if loyality_settings['setting_value'] == 1:

				get_general_loyality_query = ("""SELECT `signup_point`
							FROM `general_loyalty_master` WHERE `organisation_id` = %s""")
				getGeneralLoyalityData = (organisation_id)
				count_general_loyality = cursor.execute(get_general_loyality_query,getGeneralLoyalityData)

				if count_general_loyality > 0:
					general_loyality =  cursor.fetchone()

					if int(general_loyality['signup_point']) > 0:

						get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
						customer_wallet_data = (admin_id)
						cursor.execute(get_customer_wallet_query,customer_wallet_data)
						wallet_data = cursor.fetchone()
						wallet = int(general_loyality['signup_point'])+wallet_data['wallet']
						transaction_id = 0
						redeem_history_id = 0

						insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
									`updated_value`,`transaction_id`,`redeem_history_id`,`organisation_id`,`status`,`last_update_id`)
												VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
						transaction_source = "signup"
						updated_value = wallet
						previous_value = wallet_data['wallet']
						wallet_transation_status = 1
						wallet_transaction_data = (admin_id,general_loyality['signup_point'],transaction_source,previous_value,updated_value,transaction_id,redeem_history_id,organisation_id,wallet_transation_status,organisation_id)
						cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)

						update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
																	WHERE `admin_id` = %s """)
						update_data = (wallet,admin_id)
						cursor.execute(update_customer_wallet_query,update_data)

						get_device_query = ("""SELECT `device_token`
									FROM `devices` WHERE  `user_id` = %s and `organisation_id` = %s""")

						get_device_data = (admin_id,organisation_id)
						device_token_count = cursor.execute(get_device_query,get_device_data)

						if device_token_count > 0:
							device_token_data = cursor.fetchone()

							get_organisation_firebase_query = ("""SELECT `firebase_key`
										FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
							get_organisation_firebase_data = (organisation_id)
							cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
							firebase_data = cursor.fetchone()

							headers = {'Content-type':'application/json', 'Accept':'application/json'}
							sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
							payloadpushData = {
								"device_id":device_token_data['device_token'],
								"firebase_key": firebase_data['firebase_key']
							}

							send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()
	
					
		get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
			a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,rs.`retailer_name`,
				rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rss.`retailer_store_store_id`,rs.`city` as reatiler_city				
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
				INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
				INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id`
				WHERE a.`admin_id` = %s """)
		getDataLogin = (admin_id)
		cursor.execute(get_query_login_data,getDataLogin)
		login_data = cursor.fetchone()

		date_of_lastlogin = date_of_creation
		loggedin_status = 1

		update_query = ("""UPDATE `admins` SET `loggedin_status` = %s, `date_of_lastlogin` = %s
						WHERE `phoneno` = %s and `organisation_id` = %s""")
		update_data = (loggedin_status,date_of_lastlogin,phoneno,organisation_id)
		cursor.execute(update_query,update_data)

		get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

		get_loyality_data_type_1 = (organisation_id)
		count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

		referal_loyalty_data_type_1 = cursor.fetchone()

		get_loyality_query_type_2 = ("""SELECT *
				FROM `loyality_master`			
				WHERE `organisation_id` = %s and `loyality_type` = 2""")

		get_loyality_data_type_2 = (organisation_id)
		count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

		referal_loyalty_data_type_2 = cursor.fetchone()

		if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

			if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
				is_referal = 0
			else:
				is_referal = 1
		else:
			is_referal = 0	

		login_data['is_referal'] = is_referal

		user_id = admin_id
		organisation_id = organisation_id		

		'''get_customer_query = ("""SELECT a.`First_name`,a.`phoneno`,a.`email`,rs.`city`,rss.`store_name`,a.`loggedin_status`,a.`registration_type`
			FROM `admins` a	
			INNER JOIN `user_retailer_mapping` urm ON urm.`user_id` = a.`admin_id`	
			INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = urm.`retailer_store_id`
			INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`	
			where a.`organisation_id` = %s and a.`admin_id` = %s and urm.`organisation_id` = %s""")
		get_customer_data = (organisation_id,user_id,organisation_id)
		cursor.execute(get_customer_query,get_customer_data)

		customer_data = cursor.fetchone()

		if customer_data['First_name'] == '':
			customer_data['Last_Name'] = customer_data['store_name']+" Customer"
		else:
			customer_data['Last_Name'] = customer_data['First_name']

		if customer_data['loggedin_status'] == 1:
			customer_data['loggedin_status'] = "logged In" 
		else:
			customer_data['loggedin_status'] = "Never Logged In"

		if customer_data['registration_type'] == 4 or data['registration_type'] == 1:
			customer_data['Lead_Source'] = "Online Store"
		else:
			customer_data['Lead_Source'] = "Facebook"

		get_zoho_query = ("""SELECT * FROM `organisation_zoho_details` where `organisation_id` = %s""")
		get_zoho_data = (organisation_id)
		zoho_count = cursor.execute(get_zoho_query,get_zoho_data)
		print(cursor._last_executed)

		print(zoho_count)

		if zoho_count > 0:
			zoho_data = cursor.fetchone()

			if zoho_data['Is_active'] == 1:
				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				Url = BASE_URL + "zoho_crm_ecommerce_product/ZohoCrmEcommerceProduct/customerImportintoZoho"
				payloadhData = {
						"First_Name":"",
						"Last_Name":  customer_data['Last_Name'],
						"Email": customer_data['email'],
						"store": customer_data['store_name'],
						"City": customer_data['city'],
						"Phone": customer_data['phoneno'],
						"Loggedin_Status":customer_data['loggedin_status'],
						"Lead_Source":customer_data['Lead_Source'],
						"organisation_id":organisation_id
				}

				print(Url)
				print(payloadhData)
				create_customer_to_zoho = requests.post(Url,data=json.dumps(payloadhData), headers=headers).json()	'''	

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		LoyalityReferalnUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityReferalCustomer"
		loyalityReferalData = {
						"customer_id":admin_id,						
						"organisation_id": organisation_id
		}

		loyalityReferalResponse = requests.post(LoyalityReferalnUrl,data=json.dumps(loyalityReferalData), headers=headers).json()

	connection.commit()
	cursor.close()

	return ({"attributes": {
				    "status_desc": "customer_details",
				    "status": "success"
				},
				"responseList":login_data}), status.HTTP_200_OK

#----------------------Add-Customer---------------------#


@name_space.route("/signupLoyality")
class signupLoyality(Resource):
	@api.expect(signup_loyality_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		organisation_id = details['organisation_id']
		customer_id = details['customer_id']

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		signupLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/signupLoyality"
		signupLoyalityData = {
								"customer_id":customer_id,
								"organisation_id": organisation_id
							}		

		signupLoyality = requests.post(signupLoyalityUrl,data=json.dumps(signupLoyalityData), headers=headers).json()	

		print(signupLoyality)



#----------------------Add-Customer---------------------#

@name_space.route("/AddCustomerWithRetailerForTechnologies")
class AddCustomerWithRetailerForTechnologies(Resource):
	@api.expect(customer_retailer_postmodel_tech)
	def post(self):
	
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		first_name = details['first_name']
		last_name = details['last_name']
		email = details['email']
		password = details['password']
		phoneno = details['phoneno']
		address_line_1 = details['address_line_1']
		address_line_2 = details['address_line_2']
		city = details['city']
		retailer_store = details['retailer_store']
		county = details['county']
		state = details['state']
		pincode = details['pincode']
		emergency_contact = details['emergency_contact']
		role_id = 4
		admin_status = 1
		organisation_id = details['organisation_id']
		registration_type = details['registration_type']
		imei = details['imei']
		retid = details['retid']

		now = datetime.now()
		date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

		if registration_type == 1:
			count_phone_type = 0

		else:
			get_phone_type_query = ("""SELECT *
				FROM `admins` WHERE `phoneno` = %s and `registration_type` = %s and `organisation_id` = %s""")
			get_phone_type_data = (phoneno,registration_type,organisation_id)

			count_phone_type = cursor.execute(get_phone_type_query,get_phone_type_data)

		if count_phone_type > 0:
			get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
					a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
					a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,
					rs.`retailer_name`,rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rss.`retailer_store_store_id`,rs.`city` as reatiler_city					
					FROM `admins` a
					INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
					INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
					INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id`
					WHERE a.`phoneno` = %s and a.`registration_type` = %s and a.`organisation_id` = %s and rss.`organisation_id` = %s""")
			getDataLogin = (phoneno,registration_type,organisation_id,organisation_id)
			cursor.execute(get_query_login_data,getDataLogin)
			login_data = cursor.fetchone()

			get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

			get_loyality_data_type_1 = (organisation_id)
			count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

			referal_loyalty_data_type_1 = cursor.fetchone()

			get_loyality_query_type_2 = ("""SELECT *
					FROM `loyality_master`			
					WHERE `organisation_id` = %s and `loyality_type` = 2""")

			get_loyality_data_type_2 = (organisation_id)
			count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

			referal_loyalty_data_type_2 = cursor.fetchone()

			if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

				if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
					is_referal = 0
				else:
					is_referal = 1
			else:
				is_referal = 0	

			login_data['is_referal'] = is_referal

		else:
			
			insert_query = ("""INSERT INTO `admins`(`first_name`,`last_name`,`email`,`org_password`,
										`phoneno`,`address_line_1`,`address_line_2`,`city`,`country`,
										`state`,`pincode`,`emergency_contact`,`role_id`,`registration_type`,`status`,`organisation_id`,`date_of_creation`) 
			VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
			data = (first_name,last_name,email,password,phoneno,address_line_1,address_line_2,city,county,state,pincode,emergency_contact,role_id,registration_type,admin_status,organisation_id,date_of_creation)
			cursor.execute(insert_query,data)

			admin_id = cursor.lastrowid				
							

			get_query_city = ("""SELECT *
				FROM `retailer_store` WHERE `city` = %s and organisation_id = %s""")
			getDataCity = (details['city'],organisation_id)
			count_city = cursor.execute(get_query_city,getDataCity)

			if count_city > 0:
				city_data = cursor.fetchone()

				get_query_retailer_store = ("""SELECT *
					FROM `retailer_store_stores` WHERE `retailer_store_id` = %s and `organisation_id` = %s and `address` = %s""")
				getDataRetailerStore = (city_data['retailer_store_id'],organisation_id,retailer_store)
				count_retailer_store = cursor.execute(get_query_retailer_store,getDataRetailerStore)
				retailer_store_data = cursor.fetchone()

				insert_mapping_user_retailer = ("""INSERT INTO `user_retailer_mapping`(`user_id`,`retailer_id`,`retailer_store_id`,`status`,`organisation_id`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s,%s)""")
						#organisation_id = 1
				last_update_id = 1
				city_insert_data = (admin_id,city_data['retailer_store_id'],retailer_store_data['retailer_store_store_id'],admin_status,organisation_id,last_update_id)	
				cursor.execute(insert_mapping_user_retailer,city_insert_data)

			insert_customer_referal_code_query = ("""INSERT INTO `customer_referral`(`customer_id`,`referral_code`,`organisation_id`,`status`,`last_update_id`)
					VALUES(%s,%s,%s,%s,%s)""")
			#organisation_id = 1
			last_update_id = 1	

			customer_referral_code = ''.join(random.choices(string.ascii_letters + string.digits, k=8))

			referal_data = (admin_id,customer_referral_code,organisation_id,admin_status,last_update_id)
			cursor.execute(insert_customer_referal_code_query,referal_data)		

			if details['referal_code']:				

				get_referal_query = ("""SELECT *
					FROM `customer_referral` WHERE `referral_code` = %s""")
				getReferalData = (details['referal_code'])
				count_referal = cursor.execute(get_referal_query,getReferalData)

				if count_referal > 0:

					referal = cursor.fetchone()
					customer_referral_id = referal['customer_referral_id']
							

					insert_user_referal_code_query = ("""INSERT INTO `user_referral_mapping`(`customer_referral_id`,`customer_id`,`organisation_id`,`status`,`last_update_id`)
						VALUES(%s,%s,%s,%s,%s)""")
					user_referal_data = (customer_referral_id,admin_id,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_user_referal_code_query,user_referal_data)

					customer_referral_user_id = referal['customer_id']

							#organisation_id = 1
					referal_user_loyality_type = 1
					get_loyality_query = ("""SELECT *
							FROM `loyality_master`
				 			WHERE `organisation_id` = %s and loyality_type =%s """)

					get_loyality_data = (organisation_id,referal_user_loyality_type)
					cursor.execute(get_loyality_query,get_loyality_data)
					loyality_data = cursor.fetchone()

					referred_user_loyality_type = 2
					get_refferd_user_loyality_query = ("""SELECT *
							FROM `loyality_master`
				 			WHERE `organisation_id` = %s and loyality_type =%s""")
					get_reffered_loyality_data = (organisation_id,referred_user_loyality_type)
					cursor.execute(get_refferd_user_loyality_query,get_reffered_loyality_data)
					refered_loyality_data = cursor.fetchone()

					get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
					customer_wallet_data = (customer_referral_user_id)
					cursor.execute(get_customer_wallet_query,customer_wallet_data)
					wallet_data = cursor.fetchone()

					wallet = loyality_data['loyality_amount']+wallet_data['wallet']

					update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
					update_data = (wallet,customer_referral_user_id)
					cursor.execute(update_customer_wallet_query,update_data)

					update_refferd_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
					update_reffered_customer_data = (refered_loyality_data['loyality_amount'],admin_id)
					cursor.execute(update_refferd_customer_wallet_query,update_reffered_customer_data)

					insert_referal_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
						`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
					transaction_source = "refer"
					updated_value = wallet
					previous_value = 0
					referal_wallet_transaction_data = (customer_referral_user_id,loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_referal_wallet_transaction_query,referal_wallet_transaction_data)	

					insert_referred_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
						`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
					updated_reffered_value = refered_loyality_data['loyality_amount']

					referrd_wallet_transaction_data = (admin_id,refered_loyality_data['loyality_amount'],transaction_source,previous_value,updated_value,organisation_id,admin_status,last_update_id)

					cursor.execute(insert_referred_wallet_transaction_query,referrd_wallet_transaction_data)	


					get_user_device_query = ("""SELECT `device_token`
						FROM `devices` WHERE  `user_id` = %s""")

					get_user_device_data = (customer_referral_user_id)
					device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

					if device_token_count > 0:
						device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						headers = {'Content-type':'application/json', 'Accept':'application/json'}
						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
						payloadpushData = {
							"device_id":device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key']
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

					get_refferd_user_device_query = ("""SELECT `device_token`
						FROM `devices` WHERE  `user_id` = %s""")

					get_refferd_user_device_data = (admin_id)
					reffred_user_device_token_count = cursor.execute(get_refferd_user_device_query,get_refferd_user_device_data)	

					if reffred_user_device_token_count > 0:
						refferd_user_device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
							FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						headers = {'Content-type':'application/json', 'Accept':'application/json'}
						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
						payloadpushData = {
							"device_id":refferd_user_device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key']
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			headers = {'Content-type':'application/json', 'Accept':'application/json'}			
			Urlt = "http://meprotectwebsrvc.techdrive.xyz/register.php?action=registration&yourname=&emailid="+str(phoneno)+"&mobile="+str(phoneno)+"&imei="+str(imei)+"&password="+str(phoneno)+"&retid="+retid+"&w_devmodel=&w_invamt= &w_invno="
			regis_tech = requests.get(Urlt).json()

			get_query_login_data = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
				a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,rs.`retailer_name`,
				rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rs.`city` as reatiler_city,rss.`retailer_store_store_id`				
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id`
				INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id` 
				INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id`
				WHERE a.`admin_id` = %s """)
			getDataLogin = (admin_id)
			cursor.execute(get_query_login_data,getDataLogin)
			login_data = cursor.fetchone()

			get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

			get_loyality_data_type_1 = (organisation_id)
			count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

			referal_loyalty_data_type_1 = cursor.fetchone()

			get_loyality_query_type_2 = ("""SELECT *
				FROM `loyality_master`			
				WHERE `organisation_id` = %s and `loyality_type` = 2""")

			get_loyality_data_type_2 = (organisation_id)
			count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

			referal_loyalty_data_type_2 = cursor.fetchone()

			if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

				if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
					is_referal = 0
				else:
					is_referal = 1
			else:
				is_referal = 0	

			login_data['is_referal'] = is_referal	

			user_id = admin_id
			organisation_id = organisation_id		

			'''get_customer_query = ("""SELECT a.`First_name`,a.`phoneno`,a.`email`,rs.`city`,rss.`store_name`,a.`loggedin_status`,a.`registration_type`
				FROM `admins` a	
				INNER JOIN `user_retailer_mapping` urm ON urm.`user_id` = a.`admin_id`	
				INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = urm.`retailer_store_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = urm.`retailer_id`	
				where a.`organisation_id` = %s and a.`admin_id` = %s and urm.`organisation_id` = %s""")
			get_customer_data = (organisation_id,user_id,organisation_id)
			cursor.execute(get_customer_query,get_customer_data)

			customer_data = cursor.fetchone()

			if customer_data['First_name'] == '':
				customer_data['Last_Name'] = customer_data['store_name']+" Customer"
			else:
				customer_data['Last_Name'] = customer_data['First_name']

			if customer_data['loggedin_status'] == 1:
				customer_data['loggedin_status'] = "logged In" 
			else:
				customer_data['loggedin_status'] = "Never Logged In"

			if customer_data['registration_type'] == 4 or data['registration_type'] == 1:
				customer_data['Lead_Source'] = "Online Store"
			else:
				customer_data['Lead_Source'] = "Facebook"

			get_zoho_query = ("""SELECT * FROM `organisation_zoho_details` where `organisation_id` = %s""")
			get_zoho_data = (organisation_id)
			zoho_count = cursor.execute(get_zoho_query,get_zoho_data)
			print(cursor._last_executed)

			print(zoho_count)

			if zoho_count > 0:
				zoho_data = cursor.fetchone()

				if zoho_data['Is_active'] == 1:
					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					Url = BASE_URL + "zoho_crm_ecommerce_product/ZohoCrmEcommerceProduct/customerImportintoZoho"
					payloadhData = {
							"First_Name":"",
							"Last_Name":  customer_data['Last_Name'],
							"Email": customer_data['email'],
							"store": customer_data['store_name'],
							"City": customer_data['city'],
							"Phone": customer_data['phoneno'],
							"Loggedin_Status":customer_data['loggedin_status'],
							"Lead_Source":customer_data['Lead_Source'],
							"organisation_id":organisation_id
					}

					print(Url)
					print(payloadhData)
					create_customer_to_zoho = requests.post(Url,data=json.dumps(payloadhData), headers=headers).json()'''				

		connection.commit()
		cursor.close()

		return ({"attributes": {
				    "status_desc": "customer_details",
				    "status": "success"
				},
				"responseList":login_data}), status.HTTP_200_OK

#----------------------Add-Customer---------------------#

#----------------------User-Loyality-Point-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getUserLoyalityPointList/<int:user_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getUserLoyalityPointList(user_id):

#@name_space.route("/getUserLoyalityPointList/<int:user_id>")	
#class getMetaKeyValueList(Resource):
	#def get(self,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_wallet_query = ("""SELECT `wallet` FROM `admins` 
						WHERE `admin_id` = %s """)
		getwalletdata = (user_id)
		cursor.execute(get_wallet_query,getwalletdata)
		wallet_data = cursor.fetchone()

		get_transaction_query = ("""SELECT * FROM `wallet_transaction` 
						WHERE `customer_id` = %s """)
		gettransactiondata = (user_id)
		cursor.execute(get_transaction_query,gettransactiondata)

		wallet_data['transactions'] = cursor.fetchall()

		for key,data in enumerate(wallet_data['transactions']):
			wallet_data['transactions'][key]['last_update_ts'] = str(data['last_update_ts'])
		

		return ({"attributes": {
		    		"status_desc": "wallet_details",
		    		"status": "success"
		    	},
		    	"responseList":wallet_data}), status.HTTP_200_OK

#----------------------User-Loyality-Point-List---------------------#

#----------------------User-Loyality-Point-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getUserLoyalityPointListByorganisation/<int:user_id>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getUserLoyalityPointListByorganisation(user_id,organisation_id):

#@name_space.route("/getUserLoyalityPointList/<int:user_id>")	
#class getMetaKeyValueList(Resource):
	#def get(self,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_wallet_query = ("""SELECT `wallet` FROM `admins` 
						WHERE `admin_id` = %s """)
		getwalletdata = (user_id)
		cursor.execute(get_wallet_query,getwalletdata)
		wallet_data = cursor.fetchone()

		get_transaction_query = ("""SELECT * FROM `wallet_transaction` 
						WHERE `customer_id` = %s """)
		gettransactiondata = (user_id)
		cursor.execute(get_transaction_query,gettransactiondata)

		wallet_data['transactions'] = cursor.fetchall()

		for key,data in enumerate(wallet_data['transactions']):
			wallet_data['transactions'][key]['last_update_ts'] = str(data['last_update_ts'])
		

		return ({"attributes": {
		    		"status_desc": "wallet_details",
		    		"status": "success"
		    	},
		    	"responseList":wallet_data}), status.HTTP_200_OK

#----------------------User-Loyality-Point-List---------------------#


#----------------------Update-Customer-Address---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/updateCustomerAddress/<int:user_id>",methods=['PUT'])
@cross_origin(origin='*')	
def updateCustomerAddress(user_id):

#@name_space.route("/updateCustomerAddress/<int:user_id>")
#class updateCustomerAddress(Resource):
	#@api.expect(customer_address_putmodel)
	#def put(self, user_id):

		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()


		if details and "address_line_1" in details:
			address_line_1 = details['address_line_1']
			update_query = ("""UPDATE `admins` SET `address_line_1` = %s
				WHERE `admin_id` = %s """)
			update_data = (address_line_1,user_id)
			cursor.execute(update_query,update_data)

		if details and "address_line_2" in details:
			address_line_2 = details['address_line_2']
			update_query = ("""UPDATE `admins` SET `address_line_2` = %s
				WHERE `admin_id` = %s """)
			update_data = (address_line_2,user_id)
			cursor.execute(update_query,update_data)

		if details and "city" in details:
			city = details['city']
			update_query = ("""UPDATE `admins` SET `city` = %s
				WHERE `admin_id` = %s """)
			update_data = (city,user_id)
			cursor.execute(update_query,update_data)

		if details and "country" in details:
			country = details['country']
			update_query = ("""UPDATE `admins` SET `country` = %s
				WHERE `admin_id` = %s """)
			update_data = (country,user_id)
			cursor.execute(update_query,update_data)

		if details and "state" in details:
			state = details['state']
			update_query = ("""UPDATE `admins` SET `state` = %s
				WHERE `admin_id` = %s """)
			update_data = (state,user_id)
			cursor.execute(update_query,update_data)

		if details and "pincode" in details:
			pincode = details['pincode']
			update_query = ("""UPDATE `admins` SET `pincode` = %s
				WHERE `admin_id` = %s """)
			update_data = (pincode,user_id)
			cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update Customer Address",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK

#----------------------Update-Customer-Address---------------------#

#----------------------Update-Customer-Information---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/updateCustomerInformation/<int:user_id>",methods=['PUT'])
@cross_origin(origin='*')	
def updateCustomerInformation(user_id):

#@name_space.route("/updateCustomerInformation/<int:user_id>")
#class updateCustomerInformation(Resource):
	#@name_space.expect(upload_parser)
	#def put(self, user_id):

		connection = mysql_connection()
		cursor = connection.cursor()
		
		uploadURL = BASE_URL + 'aws_portal_upload/awsResourceUploadController/uploadToS3Bucket/{}'.format(user_id)
		headers = {"content-type": "multipart/form-data"}
		files = {}
		#print(request.files)
		for form_file_param in request.files:
			fs = request.files[form_file_param] 
			files[form_file_param] = (fs.filename, fs.read())

		uploadRes = requests.post(uploadURL,files=files).json()

		print(uploadRes)
		responselist = json.dumps(uploadRes['responseList'][0])
		s2 = json.loads(responselist)
		
		profile_image = s2['FilePath'] 

		update_query = ("""UPDATE `admins` SET `profile_image` = %s
			WHERE `admin_id` = %s """)
		update_data = (profile_image,user_id)
		cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update Customer Information",
								"status": "success"},
				"responseList": profile_image}), status.HTTP_200_OK

#----------------------Update-Customer-Information---------------------#

#----------------------Update-Customer-Basic-Information---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/updateCustomerBasicInfo/<int:user_id>",methods=['PUT'])
@cross_origin(origin='*')	
def updateCustomerBasicInfo(user_id):

#@name_space.route("/updateCustomerBasicInfo/<int:user_id>")
#class updateCustomerBasicInfo(Resource):
	#@api.expect(customer_basic_putmodel)
	#def put(self, user_id):

		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()


		if details and "first_name" in details:
			first_name = details['first_name']
			update_query = ("""UPDATE `admins` SET `first_name` = %s
				WHERE `admin_id` = %s """)
			update_data = (first_name,user_id)
			cursor.execute(update_query,update_data)

		if details and "email" in details:
			email = details['email']
			update_query = ("""UPDATE `admins` SET `email` = %s
				WHERE `admin_id` = %s """)
			update_data = (email,user_id)
			cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update Customer Basic Information",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK

#----------------------Update-Customer-Basic-Information---------------------#

#----------------------Customer-Details---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/customerDetails/<int:user_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def customerDetails(user_id):

#@name_space.route("/customerDetails/<int:user_id>")	
#class customerDetails(Resource):
	#def get(self,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
			a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,a.`pincode`,a.`emergency_contact`,a.`role_id`,
			d.`device_token`
				FROM `admins` a
				INNER JOIN `devices` d ON d.`user_id` = a.`admin_id` 
				WHERE `admin_id` = %s""")
		getData = (user_id)
		cursor.execute(get_query,getData)

		data = cursor.fetchone()

		return ({"attributes": {
		    		"status_desc": "customer_details",
		    		"status": "success"
		    	},
		    	"responseList":data}), status.HTTP_200_OK

#----------------------Customer-Details---------------------#

#----------------------Customer-List---------------------#
@name_space.route("/customerList/<int:organisation_id>")	
class customerList(Resource):
	def get(self,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT `admin_id` as `user_id`,`first_name`,`last_name`,`email`,
			`phoneno`,`profile_image`
				FROM `admins` WHERE `organisation_id` = %s and `role_id` = 4""")
		getData = (organisation_id)
		cursor.execute(get_query,getData)

		data = cursor.fetchall()

		return ({"attributes": {
		    		"status_desc": "customer_details",
		    		"status": "success"
		    	},
		    	"responseList":data}), status.HTTP_200_OK

#----------------------Customer-Details---------------------#

#----------------------Customer-Login---------------------#

#@name_space.route("/Login")	
#class Login(Resource):
	#@api.expect(login_postmodel)
	#def post(self):
@ecommerce_customer_new.route("/EcommerceCustomerNew/Login",methods=['POST'])
@cross_origin(origin='*')	
def Login():
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		get_emiail_query = ("""SELECT *
			FROM `admins` WHERE `email` = %s and `role_id` = 4""")
		getDataEmail = (details['email'])

		count_customer = cursor.execute(get_emiail_query,getDataEmail)

		if count_customer > 0:
			
			get_query = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
				a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,
				rs.`retailer_name`,rs.`phoneno` as retailer_phoneno				
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id` 
				INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id`
				WHERE a.`email` = %s and a.`org_password` = %s""")
			getData = (details['email'],details['password'])
			count_customer_email_password = cursor.execute(get_query,getData)			

			if count_customer_email_password > 0:
				login_data = cursor.fetchone()			

				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "success",
				    		"message":"Login Successfully"
				    	},
				    	"responseList":login_data}), status.HTTP_200_OK
			else:
				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "error",
				    		"message":"Email id and password does't match"
				    	},
				    	"responseList":{}}), status.HTTP_200_OK
		else:		
			return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "error",
			    		"message":"We cannot find an account with that email address"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
				    		

#----------------------Customer-Login---------------------#

#----------------------Customer-Login-With-Retailer---------------------#

@name_space.route("/LoginWithRetailer")	
class LoginWithRetailer(Resource):
	@api.expect(login_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		get_emiail_query = ("""SELECT *
			FROM `admins` WHERE `email` = %s and `role_id` = 4""")
		getDataEmail = (details['email'])

		count_customer = cursor.execute(get_emiail_query,getDataEmail)

		if count_customer > 0:
			
			get_query = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
				a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,cr.`referral_code`,
				rs.`retailer_name`,rs.`phoneno` as retailer_phoneno	
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id` 
				INNER JOIN `user_retailer_mapping` ur ON ur.`user_id` = a.`admin_id`
				INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id`
				WHERE a.`email` = %s and a.`org_password` = %s""")
			getData = (details['email'],details['password'])
			count_customer_email_password = cursor.execute(get_query,getData)			

			if count_customer_email_password > 0:
				login_data = cursor.fetchone()	

				get_store_query = ("""SELECT rs.`retailer_name`,rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rs.`city` as reatiler_city
					FROM `user_retailer_mapping` ur 
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id`
					INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id` where ur.`user_id` = %s""")		
				getStoreData = (login_data['user_id'])
				count_store_data = cursor.execute(get_store_query,getStoreData)
				store_data =  cursor.fetchone()

				if count_store_data > 0: 
					login_data['retailer_name'] = store_data['retailer_name']
					login_data['retailer_phoneno'] = store_data['retailer_phoneno']
					login_data['retailer_address'] = store_data['retailer_address']
					login_data['reatiler_city'] = store_data['reatiler_city']
				else:					
					login_data['retailer_address'] = ""
					login_data['reatiler_city'] = ""

				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "success",
				    		"message":"Login Successfully"
				    	},
				    	"responseList":login_data}), status.HTTP_200_OK
			else:
				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "error",
				    		"message":"Email id and password does't match"
				    	},
				    	"responseList":{}}), status.HTTP_200_OK
		else:		
			return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "error",
			    		"message":"We cannot find an account with that email address"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
				    		
#----------------------Customer-Login-With-Retailer---------------------#

#----------------------Customer-Login-With-Retailer-By-Organisation-Id---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/LoginWithRetailerbyorganisationid/<int:organisation_id>",methods=['POST'])
@cross_origin(origin='*')	
def LoginWithRetailerbyorganisationid(organisation_id):
	
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		get_emiail_query = ("""SELECT *
			FROM `admins` WHERE `email` = %s and `role_id` = 4""")
		getDataEmail = (details['email'])

		count_customer = cursor.execute(get_emiail_query,getDataEmail)

		if count_customer > 0:
			
			
			get_query = ("""SELECT a.`admin_id` as `user_id`,a.`first_name`,a.`last_name`,a.`email`,a.`org_password`,
				a.`phoneno`,a.`profile_image`,a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,
				a.`pincode`,a.`emergency_contact`,a.`role_id`,a.`wallet`,a.`registration_type`,a.`date_of_lastlogin`,a.`loggedin_status`,cr.`referral_code`
				FROM `admins` a
				INNER JOIN `customer_referral` cr ON cr.`customer_id` = a.`admin_id` 				
				WHERE a.`email` = %s and a.`org_password` = %s""")
			getData = (details['email'],details['password'])
			count_customer_email_password = cursor.execute(get_query,getData)			

			if count_customer_email_password > 0:

				

				login_data = cursor.fetchone()	

				print(login_data)

				get_store_query = ("""SELECT rs.`retailer_name`,rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rss.`retailer_store_store_id`,rs.`city` as reatiler_city
					FROM `user_retailer_mapping` ur 
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id`
					INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id` where ur.`user_id` = %s and ur.`organisation_id` = %s""")		
				getStoreData = (login_data['user_id'],organisation_id)
				count_store_data = cursor.execute(get_store_query,getStoreData)
				store_data =  cursor.fetchone()

				if count_store_data > 0: 
					login_data['retailer_store_store_id'] = store_data['retailer_store_store_id']
					login_data['retailer_name'] = store_data['retailer_name']
					login_data['retailer_phoneno'] = store_data['retailer_phoneno']
					login_data['retailer_address'] = store_data['retailer_address']
					login_data['reatiler_city'] = store_data['reatiler_city']
				else:	
					login_data['retailer_store_store_id'] = 0
					login_data['retailer_name'] = ""
					login_data['retailer_phoneno'] = ""	
					login_data['retailer_address'] = ""
					login_data['reatiler_city'] = ""

				get_loyality_query_type_1 = ("""SELECT *
				FROM `loyality_master`			
				WHERE `organisation_id` = %s and `loyality_type` = 1""")

				get_loyality_data_type_1 = (organisation_id)
				count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

				referal_loyalty_data_type_1 = cursor.fetchone()

				get_loyality_query_type_2 = ("""SELECT *
					FROM `loyality_master`			
					WHERE `organisation_id` = %s and `loyality_type` = 2""")

				get_loyality_data_type_2 = (organisation_id)
				count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

				referal_loyalty_data_type_2 = cursor.fetchone()

				if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

					if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
						is_referal = 0
					else:
						is_referal = 1
				else:
					is_referal = 0	

				login_data['is_referal'] = is_referal

				now = datetime.now()
				date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

				date_of_lastlogin = date_of_creation
				loggedin_status = 1

				update_query = ("""UPDATE `admins` SET `loggedin_status` = %s, `date_of_lastlogin` = %s
									WHERE `email` = %s and `org_password` = %s and `organisation_id` = %s""")
				update_data = (loggedin_status,date_of_lastlogin,details['email'],details['password'],organisation_id)
				cursor.execute(update_query,update_data)

				connection.commit()
				cursor.close()


				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "success",
				    		"message":"Login Successfully"
				    	},
				    	"responseList":login_data}), status.HTTP_200_OK
			else:
				return ({"attributes": {
				    		"status_desc": "login_details",
				    		"status": "error",
				    		"message":"Email id and password does't match"
				    	},
				    	"responseList":{}}), status.HTTP_200_OK
		else:		
			return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "error",
			    		"message":"We cannot find an account with that email address"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
				    		
#----------------------Customer-Login-With-Retailer---------------------#


#----------------------Forgotpassword---------------------#

@name_space.route("/Forgotpassword")	
class Forgotpassword(Resource):
	@api.expect(checkphoneno_postmodel)
	def post(self):		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		get_query = ("""SELECT *
			FROM `admins` WHERE `phoneno` = %s and `role_id` = 4""")
		getData = (details['phoneno'])
		count_customer = cursor.execute(get_query,getData)

		connection.commit()
		cursor.close()

		if count_customer > 0:
			login_data = cursor.fetchone()
			return ({"attributes": {
			    		"status_desc": "customer_details",
			    		"status": "success",
			    		"mesaage":"Exist"
			    	},
			    	"responseList":{"user_id": login_data['admin_id']}}), status.HTTP_200_OK

		else:
			return ({"attributes": {
		    		"status_desc": "customer_details",
		    		"status": "success",
		    		"message":"Did not Exist"
		    	},
		    	"responseList":{"phoneno":details['phoneno']}}), status.HTTP_200_OK

		

#----------------------Forgotpassword---------------------#

#----------------------Change-Password---------------------#

@name_space.route("/changePasswod/<int:user_id>")
class changePasswod(Resource):
	@api.expect(changepassword_putmodel)
	def put(self,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()
		
		details = request.get_json()

		update_query = ("""UPDATE `admins` SET `org_password` = %s
				WHERE `admin_id` = %s """)
		update_data = (details['new_password'],user_id)
		cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Change Password",
								"status": "success",
								"message":"Password set successfully"
									},
				"responseList":details}), status.HTTP_200_OK

#----------------------Change-Password---------------------#

#----------------------Change-Retailer---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/changeRetailer/<int:user_id>/<int:organisation_id>",methods=['PUT'])
@cross_origin(origin='*')	
def changeRetailer(user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()
		
		details = request.get_json()

		get_query_city = ("""SELECT *
				FROM `retailer_store` WHERE `city` = %s and organisation_id = %s""")
		getDataCity = (details['city'],organisation_id)
		count_city = cursor.execute(get_query_city,getDataCity)

		if count_city > 0:
			city_data = cursor.fetchone()

			get_query_retailer_store = ("""SELECT *
					FROM `retailer_store_stores` WHERE `retailer_store_id` = %s and `organisation_id` = %s and `address` = %s""")
			getDataRetailerStore = (city_data['retailer_store_id'],organisation_id,details['retailer_store'])
			count_retailer_store = cursor.execute(get_query_retailer_store,getDataRetailerStore)
			retailer_store_data = cursor.fetchone()

			get_mapping_query = ("""SELECT *
				FROM `user_retailer_mapping` WHERE  `user_id` = %s and `organisation_id` = %s""")

			getMappingData = (user_id,organisation_id)
		
			count_mapping_data = cursor.execute(get_mapping_query,getMappingData)

			if count_mapping_data > 0:

				update_query = ("""UPDATE `user_retailer_mapping` SET `retailer_id` = %s,`retailer_store_id` = %s
							WHERE `user_id` = %s and `organisation_id` = %s""")
				update_data = (city_data['retailer_store_id'],retailer_store_data['retailer_store_store_id'],user_id,organisation_id)
				cursor.execute(update_query,update_data)

				update_user_query = ("""UPDATE `admins` SET `city` = %s
							WHERE `admin_id` = %s""")
				update_user_data = (details['city'],user_id)
				cursor.execute(update_user_query,update_user_data)

			else:
				insert_mapping_user_retailer = ("""INSERT INTO `user_retailer_mapping`(`user_id`,`retailer_id`,`retailer_store_id`,`status`,`organisation_id`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s,%s)""")
				
				admin_status = 1		
				last_update_id = organisation_id
				city_insert_data = (user_id,city_data['retailer_store_id'],retailer_store_data['retailer_store_store_id'],admin_status,organisation_id,last_update_id)	
				cursor.execute(insert_mapping_user_retailer,city_insert_data)




		get_store_query = ("""SELECT rs.`retailer_name`,rss.`phoneno` as retailer_phoneno,rss.`address` as retailer_address,rss.`retailer_store_store_id`,rs.`city` as reatiler_city
					FROM `user_retailer_mapping` ur 
					INNER JOIN `retailer_store` rs ON rs.`retailer_store_id` = ur.`retailer_id`
					INNER JOIN `retailer_store_stores` rss ON rss.`retailer_store_store_id` = ur.`retailer_store_id` where ur.`user_id` = %s and ur.`organisation_id` = %s""")		
		getStoreData = (user_id,organisation_id)
		count_store_data = cursor.execute(get_store_query,getStoreData)
		store_data =  cursor.fetchone()					

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Change Retailer",
								"status": "success",
								"message":"Update Successfully"
									},
				"responseList":store_data}), status.HTTP_200_OK

#----------------------Change-Retailer---------------------#

#----------------------Send-Otp---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/sendOtpToEmail",methods=['POST'])
@cross_origin(origin='*')	
def sendOtpToEmail():		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		url = "http://ec2-18-221-89-14.us-east-2.compute.amazonaws.com/flaskapp/ecommerce_organisation_otp/EcommerceOrganisationOtp/GenerateOTP"
		post_data = {
					  "USER_ID": 0,
					  "organisation_id": 0,
					  "role_id": 0,
					  "FIRST_NAME": "string",
					  "LAST_NAME": "string",
					  "MAIL_ID": "string",
					  "Address": "string",
					  "PHONE_NUMBER": details['phoneno']
					}



		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		post_response = requests.post(url, data=json.dumps(post_data), headers=headers)

		my_json_string = post_response.json()

		print(my_json_string)

		#s1 = json.dumps(my_json_string['responseList'][0])
		#s2 = json.loads(s1)

		#InstitutionUserOtp = json.dumps(s2['InstitutionUserOtp '])
		otpjson = json.loads(my_json_string['responseList']['OTP'])

		if otpjson :			
			get_query = ("""SELECT *
			FROM `organisation_master` WHERE `phoneno` = %s """)
			getData = (details['phoneno'])
			count_data = cursor.execute(get_query,getData)
			print(cursor._last_executed)

			print(count_data)

			if count_data > 0:
				organisation_data = cursor.fetchone()				

				if organisation_data['email'] :

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/send_email_test"
					payloadpushData = {
						"To":organisation_data['email'],
						"Subject":"OTP",
						"text":"Hi,The OTP for the login is "+str(otpjson)+" .This OTP is valid only for one time use."
					}

					print(payloadpushData)

					send_email_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()


			return ({"attributes": {"status_desc": "Send Otp",
								"status": "success",
								"message":"Send Otp Successfully"
									},
				"responseList":{"otp":otpjson,"phoneno":details['phoneno']}}), status.HTTP_200_OK
		else:
			return ({"attributes": {"status_desc": "Send Otp",
								"status": "error",
								"message":"Having Issue"
									},
				"responseList":{}}), status.HTTP_200_OK	
#----------------------Send-Otp---------------------#


#----------------------Send-Otp---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/sendOtp",methods=['POST'])
@cross_origin(origin='*')	
def sendOtp():		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		#url = "http://creamsonservices.com:8080/NewSignUpService/postInstitutionUserOtp"
		#post_data = {
					  #"firstName": "string",
					  #"generatedBy": "string",
					  #"institutionId": 1,
					  #"institutionUserId": 0,
					  #"institutionUserRole": "S1",
					  #"lastName": "string",
					  #"mailId": "string",
					  #"otp": 123456,
					  #"phoneNumber": details['phoneno']
					#}

		#headers = {'Content-type':'application/json', 'Accept':'application/json'}
		#post_response = requests.post(url, data=json.dumps(post_data), headers=headers)

		#my_json_string = post_response.json()

		#s1 = json.dumps(my_json_string['responseList'][0])
		#s2 = json.loads(s1)

		#InstitutionUserOtp = json.dumps(s2['InstitutionUserOtp '])
		#otpjson = json.loads(InstitutionUserOtp)

		url = "http://ec2-18-221-89-14.us-east-2.compute.amazonaws.com/flaskapp/ecommerce_organisation_otp/EcommerceOrganisationOtp/GenerateOTP"
		post_data = {
					  "USER_ID": 0,
					  "organisation_id": 0,
					  "role_id": 0,
					  "FIRST_NAME": "string",
					  "LAST_NAME": "string",
					  "MAIL_ID": "string",
					  "Address": "string",
					  "PHONE_NUMBER": details['phoneno']
					}



		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		post_response = requests.post(url, data=json.dumps(post_data), headers=headers)

		my_json_string = post_response.json()

		otpjson = my_json_string['responseList']['OTP']
		PHONE_NUMBER = my_json_string['responseList']['PHONE_NUMBER']

		if otpjson :
			return ({"attributes": {"status_desc": "Send Otp",
								"status": "success",
								"message":"Send Otp Successfully"
									},
				"responseList":{"otp":otpjson,"phoneno":PHONE_NUMBER}}), status.HTTP_200_OK
		else:
			return ({"attributes": {"status_desc": "Send Otp",
								"status": "error",
								"message":"Having Issue"
									},
				"responseList":{}}), status.HTTP_200_OK	
#----------------------Send-Otp---------------------#

#----------------------Send-Otp-with-Organisation---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/sendOtpwithOrganisation",methods=['POST'])
@cross_origin(origin='*')	
def sendOtpwithOrganisation():		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		otp_settings_value = 0		

		if details and "organisation_id" in details:

			organisation_id = details['organisation_id']

			get_query = ("""SELECT `otp_setting_value`
					FROM `otp_settings` WHERE `organisation_id` = %s """)

			getData = (organisation_id)

			count_otp_settings = cursor.execute(get_query,getData)

			if count_otp_settings > 0:
				otp_settings_data = cursor.fetchone()

				if otp_settings_data['otp_setting_value'] == 1:
					otp_settings_value = 1
				else:
					otp_settings_value = 0

			get_query = ("""SELECT *
			FROM `admins` WHERE `phoneno` = %s and `role_id` = 4 and `organisation_id` = %s""")
			getData = (details['phoneno'],details['organisation_id'])
			count_customer = cursor.execute(get_query,getData)

			if count_customer > 0:
				customer_data = cursor.fetchone()
				get_retailer_query = ("""SELECT *
						FROM `user_retailer_mapping` WHERE `user_id` = %s and `organisation_id` = %s""")
				getRetailerData = (customer_data['admin_id'],organisation_id)
				countRetailer = cursor.execute(get_retailer_query,getRetailerData)

				if countRetailer > 0 :
					customer_retailer = cursor.fetchone()			
					if customer_retailer['retailer_store_id'] == 0:				
						address = ""
					else:
						get_retailer_store_query = ("""SELECT *
								FROM `retailer_store_stores` WHERE `retailer_store_store_id` = %s""")
						getRetailerStoreData = (customer_retailer['retailer_store_id'])
						countRetailerStore = cursor.execute(get_retailer_store_query,getRetailerStoreData)
						if countRetailerStore > 0:						
							customer_retailer_store  = cursor.fetchone()
							address = customer_retailer_store['address']
						else:
							address = ""
				else:
					address = ""
			else:
				address = ""
		else:
			address = ""

		if otp_settings_value == 1:

			#url = "http://creamsonservices.com:8080/NewSignUpService/postInstitutionUserOtp"
			#post_data = {
						 # "firstName": "string",
						 # "generatedBy": "string",
						#  "institutionId": 1,
						 # "institutionUserId": 0,
						#  "institutionUserRole": "S1",
						#  "lastName": "string",
						#  "mailId": "string",
						 # "otp": 123456,
						  #"phoneNumber": details['phoneno']
						#}

			#headers = {'Content-type':'application/json', 'Accept':'application/json'}
			#post_response = requests.post(url, data=json.dumps(post_data), headers=headers)

			#my_json_string = post_response.json()

			#s1 = json.dumps(my_json_string['responseList'][0])
			#s2 = json.loads(s1)

			#InstitutionUserOtp = json.dumps(s2['InstitutionUserOtp '])
			#otpjson = json.loads(InstitutionUserOtp)

			url = "http://ec2-18-221-89-14.us-east-2.compute.amazonaws.com/flaskapp/ecommerce_organisation_otp/EcommerceOrganisationOtp/GenerateOTP"
			post_data = {
					  "USER_ID": 0,
					  "organisation_id": 0,
					  "role_id": 0,
					  "FIRST_NAME": "string",
					  "LAST_NAME": "string",
					  "MAIL_ID": "string",
					  "Address": "string",
					  "PHONE_NUMBER": details['phoneno']
					}



			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			post_response = requests.post(url, data=json.dumps(post_data), headers=headers)

			my_json_string = post_response.json()

			otpjson = my_json_string['responseList']['OTP']
			PHONE_NUMBER = my_json_string['responseList']['PHONE_NUMBER']

			if otpjson :
				return ({"attributes": {"status_desc": "Send Otp",
									"status": "success",
									"message":"Send Otp Successfully"
										},
					"responseList":{"otp":otpjson,"phoneno":PHONE_NUMBER,"otp_sent":1,"address":address}}), status.HTTP_200_OK
			else:
				return ({"attributes": {"status_desc": "Send Otp",
									"status": "error",
									"message":"Having Issue"
										},
					"responseList":{}}), status.HTTP_200_OK	
		else:
			return ({"attributes": {"status_desc": "Send Otp",
									"status": "success",
									"message":"Having Issue"
										},
					"responseList":{"otp":0,"phoneno":details['phoneno'],"otp_sent":0,"address":address}}), status.HTTP_200_OK	

#----------------------Send-Otp-with-Organisation---------------------#

#----------------------Check-Otp---------------------#

@ecommerce_customer_new.route("/EcommerceCustomerNew/checkOtp",methods=['POST'])
@cross_origin(origin='*')	
def checkOtp():		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		#headers = {'Content-type':'application/json', 'Accept':'application/json'}
		#url = 'http://creamsonservices.com:8080/NewSignUpService/validateOtpByPhone/{}/{}'.format(details['otp'],details['phoneno'])

		#getResponse = requests.get(url, headers=headers)

		#my_json_string = getResponse.json()

		#check_response = json.dumps(my_json_string['attributes'])

		#response = json.loads(check_response)

		get_otp_query = ("""SELECT *
					FROM `organisation_user_otp` WHERE `PHONE_NUMBER` = %s ORDER BY ID DESC LIMIT 1""")
		get_otp_data = (details['phoneno'])
		count_otp = cursor.execute(get_otp_query,get_otp_data)		

		if count_otp > 0:
			otp_data = cursor.fetchone()

			print(otp_data)

			if otp_data['OTP'] == int(details['otp']):
				
				otpjson = otp_data['OTP']
				PHONE_NUMBER = otp_data['PHONE_NUMBER']
			

			#if(response['status'] == 'success'):

				#responselist = json.dumps(my_json_string['responseList'][0])
				#responselistjson = json.loads(responselist)

				#InstitutionUserOtp = json.dumps(responselistjson['InstitutionUserOtp '])
				#$otpjson = json.loads(InstitutionUserOtp)

				if otpjson :
					return ({"attributes": {"status_desc": "Check Otp",
										"status": "success",
										"message":"Outhenticate Successfully"
											},
						"responseList":{"otp":otpjson,"phoneno":PHONE_NUMBER}}), status.HTTP_200_OK
			else:
				return ({"attributes": {"status_desc": "Check Otp",
									"status": "error",
									"message":"Otp Not Validated"
										},
					"responseList":{}}), status.HTTP_200_OK
		else:
			return ({"attributes": {"status_desc": "Check Otp",
									"status": "error",
									"message":"Otp Not Validated"
										},
					"responseList":{}}), status.HTTP_200_OK	

#----------------------Check-Otp---------------------#

#----------------------Check-Otp---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/checkOtpWithOrganisation",methods=['POST'])
@cross_origin(origin='*')	
def checkOtpWithOrganisation():		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		organisation_id = details['organisation_id']

		#headers = {'Content-type':'application/json', 'Accept':'application/json'}
		#url = 'http://creamsonservices.com:8080/NewSignUpService/validateOtpByPhone/{}/{}'.format(details['otp'],details['phoneno'])

		#getResponse = requests.get(url, headers=headers)

		#my_json_string = getResponse.json()

		#check_response = json.dumps(my_json_string['attributes'])

		#response = json.loads(check_response)

		get_query = ("""SELECT *
			FROM `admins` WHERE `phoneno` = %s and `role_id` = 4 and `organisation_id` = %s""")
		getData = (details['phoneno'],details['organisation_id'])
		count_customer = cursor.execute(get_query,getData)

		if count_customer > 0:
			customer_data = cursor.fetchone()
			get_retailer_query = ("""SELECT *
				FROM `user_retailer_mapping` WHERE `user_id` = %s and `organisation_id` = %s""")
			getRetailerData = (customer_data['admin_id'],organisation_id)
			countRetailer = cursor.execute(get_retailer_query,getRetailerData)

			if countRetailer > 0 :
				customer_retailer = cursor.fetchone()			
				if customer_retailer['retailer_store_id'] == 0:				
					address = ""
				else:
					get_retailer_store_query = ("""SELECT *
						FROM `retailer_store_stores` WHERE `retailer_store_store_id` = %s""")
					getRetailerStoreData = (customer_retailer['retailer_store_id'])
					countRetailerStore = cursor.execute(get_retailer_store_query,getRetailerStoreData)
					if countRetailerStore > 0:						
						customer_retailer_store  = cursor.fetchone()
						address = customer_retailer_store['address']
					else:
						address = ""
			else:
				address = ""
		else:
			address = ""


		get_otp_query = ("""SELECT *
					FROM `organisation_user_otp` WHERE `PHONE_NUMBER` = %s ORDER BY ID DESC LIMIT 1""")
		get_otp_data = (details['phoneno'])
		count_otp = cursor.execute(get_otp_query,get_otp_data)			

		if count_otp > 0:
			otp_data = cursor.fetchone()

			if otp_data['OTP'] == int(details['otp']):			
			
				otpjson = otp_data['OTP']
				PHONE_NUMBER = otp_data['PHONE_NUMBER']

				#responselist = json.dumps(my_json_string['responseList'][0])
				#responselistjson = json.loads(responselist)

				#InstitutionUserOtp = json.dumps(responselistjson['InstitutionUserOtp '])
				#otpjson = json.loads(InstitutionUserOtp)

				if otpjson :
					return ({"attributes": {"status_desc": "Check Otp",
										"status": "success",
										"message":"Outhenticate Successfully"
											},
						"responseList":{"otp":otpjson,"phoneno":PHONE_NUMBER,"retailer_address":address}}), status.HTTP_200_OK
			else:
				return ({"attributes": {"status_desc": "Check Otp",
								"status": "error",
								"message":"Otp Not Validated"
									},
				"responseList":{}}), status.HTTP_200_OK	
		else:
			return ({"attributes": {"status_desc": "Check Otp",
								"status": "error",
								"message":"Otp Not Validated"
									},
				"responseList":{}}), status.HTTP_200_OK	

#----------------------Check-Otp---------------------#


#----------------------Get-Customer-Notification---------------------#	

@name_space.route("/getCustomerNotificationList/<int:user_id>")	
class getCustomerNotificationList(Resource):
	def get(self,user_id):
		
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `customer_notification_mapping` where `customer_id` = %s""")
		get_data = (user_id)
		cursor.execute(get_query,get_data)

		cusomer_notification_data = cursor.fetchall()

		for key,data in enumerate(cusomer_notification_data):
			cusomer_notification_data[key]['Last_update_TS'] = str(data['Last_update_TS'])

			get_product_query = ("""SELECT `product_id`,`product_name`,`product_long_description`,`product_short_description`
			FROM `product` WHERE `product_id` = %s """)
			get_product_data = (data['product_id'])
			cursor.execute(get_product_query,get_product_data)
			product_data = cursor.fetchone()

			get_notification_query = ("""SELECT `notification_id`,`text`,`image`,`email`,`whatsapp`
			FROM `notification` WHERE `notification_id` = %s """)
			get_notification_data = (data['notification_id'])
			cursor.execute(get_notification_query,get_notification_data)
			notification_data = cursor.fetchone()

			cusomer_notification_data[key]['product_name'] = product_data['product_name']
			cusomer_notification_data[key]['notification_id'] = notification_data['notification_id']	
			cusomer_notification_data[key]['text'] = notification_data['text']
			cusomer_notification_data[key]['image'] = notification_data['image']
			cusomer_notification_data[key]['email'] = notification_data['email']
			cusomer_notification_data[key]['whatsapp'] = notification_data['whatsapp']
		return ({"attributes": {
		    		"status_desc": "customer_notification_details",
		    		"status": "success"
		    	},
		    	"responseList":cusomer_notification_data}), status.HTTP_200_OK

#----------------------Get-Customer-Notification---------------------#	

#----------------------Get-Customer-List---------------------#

@name_space.route("/getCustomerList")	
class getCustomerList(Resource):
	def get(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT `admin_id`,`first_name`,`last_name`,`email`,`org_password`,`phoneno`,
			`address_line_1`,`address_line_2`,`city`,`county`,`state`,`pincode`,`emergency_contact`,
			`status`
			FROM `admins` WHERE `role_id` = 4 """)

		cursor.execute(get_query)

		data = cursor.fetchall()
				
		return ({"attributes": {
		    		"status_desc": "Customer_details",
		    		"status": "success"
		    	},
		    	"responseList":data}), status.HTTP_200_OK
		
#-----------------------Get-Customer-List---------------------#

#----------------------Add-Customer-Stories---------------------#

@name_space.route("/AddCustomerStories")
class AddCustomerStories(Resource):
	@api.expect(customer_stories_postmodel)
	def post(self):
	
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		customer_id = details['user_id']
		review = details['review']
		ratting = details['ratting']

		now = datetime.now()
		date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

		insert_query = ("""INSERT INTO `customer_stories`(`customer_id`,`review`,`ratting`,`date_of_creation`) 
				VALUES(%s,%s,%s,%s)""")
		data = (customer_id,review,ratting,date_of_creation)
		cursor.execute(insert_query,data)

		customer_story_id = cursor.lastrowid
		details['customer_story_id'] = customer_story_id

		connection.commit()
		cursor.close()

		return ({"attributes": {
				    "status_desc": "customer_story_details",
				    "status": "success"
				},
				"responseList":details}), status.HTTP_200_OK

#----------------------Add-Customer-Stories---------------------#

#----------------------Get-Customer-Stories---------------------#

@name_space.route("/getCustomerStoryList")	
class getCustomerStoryList(Resource):
	def get(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `customer_stories`""")

		cursor.execute(get_query)

		story_data = cursor.fetchall()

		for key,data in enumerate(story_data):
			story_data[key]['date_of_creation'] = str(data['date_of_creation'])

			get_customer_query = ("""SELECT `first_name`,`last_name`
			FROM `admins` WHERE `admin_id` = %s """)
			customer_data = (data['customer_id'])
			cursor.execute(get_customer_query,customer_data)

			customer_data_result = cursor.fetchone()

			story_data[key]['first_name'] = customer_data_result['first_name']
			story_data[key]['last_name'] = customer_data_result['last_name']

				
		return ({"attributes": {
		    		"status_desc": "Customer_stories",
		    		"status": "success"
		    	},
		    	"responseList":story_data}), status.HTTP_200_OK
		
#-----------------------Get-Customer-Stories---------------------#

#----------------------Add-Customer-Product---------------------#
#----------------------Check-Email-Exist---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/addCustomerProduct",methods=['POST'])
@cross_origin(origin='*')	
def addCustomerProduct():

#@name_space.route("/addCustomerProduct")	
#class addCustomerProduct(Resource):
	#@api.expect(customer_product_postmodel)
	#def post(self):	

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		product_meta_id = details['product_meta_id']
		customer_id = details['customer_id']
		organisation_id = details['organisation_id']
		last_update_id = 1
		product_status = "w"
		customer_prodcut_status = 1

		is_favourite = details['is_favourite']

		if is_favourite == "y":

			get_query = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status = "w" and `organisation_id` = %s""")

			getData = (product_meta_id,customer_id,organisation_id)
			
			count_product = cursor.execute(get_query,getData)

			if count_product > 0:

				connection.commit()
				cursor.close()

				return ({"attributes": {
				    		"status_desc": "customer_product_details",
				    		"status": "error"
				    	},
				    	"responseList":"Product Already Exsits" }), status.HTTP_200_OK

			else:

				insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
						VALUES(%s,%s,%s,%s,%s,%s)""")

				data = (customer_id,product_meta_id,product_status,customer_prodcut_status,organisation_id,last_update_id)
				cursor.execute(insert_query,data)		

				mapping_id = cursor.lastrowid
				details['mapping_id'] = mapping_id

				connection.commit()
				cursor.close()

			return ({"attributes": {
					    		"status_desc": "customer_product_details",
					    		"status": "success"
					    	},
					    	"responseList":"Product Added Successfully"}), status.HTTP_200_OK
		else:
			delete_query = ("""DELETE FROM `customer_product_mapping` WHERE `product_meta_id` = %s and `customer_id` = %s""")
			delData = (product_meta_id,customer_id)
			
			cursor.execute(delete_query,delData)
			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "customer_product_details",
								"status": "success"},
				"responseList": 'Deleted Successfully'}), status.HTTP_200_OK		


#----------------------Add-Customer-Product---------------------#


#----------------------Product-Customer-List---------------------#

@name_space.route("/getProductCustomerList/<string:key>/<int:user_id>")	
class getProductCustomerList(Resource):
	def get(self,key,user_id):
		if key == "c" or key == "w" or key == "o":
			product_data = 	[
								{
									"user_id":user_id,
									"product_id":1,
									"product_name": "Test Product1",
								    "image": "https://d1lwvo1ffrod0a.cloudfront.net/117/drive.png",
								    "price": 9999.00
	        					},
	        					{
	        						"user_id":user_id,
	        						"product_id":2,
									"text": "Test Product2",
								    "image": "https://d1lwvo1ffrod0a.cloudfront.net/117/image2.png",
								    "price": 10000.00
	        					},
	        					{
	        						"user_id":user_id,
	        						"product_id":3,
									"text": "Test Product3",
								    "image": "https://d1lwvo1ffrod0a.cloudfront.net/117/memorycard.png",
								    "price": 11000.00
								},
								{
	        						"user_id":user_id,
	        						"product_id":4,
									"text": "Test Product4",
								    "image": "https://d1lwvo1ffrod0a.cloudfront.net/117/phone.jpg",
								    "price": 11000.00
								}
							]  					    
	   		
		return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK


#----------------------Product-Customer-List---------------------#

#----------------------Product-Customer-List---------------------#

@name_space.route("/getProductCustomerListD/<string:key>/<int:user_id>/<int:organisation_id>")	
class getProductCustomerListD(Resource):
	def get(self,key,user_id,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		
		get_wishlist_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `customer_product_mapping` cpm 
			INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s""")	

		wishlist_data = (user_id,key,organisation_id)
		cursor.execute(get_wishlist_query,wishlist_data)

		wishlist = cursor.fetchall()	

		for tkey,tdata in enumerate(wishlist):			
			get_product_meta_image_quey = ("""SELECT `image` as `product_image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (tdata['product_meta_id'])
			rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image > 0:
				product_meta_image = cursor.fetchone()
				wishlist[tkey]['product_image'] = product_meta_image['product_image']
			else:
				wishlist[tkey]['product_image'] = ""

			if tdata['meta_key_text']:

				a_string = tdata['meta_key_text']
				a_list = a_string.split(',')

				met_key = []

				for a in a_list:
					get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
									FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
					getdata_key_value = (a)
					cursor.execute(get_query_key_value,getdata_key_value)
					met_key_value_data = cursor.fetchone()

					get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
					getdata_key = (met_key_value_data['meta_key_id'])
					cursor.execute(get_query_key,getdata_key)
					met_key_data = cursor.fetchone()

					met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

					wishlist[tkey]['met_key_value'] = met_key

			get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
			getdata_discount = (tdata['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				wishlist[tkey]['discount'] = product_meta_discount['discount']

				discount = (tdata['out_price']/100)*product_meta_discount['discount']
				actual_amount = tdata['out_price'] - discount
				wishlist[tkey]['after_discounted_price'] = round(actual_amount,2)

			else:
				wishlist[tkey]['discount'] = 0
				wishlist[tkey]['after_discounted_price'] = tdata['out_price']

			qty_quey = ("""SELECT `qty` 
				FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
			qty_data = (tdata['mapping_id'])
			rows_count_qty = cursor.execute(qty_quey,qty_data)
			if rows_count_qty > 0:
				qty = cursor.fetchone()
				wishlist[tkey]['qty'] = qty['qty']
			else:
				wishlist[tkey]['qty'] = ""		
	   		
		return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success"
		    	},
		    	"responseList":wishlist}), status.HTTP_200_OK


#----------------------Product-Customer-List---------------------#

#----------------------Product-Customer-List-With-Pagination---------------------#

#----------------------Dashboard-with-offer-Cross-Browser---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getProductCustomerListWithPagination/<string:key>/<int:user_id>/<int:organisation_id>/<int:page>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getProductCustomerListWithPagination(key,user_id,organisation_id,page):

#@name_space.route("/getProductCustomerListWithPagination/<string:key>/<int:user_id>/<int:organisation_id>/<int:page>")	
#class getProductCustomerListWithPagination(Resource):
	#def get(self,key,user_id,organisation_id,page):

		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20


		print(offset)

		if key == "w":
			get_wishlist_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `customer_product_mapping` cpm 
			INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s LIMIT %s,20""")	

			wishlist_data = (user_id,key,organisation_id,offset)
			cursor.execute(get_wishlist_query,wishlist_data)
		else:
			get_wishlist_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `customer_product_mapping` cpm 
			INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s""")	

			wishlist_data = (user_id,key,organisation_id)

		count_list = cursor.execute(get_wishlist_query,wishlist_data)

		if count_list < 2:
			if count_list > 0:
				cartlist  = cursor.fetchone()			

				get_plan_by_product_meta_id_query = ("""SELECT p.`plan_description`,p.`plan_short_description`,eb.`emi_bank_name`,p.`validity_date_from`,p.`validity_date_to`
															FROM `product_plan_mapping` ppm
															INNER JOIN `plan` p ON p.`plan_id` = ppm.`plan_id` 
															INNER JOIN `emi_bank` eb ON eb.`emi_bank_id` = p.`emi_bank_id`
															where ppm.`product_meta_id` = %s and ppm.`organisation_id` = %s""")
				get_plan_by_product_meta_id_data = (cartlist['product_meta_id'],organisation_id)
				plan_count = cursor.execute(get_plan_by_product_meta_id_query,get_plan_by_product_meta_id_data)

				if plan_count > 0:
					plan_data =  cursor.fetchall()
					for key,data in enumerate(plan_data):
						plan_data[key]['validity_date_from'] = str(data['validity_date_from'])
						plan_data[key]['validity_date_to'] = str(data['validity_date_to'])
				else:
					plan_data = []
			else:
				plan_data = []
		else:
			plan_data = []

		
		if key == "w":
			get_wishlist_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `customer_product_mapping` cpm 
			INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s LIMIT %s,20""")	

			wishlist_data = (user_id,key,organisation_id,offset)
			cursor.execute(get_wishlist_query,wishlist_data)
		else:
			get_wishlist_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `customer_product_mapping` cpm 
			INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s""")	

			wishlist_data = (user_id,key,organisation_id)

		cursor.execute(get_wishlist_query,wishlist_data)

		wishlist = cursor.fetchall()	

		for tkey,tdata in enumerate(wishlist):			
			get_product_meta_image_quey = ("""SELECT `image` as `product_image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (tdata['product_meta_id'])
			rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image > 0:
				product_meta_image = cursor.fetchone()
				wishlist[tkey]['product_image'] = product_meta_image['product_image']
			else:
				wishlist[tkey]['product_image'] = ""

			if tdata['meta_key_text'] :

				a_string = tdata['meta_key_text']
				a_list = a_string.split(',')

				met_key = []

				for a in a_list:
					get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
									FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
					getdata_key_value = (a)
					cursor.execute(get_query_key_value,getdata_key_value)
					met_key_value_data = cursor.fetchone()

					get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
					getdata_key = (met_key_value_data['meta_key_id'])
					cursor.execute(get_query_key,getdata_key)
					met_key_data = cursor.fetchone()

					met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

					wishlist[tkey]['met_key_value'] = met_key

			get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data = (organisation_id, tdata['product_meta_id'])
			count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
			if count_out_price_data >0:
				out_price_data = cursor.fetchone()
				wishlist[tkey]['out_price'] = out_price_data['out_price']
			else:
				wishlist[tkey]['out_price'] = tdata['out_price']

			get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
			getdata_discount = (tdata['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				wishlist[tkey]['discount'] = product_meta_discount['discount']

				discount = (tdata['out_price']/100)*product_meta_discount['discount']
				actual_amount = tdata['out_price'] - discount
				wishlist[tkey]['after_discounted_price'] = round(actual_amount,2)

			else:
				wishlist[tkey]['discount'] = 0
				wishlist[tkey]['after_discounted_price'] = tdata['out_price']

			qty_quey = ("""SELECT `qty` 
				FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
			qty_data = (tdata['mapping_id'])
			rows_count_qty = cursor.execute(qty_quey,qty_data)
			if rows_count_qty > 0:
				qty = cursor.fetchone()
				wishlist[tkey]['qty'] = qty['qty']
			else:
				wishlist[tkey]['qty'] = ""

		if user_id == 0:
				user_data = {}
				user_data["address_line_1"] = ""
				user_data["address_line_2"] = ""
				user_data["city"] = ""
				user_data["country"] = ""
				user_data["state"] = ""
				user_data["pincode"] = 0
		else:	
			get_user_details_query = (""" SELECT address_line_1,address_line_2,city,country,state,pincode 
											FROM `admins` WHERE admin_id = %s """)
			get_user_details_data = (user_id)
			count_user_details = cursor.execute(get_user_details_query,get_user_details_data)

			if count_user_details > 0:
				user_data = cursor.fetchone()
			else:
				user_data = {}
				user_data["address_line_1"] = ""
				user_data["address_line_2"] = ""
				user_data["city"] = ""
				user_data["country"] = ""
				user_data["state"] = ""
				user_data["pincode"] = 0

		if key == "w":		

	   		get_wishlist_query_count =  ("""SELECT count(*) product_count
				FROM `customer_product_mapping` cpm 
				INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
				where cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s""")
	   		wishlist_data_count = (user_id,key,organisation_id)
	   		cursor.execute(get_wishlist_query_count,wishlist_data_count)

	   		product_data_count = cursor.fetchone()

	   		page_count = math.trunc(product_data_count['product_count']/20)	   		

	   		if page_count == 0:
	   			page_count = 1
	   			next_page = ""
	   			previous_page = ""
	   		else:
	   			page_count = page_count + 1
	   			for x in range(0, page_count+1):
	   				print(x)
	   				if page == x:
	   					next_page = x+1
	   					print(next_page)
	   					if next_page > page_count:
	   						next_page = ""
	   					previous_page = x-1
	   			

	   		if next_page:
	   			next_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/getProductCustomerListWithPagination/"+str(key)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(next_page)
	   		else:
	   			next_page_link = ""

	   		if previous_page:
	   			previous_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/getProductCustomerListWithPagination/"+str(key)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(previous_page)
	   		else:
	   			previous_page_link = ""
	   		

	   		return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success",
		    		"page_count":page_count,
		    		"next_page_link":next_page_link,
		    		"previous_page_link":previous_page_link,
		    		"page":page,
		    		"address":user_data,
		    		"plan_data":plan_data
		    	},
		    	"responseList":wishlist}), status.HTTP_200_OK

		else:
			return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success",
		    		"address":user_data,
		    		"plan_data":plan_data
		    	},
		    	"responseList":wishlist}), status.HTTP_200_OK


#----------------------Product-Customer-List-With-Pagination---------------------#

#----------------------Dashboard---------------------#
@name_space.route("/dashboard/<int:category_id>/<int:user_id>/<int:organisation_id>")	
class dashboard(Resource):
	def get(self,category_id,user_id,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		get_category_query = ("""SELECT meta_key_value_id
			FROM `home_category_mapping` WHERE organisation_id = %s LIMIT 6""")

		get_category_data = (organisation_id)
		cout_home_category = cursor.execute(get_category_query,get_category_data)

		if cout_home_category > 0:

			home_category_data = cursor.fetchall()

			for key,data in enumerate(home_category_data):
				get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
				FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)

				getdata_key_value = (data['meta_key_value_id'])
				cursor.execute(get_key_value_query,getdata_key_value)

				key_value_data = cursor.fetchone()

				home_category_data[key]['meta_key_value'] = key_value_data['meta_key_value']
				home_category_data[key]['image'] = key_value_data['image']
		else:
			home_category_data = []

		get_brand_query = ("""SELECT meta_key_value_id
			FROM `home_brand_mapping`  WHERE organisation_id = %s """)
		get_brand_data = (organisation_id)

		count_home_brand = cursor.execute(get_brand_query,get_brand_data)

		if count_home_brand > 0:

			home_brand_data = cursor.fetchall()

			for hkey,hdata in enumerate(home_brand_data):
				get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
				FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)

				getdata_key_value = (hdata['meta_key_value_id'])
				cursor.execute(get_key_value_query,getdata_key_value)

				key_value_data = cursor.fetchone()

				home_brand_data[hkey]['meta_key_value'] = key_value_data['meta_key_value']
				home_brand_data[hkey]['image'] = key_value_data['image']
		else:
			home_brand_data = []

		get_top_selling_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`
			FROM `product_top_selling_mapping` pts 
			INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE pts.`organisation_id` = %s and p.`status` = %s
			LIMIT 6""")	
		top_selling_status = 1
		get_top_selling_product_data = (organisation_id,top_selling_status)
		cursor.execute(get_top_selling_product,get_top_selling_product_data)
		top_selling_product = cursor.fetchall()

		for tkey,tdata in enumerate(top_selling_product):			
			get_product_meta_image_quey = ("""SELECT `image` as `product_image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (tdata['product_meta_id'])
			rows_count_image_top_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_top_selling > 0:
				product_meta_image = cursor.fetchone()
				top_selling_product[tkey]['product_image'] = product_meta_image['product_image']
			else:
				top_selling_product[tkey]['product_image'] = ""	

			get_product_meta_inventory_stock_quey = ("""SELECT `stock`
			FROM `product_inventory` WHERE `product_meta_id` = %s """)
			product_meta_inventory_stock_data = (tdata['product_meta_id'])
			row_count_stock = cursor.execute(get_product_meta_inventory_stock_quey,product_meta_inventory_stock_data)

			if row_count_stock > 0:
				product_meta_inventory_stock = cursor.fetchone()

				top_selling_product[tkey]['totalproduct'] = product_meta_inventory_stock['stock']
			else:
				top_selling_product[tkey]['totalproduct'] = 0

		get_best_selling_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price` price
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s
			LIMIT 6""")
		best_selling_status = 1
		get_best_selling_product_data = (organisation_id,best_selling_status)
		cursor.execute(get_best_selling_product,get_best_selling_product_data)
		best_selling_product = cursor.fetchall()

		for bkey,bdata in enumerate(best_selling_product):
			get_product_meta_image_quey = ("""SELECT `image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (bdata['product_meta_id'])
			rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_best_selling > 0:
				product_meta_image = cursor.fetchone()
				best_selling_product[bkey]['product_image'] = product_meta_image['image']
			else:
				best_selling_product[bkey]['product_image'] = ""

		get_offer_product =  ("""SELECT pom.`product_id`,o.`offer_id`,o.`offer_image`,o.`discount_percentage`
			FROM `product_offer_mapping` pom 
			INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id` 
			WHERE pom.`organisation_id` = %s""")
		get_offer_data = (organisation_id)
		cursor.execute(get_offer_product,get_offer_data)
		offer_product = cursor.fetchall()

		get_new_arrival_product =  ("""SELECT pnm.`product_id`,n.`new_arrival_id`,n.`new_arrival_image` as `offer_image`,n.`discount_percentage`,n.`image_type`
			FROM `product_new_arrival_mapping` pnm 
			INNER JOIN `new_arrival` n ON n.`new_arrival_id` = pnm.`new_arrival_id`
			WHERE pnm.`organisation_id` = %s
			limit 6""")
		get_new_arrival_data = (organisation_id)
		cursor.execute(get_new_arrival_product,get_new_arrival_data)
		new_arrival_product = cursor.fetchall()

		product_status = "c"

		get_query_count = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_status` = %s """)

		getDataCount = (user_id,product_status)
				
		count_product = cursor.execute(get_query_count,getDataCount)

		get_budget_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s""")

		get_budget_data = (organisation_id,category_id)
		cursor.execute(get_budget_query,get_budget_data)

		budget_data = cursor.fetchall()

		for key,data in enumerate(budget_data):
			budget_data[key]['last_update_ts'] = str(data['last_update_ts'])
			
		connection.commit()
		cursor.close()	

		offer_data = 	[
							{
								"offer_id":1,
								"product_id":1,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner1.png",
								"discount_percentage":10
	        				},
	        				{
	        					"offer_id":2,
	        					"product_id":2,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner2.png",
								"discount_percentage":10
	        				},
	        				{
	        					"offer_id":3,
	        					"product_id":3,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner3.png",
								"discount_percentage":10
							}

						]  	

		new_arrivale = 	[
							{
								"new_arrivale_id":1,
								"product_id":4,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_1.png",
								"discount_percentage":10
	        				},
	        				{
	        					"new_arrivale_id":2,
	        					"product_id":5,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images1.jpg",
								"discount_percentage":10
	        				},
	        				{
	        					"new_arrivale_id":3,
	        					"product_id":6,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images2.jpg",
								"discount_percentage":10
							},
							{
	        					"new_arrivale_id":4,
	        					"product_id":7,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images3.jpg",
								"discount_percentage":10
							}
						]	

		top_selling = 	[
							{
								"top_selling_id":1,
								"product_id":8,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/drive.png",
								"product_name":"test Product1",
								"totalproduct":1
	        				},
	        				{
	        					"top_selling_id":2,
	        					"product_id":9,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/image2.png",
								"product_name":"test Product2",
								"totalproduct":2
	        				},
	        				{
	        					"top_selling_id":3,
	        					"product_id":10,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/memorycard.png",
								"product_name":"test Product3",
								"totalproduct":3
							},
							{
	        					"top_selling_id":4,
	        					"product_id":11,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/phone.jpg",
								"product_name":"test Product3",
								"totalproduct":3
							}

						]

		best_selling = 	[
							{
								"product_id":12,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/image2.png",
								"product_name":"i phone 11",
								"price":79999
	        				},
	        				{	        					
	        					"product_id":13,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/81T7lVQGdxL._SY606_.jpg",
								"product_name":"MI A3",
								"price":16999
	        				},
	        				{	        					
	        					"product_id":14,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/3e97ce53c0a379894aff19753b7fa70c34f71e9256d725e07acdaf60458ab96e.jpg",
								"product_name":"Nokia 6.1",
								"price":13999
							},
							{	        					
	        					"product_id":15,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/01_Samsung-galaxy-a50-.png",
								"product_name":"Samsung Galaxy A50",
								"price":15499
							},
							{	        					
	        					"product_id":16,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/S_mdr.png",
								"product_name":"Sony MDR",
								"price":2199
							},
							{	        					
	        					"product_id":16,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/memorycard.png",
								"product_name":"Sandisk 16GB Micro SD",
								"price":899
							}

						]				

	   		
		return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"offer_data":offer_product,"new_arrivale":new_arrival_product,"top_selling":top_selling_product,"home_category_data":home_category_data,
		    					"home_brand_data":home_brand_data,"best_selling":best_selling_product,"budget_data":budget_data,
		    					"cart_count":count_product}}), status.HTTP_200_OK

#----------------------Dashboard---------------------#

#----------------------Dashboard-with-language---------------------#
@name_space.route("/dashboardWithLanguage/<int:category_id>/<int:user_id>/<int:organisation_id>/<string:language>")	
class dashboardWithLanguage(Resource):
	def get(self,category_id,user_id,organisation_id,language):

		connection = mysql_connection()
		cursor = connection.cursor()

		get_category_query = ("""SELECT meta_key_value_id
			FROM `home_category_mapping` WHERE organisation_id = %s and language = %s LIMIT 6""")

		get_category_data = (organisation_id,language)
		cout_home_category = cursor.execute(get_category_query,get_category_data)

		if cout_home_category > 0:

			home_category_data = cursor.fetchall()

			for key,data in enumerate(home_category_data):
				get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
				FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s and `language` = %s""")

				getdata_key_value = (data['meta_key_value_id'],language)
				cursor.execute(get_key_value_query,getdata_key_value)

				key_value_data = cursor.fetchone()

				home_category_data[key]['meta_key_value'] = key_value_data['meta_key_value']
				home_category_data[key]['image'] = key_value_data['image']
		else:
			home_category_data = []

		get_brand_query = ("""SELECT `meta_key_value_id`
			FROM `home_brand_mapping`  WHERE `organisation_id` = %s and language = %s""")
		get_brand_data = (organisation_id,language)

		count_home_brand = cursor.execute(get_brand_query,get_brand_data)

		if count_home_brand > 0:

			home_brand_data = cursor.fetchall()

			for hkey,hdata in enumerate(home_brand_data):
				get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
				FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s and language = %s""")

				getdata_key_value = (hdata['meta_key_value_id'],language)
				cursor.execute(get_key_value_query,getdata_key_value)

				key_value_data = cursor.fetchone()

				home_brand_data[hkey]['meta_key_value'] = key_value_data['meta_key_value']
				home_brand_data[hkey]['image'] = key_value_data['image']
		else:
			home_brand_data = []

		get_top_selling_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`
			FROM `product_top_selling_mapping` pts 
			INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE pts.`organisation_id` = %s and p.`status` = %s and p.`language` = %s
			LIMIT 6""")	
		top_selling_status = 1
		get_top_selling_product_data = (organisation_id,top_selling_status,language)
		cursor.execute(get_top_selling_product,get_top_selling_product_data)
		top_selling_product = cursor.fetchall()

		for tkey,tdata in enumerate(top_selling_product):			
			get_product_meta_image_quey = ("""SELECT `image` as `product_image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (tdata['product_meta_id'])
			rows_count_image_top_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_top_selling > 0:
				product_meta_image = cursor.fetchone()
				top_selling_product[tkey]['product_image'] = product_meta_image['product_image']
			else:
				top_selling_product[tkey]['product_image'] = ""	

			get_product_meta_inventory_stock_quey = ("""SELECT `stock`
			FROM `product_inventory` WHERE `product_meta_id` = %s """)
			product_meta_inventory_stock_data = (tdata['product_meta_id'])
			row_count_stock = cursor.execute(get_product_meta_inventory_stock_quey,product_meta_inventory_stock_data)

			if row_count_stock > 0:
				product_meta_inventory_stock = cursor.fetchone()

				top_selling_product[tkey]['totalproduct'] = product_meta_inventory_stock['stock']
			else:
				top_selling_product[tkey]['totalproduct'] = 0

		get_best_selling_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price` price
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s
			LIMIT 6""")
		best_selling_status = 1
		get_best_selling_product_data = (organisation_id,best_selling_status,language)
		cursor.execute(get_best_selling_product,get_best_selling_product_data)
		best_selling_product = cursor.fetchall()

		for bkey,bdata in enumerate(best_selling_product):
			get_product_meta_image_quey = ("""SELECT `image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (bdata['product_meta_id'])
			rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_best_selling > 0:
				product_meta_image = cursor.fetchone()
				best_selling_product[bkey]['product_image'] = product_meta_image['image']
			else:
				best_selling_product[bkey]['product_image'] = ""

		get_offer_product =  ("""SELECT pom.`product_id`,o.`offer_id`,o.`offer_image`,o.`discount_percentage`
			FROM `product_offer_mapping` pom 
			INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id` 
			WHERE pom.`organisation_id` = %s and o.`language` = %s""")
		get_offer_data = (organisation_id,language)
		cursor.execute(get_offer_product,get_offer_data)
		offer_product = cursor.fetchall()

		get_new_arrival_product =  ("""SELECT pnm.`product_id`,n.`new_arrival_id`,n.`new_arrival_image` as `offer_image`,n.`discount_percentage`,n.`image_type`
			FROM `product_new_arrival_mapping` pnm 
			INNER JOIN `new_arrival` n ON n.`new_arrival_id` = pnm.`new_arrival_id`
			WHERE pnm.`organisation_id` = %s and n.`language` = %s
			limit 6""")
		get_new_arrival_data = (organisation_id,language)
		cursor.execute(get_new_arrival_product,get_new_arrival_data)
		new_arrival_product = cursor.fetchall()

		product_status = "c"

		get_query_count = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_status` = %s """)

		getDataCount = (user_id,product_status)
				
		count_product = cursor.execute(get_query_count,getDataCount)

		get_budget_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s and language = %s""")

		get_budget_data = (organisation_id,category_id,language)
		cursor.execute(get_budget_query,get_budget_data)

		budget_data = cursor.fetchall()

		for key,data in enumerate(budget_data):
			budget_data[key]['last_update_ts'] = str(data['last_update_ts'])
			
		connection.commit()
		cursor.close()	

		offer_data = 	[
							{
								"offer_id":1,
								"product_id":1,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner1.png",
								"discount_percentage":10
	        				},
	        				{
	        					"offer_id":2,
	        					"product_id":2,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner2.png",
								"discount_percentage":10
	        				},
	        				{
	        					"offer_id":3,
	        					"product_id":3,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_banner3.png",
								"discount_percentage":10
							}

						]  	

		new_arrivale = 	[
							{
								"new_arrivale_id":1,
								"product_id":4,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/home_1.png",
								"discount_percentage":10
	        				},
	        				{
	        					"new_arrivale_id":2,
	        					"product_id":5,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images1.jpg",
								"discount_percentage":10
	        				},
	        				{
	        					"new_arrivale_id":3,
	        					"product_id":6,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images2.jpg",
								"discount_percentage":10
							},
							{
	        					"new_arrivale_id":4,
	        					"product_id":7,
								"offer_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/images3.jpg",
								"discount_percentage":10
							}
						]	

		top_selling = 	[
							{
								"top_selling_id":1,
								"product_id":8,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/drive.png",
								"product_name":"test Product1",
								"totalproduct":1
	        				},
	        				{
	        					"top_selling_id":2,
	        					"product_id":9,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/image2.png",
								"product_name":"test Product2",
								"totalproduct":2
	        				},
	        				{
	        					"top_selling_id":3,
	        					"product_id":10,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/memorycard.png",
								"product_name":"test Product3",
								"totalproduct":3
							},
							{
	        					"top_selling_id":4,
	        					"product_id":11,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/phone.jpg",
								"product_name":"test Product3",
								"totalproduct":3
							}

						]

		best_selling = 	[
							{
								"product_id":12,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/image2.png",
								"product_name":"i phone 11",
								"price":79999
	        				},
	        				{	        					
	        					"product_id":13,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/81T7lVQGdxL._SY606_.jpg",
								"product_name":"MI A3",
								"price":16999
	        				},
	        				{	        					
	        					"product_id":14,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/3e97ce53c0a379894aff19753b7fa70c34f71e9256d725e07acdaf60458ab96e.jpg",
								"product_name":"Nokia 6.1",
								"price":13999
							},
							{	        					
	        					"product_id":15,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/01_Samsung-galaxy-a50-.png",
								"product_name":"Samsung Galaxy A50",
								"price":15499
							},
							{	        					
	        					"product_id":16,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/S_mdr.png",
								"product_name":"Sony MDR",
								"price":2199
							},
							{	        					
	        					"product_id":16,
								"product_image": "https://d1lwvo1ffrod0a.cloudfront.net/117/memorycard.png",
								"product_name":"Sandisk 16GB Micro SD",
								"price":899
							}

						]				

	   		
		return ({"attributes": {
		    		"status_desc": "customer_product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"offer_data":offer_product,"new_arrivale":new_arrival_product,"top_selling":top_selling_product,"home_category_data":home_category_data,
		    					"home_brand_data":home_brand_data,"best_selling":best_selling_product,"budget_data":budget_data,
		    					"cart_count":count_product}}), status.HTTP_200_OK

#----------------------Dashboard-with-language---------------------#

#----------------------Dashboard-with-offer-Cross-Browser---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/dashboardWithOfferCrossBrowser/<int:organisation_id>/<string:language>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def dashboardWithOfferCrossBrowser(organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_section =  ("""SELECT sm.`section_id`,sm.`offer_section_name`,sm.`offer_section_type`
			FROM `section_master` sm			 
			WHERE `organisation_id` = %s and `language` = %s and `home_section` = 1 and `status`= 1""")
		get_section_data = (organisation_id,language)
		cursor.execute(get_section,get_section_data)
		section_data = cursor.fetchall()

		
		for key,data in enumerate(section_data):
			get_offer_product =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`discount_percentage`,o.`offer_image_type`
			FROM `offer_section_mapping` osm 
			INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
			WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and o.`is_product_meta_offer` = 0 """)
			get_offer_data = (organisation_id,language,data['section_id'],organisation_id)
			cursor.execute(get_offer_product,get_offer_data)
			offer_product = cursor.fetchall()


			i = 1
			for pkey,pdata in enumerate(offer_product):
				get_product_query = (""" SELECT pom.`product_id`
					FROM `product_offer_mapping` pom 
					WHERE pom.`organisation_id` = %s and pom.`offer_id` = %s""")
				get_product_data = (organisation_id,offer_id)
				count_product = cursor.execute(get_product_query,get_product_data)
				if count_product > 0:
					product_data = cursor.fetchone()
					offer_product[pkey]['product_id'] = product_data['product_id']
				else:
					offer_product[pkey]['product_id'] = 0

				offer_product[pkey]['appearence'] = i
				i =i+1
			section_data[key]['offer_product'] = offer_product

		get_catalog = ("""SELECT c.`catalog_id`,c.`catalog_name`
			FROM `catalogs` c			 
			WHERE `organisation_id` = %s and `language` = %s and `is_home_section` = 1 and `status`= 1""")
		get_catalog_data = (organisation_id,language)
		cursor.execute(get_catalog,get_catalog_data)
		catalog_data = cursor.fetchall()

		for ckey,cdata in enumerate(catalog_data):
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`product_meta_id`,pm.`meta_key_text`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s limit 6""")
			get_data = (cdata['catalog_id'])

			cursor.execute(get_query,get_data)
			product_data = cursor.fetchall()

			for key,data in enumerate(product_data):					

				a_string = data['meta_key_text']
				a_list = a_string.split(',')
					
				met_key = []
				for a in a_list:
					get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
							FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
					getdata_key_value = (a)
					cursor.execute(get_query_key_value,getdata_key_value)
					met_key_value_data = cursor.fetchone()

					get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
					getdata_key = (met_key_value_data['meta_key_id'])
					cursor.execute(get_query_key,getdata_key)
					met_key_data = cursor.fetchone()

					met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

					product_data[key]['met_key_value'] = met_key
						

				image_a = []	
				get_query_images = ("""SELECT `image`,`image_type`
								FROM `product_meta_images` WHERE `product_meta_id` = %s """)
				getdata_images = (data['product_meta_id'])
				cursor.execute(get_query_images,getdata_images)
				images = cursor.fetchall()

				for image in images:
					image_a.append({"image":image['image'],"image_type":image['image_type']})

				product_data[key]['images'] = image_a				

			catalog_data[ckey]['catalog_product'] = product_data
			

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"section_data":section_data,"catalog_data":catalog_data}}), status.HTTP_200_OK

#----------------------Dashboard-with-offer---------------------#

#----------------------Dashboard-with-offer---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/dashboardWithOffer/<int:organisation_id>/<string:language>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def dashboardWithOffer(organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()


		now = datetime.now()
		today_date = now.strftime("%Y-%m-%d")

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		customer_id = 0
		product_meta_id = 0
		from_web_or_phone = 2
		organisation_id = organisation_id

		storeviewquery = ("""INSERT INTO `customer_store_analytics`(`customer_id`, 
			`product_meta_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
			%s,%s,%s)""")
		storeviewdata = cursor_analytics.execute(storeviewquery,(customer_id,product_meta_id,
			from_web_or_phone,organisation_id))

		get_section =  ("""SELECT sm.`section_id`,sm.`offer_section_name`,sm.`offer_section_type`
			FROM `section_master` sm			 
			WHERE `organisation_id` = %s and `language` = %s and `home_section` = 1 and `status`= 1 ORDER BY `sequence`""")
		get_section_data = (organisation_id,language)
		cursor.execute(get_section,get_section_data)
		section_data = cursor.fetchall()

		
		for key,data in enumerate(section_data):
			if data['offer_section_type'] == 2:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 4""")
			if data['offer_section_type'] == 3:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 9 """)
			if data['offer_section_type'] == 1:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s""")
			get_offer_data = (organisation_id,language,data['section_id'],today_date)
			cursor.execute(get_offer_query,get_offer_data)
			offer_data = cursor.fetchall()

			i = 1
			for pkey,pdata in enumerate(offer_data):	
				print(pdata['offer_id'])			
				offer_data[pkey]['appearence'] = i
				i =i+1

				if pdata['product_offer_type'] == 1:
					get_offer_product_query = ("""SELECT pofm.`product_id`
						FROM `product_offer_mapping` pofm
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pofm.`product_id`
						WHERE pofm.`offer_id` = %s and pom.`organisation_id` = %s and pom.`product_status` = 1""")
					get_offer_product_data = (pdata['offer_id'],organisation_id)
					count_prroduct_offer = cursor.execute(get_offer_product_query,get_offer_product_data)
					if count_prroduct_offer >0:
						product_offer_data = cursor.fetchone()
						offer_data[pkey]['product_id'] = product_offer_data['product_id']

						get_product_meta_query = ("""SELECT `product_meta_id`
						FROM `product_meta` pm
						INNER JOIN `product_organisation_mapping` pom  ON pom.`product_id` = pm.`product_id`
						WHERE pm.`product_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s""")
						get_product_meta_data = (product_offer_data['product_id'],organisation_id)
						count_product_meta_data = cursor.execute(get_product_meta_query,get_product_meta_data)

						if count_product_meta_data > 0:
							product_meta_data = cursor.fetchone()
							offer_data[pkey]['product_meta_id'] = product_meta_data['product_meta_id']
						else:
							offer_data[pkey]['product_meta_id'] = 0
					else:
						offer_data[pkey]['product_id'] = 0
						offer_data[pkey]['product_meta_id'] = 0
				else:
					offer_data[pkey]['product_id'] = 0
					offer_data[pkey]['product_meta_id'] = 0


			section_data[key]['offer_product'] = offer_data

		get_catalog = ("""SELECT c.`catalog_id`,c.`catalog_name`
			FROM `catalogs` c			 
			WHERE `organisation_id` = %s and `language` = %s and `is_home_section` = 1 and `status`= 1 ORDER BY `sequence`""")
		get_catalog_data = (organisation_id,language)
		cursor.execute(get_catalog,get_catalog_data)
		catalog_data = cursor.fetchall()

		for ckey,cdata in enumerate(catalog_data):
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`
				FROM `product` p				
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s limit 4""")
			get_data = (cdata['catalog_id'],organisation_id)

			cursor.execute(get_query,get_data)
			product_data = cursor.fetchall()

			for key,data in enumerate(product_data):

				get_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
				get_product_meta_data = (data['product_id'],data['product_id'])
				count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)				

				if count_product_meta > 0:
					product_meta_data = cursor.fetchone()

					product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
					product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
					product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
					product_data[key]['in_price'] = product_meta_data['in_price']
					product_data[key]['out_price'] = product_meta_data['out_price']

					a_string = data['meta_key_text']
					a_list = a_string.split(',')
						
					met_key = []
					for a in a_list:
						get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
						getdata_key_value = (a)
						cursor.execute(get_query_key_value,getdata_key_value)
						met_key_value_data = cursor.fetchone()

						get_query_key = ("""SELECT `meta_key`
										FROM `meta_key_master` WHERE `meta_key_id` = %s """)
						getdata_key = (met_key_value_data['meta_key_id'])
						cursor.execute(get_query_key,getdata_key)
						met_key_data = cursor.fetchone()

						met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

						product_data[key]['met_key_value'] = met_key
						

					image_a = []	
					get_query_images = ("""SELECT `image`,`image_type`
									FROM `product_meta_images` WHERE `product_meta_id` = %s ORDER BY default_image_flag DESC""")
					getdata_images = (product_meta_data['product_meta_id'])
					cursor.execute(get_query_images,getdata_images)
					images = cursor.fetchall()

					for image in images:
						image_a.append({"image":image['image'],"image_type":image['image_type']})						

					if not image_a:
						if organisation_id == 93:
							product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/1/placeholderAMMobile.png","image_type":1}]
							
						else:
							product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/32/placeholderOthers.png","image_type":1}]
					else:
						product_data[key]['images'] = image_a		

			catalog_data[ckey]['catalog_product'] = product_data

		get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

		get_loyality_data_type_1 = (organisation_id)
		count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

		referal_loyalty_data_type_1 = cursor.fetchone()

		get_loyality_query_type_2 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 2""")

		get_loyality_data_type_2 = (organisation_id)
		count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

		referal_loyalty_data_type_2 = cursor.fetchone()

		if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

			if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
				is_referal = 0
			else:
				is_referal = 1
		else:
			is_referal = 0

		if 	organisation_id == 83:

			get_category_query = ("""SELECT `category_id`,`category_name`,`category_image`,`status`
				FROM `category` WHERE `organisation_id` = %s""")
		else:
			get_category_query = ("""SELECT `category_id`,`category_name`,`category_image`,`status`
				FROM `category` WHERE `organisation_id` = %s and `status` = 1""")

		get_category_data = (organisation_id)
		cursor.execute(get_category_query,get_category_data)

		category_data = cursor.fetchall()		
			

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"section_data":section_data,"catalog_data":catalog_data,"is_referal":is_referal,"category":category_data}}), status.HTTP_200_OK

#----------------------Dashboard-with-offer---------------------#

#----------------------Dashboard-with-offer---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/dashboardWithOfferWithUserId/<int:organisation_id>/<string:language>/<int:user_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def dashboardWithOfferWithUserId(organisation_id,language,user_id,wop):
		connection = mysql_connection()
		cursor = connection.cursor()


		now = datetime.now()
		today_date = now.strftime("%Y-%m-%d")

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		customer_id = user_id
		product_meta_id = 0
		from_web_or_phone = wop
		organisation_id = organisation_id

		storeviewquery = ("""INSERT INTO `customer_store_analytics`(`customer_id`, 
			`product_meta_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
			%s,%s,%s)""")
		storeviewdata = cursor_analytics.execute(storeviewquery,(customer_id,product_meta_id,
			from_web_or_phone,organisation_id))

		get_section =  ("""SELECT sm.`section_id`,sm.`offer_section_name`,sm.`offer_section_type`
			FROM `section_master` sm			 
			WHERE `organisation_id` = %s and `language` = %s and `home_section` = 1 and `status`= 1 ORDER BY `sequence`""")
		get_section_data = (organisation_id,language)
		cursor.execute(get_section,get_section_data)
		section_data = cursor.fetchall()

		
		for key,data in enumerate(section_data):
			if data['offer_section_type'] == 2:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 4""")
			if data['offer_section_type'] == 3:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 9 """)
			if data['offer_section_type'] == 1:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s""")
			get_offer_data = (organisation_id,language,data['section_id'],today_date)
			cursor.execute(get_offer_query,get_offer_data)
			offer_data = cursor.fetchall()

			i = 1
			for pkey,pdata in enumerate(offer_data):	
				print(pdata['offer_id'])			
				offer_data[pkey]['appearence'] = i
				i =i+1

				if pdata['product_offer_type'] == 1:
					get_offer_product_query = ("""SELECT pofm.`product_id`
						FROM `product_offer_mapping` pofm
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pofm.`product_id`
						WHERE pofm.`offer_id` = %s and pom.`organisation_id` = %s and pom.`product_status` = 1""")
					get_offer_product_data = (pdata['offer_id'],organisation_id)
					count_prroduct_offer = cursor.execute(get_offer_product_query,get_offer_product_data)
					if count_prroduct_offer >0:
						product_offer_data = cursor.fetchone()
						offer_data[pkey]['product_id'] = product_offer_data['product_id']

						get_product_meta_query = ("""SELECT `product_meta_id`
						FROM `product_meta` pm
						INNER JOIN `product_organisation_mapping` pom  ON pom.`product_id` = pm.`product_id`
						WHERE pm.`product_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s""")
						get_product_meta_data = (product_offer_data['product_id'],organisation_id)
						count_product_meta_data = cursor.execute(get_product_meta_query,get_product_meta_data)

						if count_product_meta_data > 0:
							product_meta_data = cursor.fetchone()
							offer_data[pkey]['product_meta_id'] = product_meta_data['product_meta_id']
						else:
							offer_data[pkey]['product_meta_id'] = 0
					else:
						offer_data[pkey]['product_id'] = 0
						offer_data[pkey]['product_meta_id'] = 0
				else:
					offer_data[pkey]['product_id'] = 0
					offer_data[pkey]['product_meta_id'] = 0


			section_data[key]['offer_product'] = offer_data

		get_catalog = ("""SELECT c.`catalog_id`,c.`catalog_name`
			FROM `catalogs` c			 
			WHERE `organisation_id` = %s and `language` = %s and `is_home_section` = 1 and `status`= 1 ORDER BY `sequence`""")
		get_catalog_data = (organisation_id,language)
		cursor.execute(get_catalog,get_catalog_data)
		catalog_data = cursor.fetchall()

		for ckey,cdata in enumerate(catalog_data):
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`
				FROM `product` p				
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s limit 4""")
			get_data = (cdata['catalog_id'],organisation_id)

			cursor.execute(get_query,get_data)
			product_data = cursor.fetchall()

			for key,data in enumerate(product_data):

				get_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
				get_product_meta_data = (data['product_id'],data['product_id'])
				count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)				

				if count_product_meta > 0:
					product_meta_data = cursor.fetchone()

					product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
					product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
					product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
					product_data[key]['in_price'] = product_meta_data['in_price']
					product_data[key]['out_price'] = product_meta_data['out_price']

					a_string = data['meta_key_text']
					a_list = a_string.split(',')
						
					met_key = []
					for a in a_list:
						get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
						getdata_key_value = (a)
						cursor.execute(get_query_key_value,getdata_key_value)
						met_key_value_data = cursor.fetchone()

						get_query_key = ("""SELECT `meta_key`
										FROM `meta_key_master` WHERE `meta_key_id` = %s """)
						getdata_key = (met_key_value_data['meta_key_id'])
						cursor.execute(get_query_key,getdata_key)
						met_key_data = cursor.fetchone()

						met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

						product_data[key]['met_key_value'] = met_key
						

					image_a = []	
					get_query_images = ("""SELECT `image`,`image_type`
									FROM `product_meta_images` WHERE `product_meta_id` = %s ORDER BY default_image_flag DESC""")
					getdata_images = (product_meta_data['product_meta_id'])
					cursor.execute(get_query_images,getdata_images)
					images = cursor.fetchall()

					for image in images:
						image_a.append({"image":image['image'],"image_type":image['image_type']})						

					if not image_a:
						if organisation_id == 93:
							product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/1/placeholderAMMobile.png","image_type":1}]
							
						else:
							product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/32/placeholderOthers.png","image_type":1}]
					else:
						product_data[key]['images'] = image_a		

			catalog_data[ckey]['catalog_product'] = product_data

		get_loyality_query_type_1 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 1""")

		get_loyality_data_type_1 = (organisation_id)
		count_loyality_query_type_1 = cursor.execute(get_loyality_query_type_1,get_loyality_data_type_1)

		referal_loyalty_data_type_1 = cursor.fetchone()

		get_loyality_query_type_2 = ("""SELECT *
			FROM `loyality_master`			
			WHERE `organisation_id` = %s and `loyality_type` = 2""")

		get_loyality_data_type_2 = (organisation_id)
		count_loyality_query_type_2 = cursor.execute(get_loyality_query_type_2,get_loyality_data_type_2)

		referal_loyalty_data_type_2 = cursor.fetchone()

		if count_loyality_query_type_1 >0 and count_loyality_query_type_2 >0:

			if referal_loyalty_data_type_1['loyality_amount'] == 0 and  referal_loyalty_data_type_2['loyality_amount'] == 0 :
				is_referal = 0
			else:
				is_referal = 1
		else:
			is_referal = 0

		if 	organisation_id == 83:

			get_category_query = ("""SELECT `category_id`,`category_name`,`category_image`,`status`
				FROM `category` WHERE `organisation_id` = %s ORDER BY mapping_id ASC""")
		else:
			get_category_query = ("""SELECT `category_id`,`category_name`,`category_image`,`status`
				FROM `category` WHERE `organisation_id` = %s and `status` = 1 ORDER BY mapping_id ASC""")

		get_category_data = (organisation_id)
		cursor.execute(get_category_query,get_category_data)

		category_data = cursor.fetchall()

		print(category_data)

		if user_id == 0:
			cart_count = 0
			user_data =  {}
			user_data["address_line_1"] = ""
			user_data["address_line_2"] = ""
			user_data["city"] = ""
			user_data["country"] = ""
			user_data["state"] = ""
			user_data["pincode"] = 0
		else:
			get_query_count = ("""SELECT COALESCE(sum(cpmq.`qty`),0) as cart_count 
				FROM `customer_product_mapping` cpm 
				INNER JOIN `customer_product_mapping_qty`cpmq ON cpmq.`customer_mapping_id` = cpm.`mapping_id` 
				WHERE cpm.`customer_id` = %s and cpm.`product_status` = 'c' and cpm.`organisation_id` = %s and cpmq.`organisation_id` = %s""")

			getDataCount = (user_id,organisation_id,organisation_id)
					
			count_product = cursor.execute(get_query_count,getDataCount)

			if count_product > 0:
				cart_count_data = cursor.fetchone()
				cart_count = int(cart_count_data['cart_count'])
			else:
				cart_count = 0

			get_user_details_query = (""" SELECT address_line_1,address_line_2,city,country,state,pincode 
										FROM `admins` WHERE admin_id = %s """)
			get_user_details_data = (user_id)
			count_user_details = cursor.execute(get_user_details_query,get_user_details_data)

			if count_user_details > 0:
				user_data = cursor.fetchone()
			else:
				user_data = {}
				user_data["address_line_1"] = ""
				user_data["address_line_2"] = ""
				user_data["city"] = ""
				user_data["country"] = ""
				user_data["state"] = ""
				user_data["pincode"] = 0
			

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"section_data":section_data,"catalog_data":catalog_data,"is_referal":is_referal,"category":category_data,"cart_count":cart_count,"address":user_data}}), status.HTTP_200_OK

#----------------------Dashboard-with-offer---------------------#

#----------------------See-More-Product-List-By-Catalog-Id---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/seeMoreProductListByCatalogId/<int:catalog_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def seeMoreProductListByCatalogId(catalog_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`
				FROM `product` p				
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s""")
		get_data = (catalog_id)

		cursor.execute(get_query,get_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			get_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
			get_product_meta_data = (data['product_id'],data['product_id'])
			count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)

			product_meta_data = cursor.fetchone()

			product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
			product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
			product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
			product_data[key]['in_price'] = product_meta_data['in_price']
			product_data[key]['out_price'] = product_meta_data['out_price']

			a_string = data['meta_key_text']
			a_list = a_string.split(',')
					
			met_key = []
			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
							FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
						

			image_a = []	
			get_query_images = ("""SELECT `image`,`image_type`
								FROM `product_meta_images` WHERE `product_meta_id` = %s ORDER BY default_image_flag DESC""")
			getdata_images = (data['product_meta_id'])
			cursor.execute(get_query_images,getdata_images)
			images = cursor.fetchall()

			for image in images:
				image_a.append({"image":image['image'],"image_type":image['image_type']})
			

			if not image_a:				
				product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/32/placeholderOthers.png","image_type":1}]
			else:
				product_data[key]['images'] = image_a

		return ({"attributes": {
		    	"status_desc": "catalouge_details",
		    	"status": "success"
		    },
		    "responseList":product_data}), status.HTTP_200_OK

#----------------------See-More-Product-List-By-Catalog-Id---------------------#

#----------------------See-More-Product-List-By-Catalog-Id---------------------#

@ecommerce_customer_new.route("/EcommerceCustomerNew/seeMoreProductListByCatalogIdWithOrganisation/<int:catalog_id>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def seeMoreProductListByCatalogIdWithOrganisation(catalog_id,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`
				FROM `product` p
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`				
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s and pom.`organisation_id` = %s and pom.`product_status` = 1""")
		get_data = (catalog_id,organisation_id)

		cursor.execute(get_query,get_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			get_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
			get_product_meta_data = (data['product_id'],data['product_id'])
			count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)

			product_meta_data = cursor.fetchone()

			product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
			product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
			product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
			product_data[key]['in_price'] = product_meta_data['in_price']
			product_data[key]['out_price'] = product_meta_data['out_price']

			a_string = data['meta_key_text']
			a_list = a_string.split(',')
					
			met_key = []
			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
							FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
						

			image_a = []	
			get_query_images = ("""SELECT `image`,`image_type`
								FROM `product_meta_images` WHERE `product_meta_id` = %s ORDER BY default_image_flag DESC""")
			getdata_images = (data['product_meta_id'])
			cursor.execute(get_query_images,getdata_images)
			images = cursor.fetchall()

			for image in images:
				image_a.append({"image":image['image'],"image_type":image['image_type']})
			

			if not image_a:				
				product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/32/placeholderOthers.png","image_type":1}]
			else:
				product_data[key]['images'] = image_a

		return ({"attributes": {
		    	"status_desc": "catalouge_details",
		    	"status": "success"
		    },
		    "responseList":product_data}), status.HTTP_200_OK

#----------------------See-More-Product-List-By-Catalog-Id---------------------#


#----------------------See-More-Offer-List-By-Section-Id---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/seeMoreOfferListBySectionId/<int:section_id>/<string:language>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def seeMoreOfferListBySectionId(section_id,language,organisation_id):
	connection = mysql_connection()
	cursor = connection.cursor()

	now = datetime.now()
	today_date = now.strftime("%Y-%m-%d")

	get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and  date(o.`validity_date`) >= %s """)
	get_offer_data = (organisation_id,language,section_id,today_date)
	cursor.execute(get_offer_query,get_offer_data)
	offer_data = cursor.fetchall()

	i = 1
	for pkey,pdata in enumerate(offer_data):				
		offer_data[pkey]['appearence'] = i
		i =i+1

		if pdata['product_offer_type'] == 1:
			get_offer_product_query = ("""SELECT pofm.`product_id`
						FROM `product_offer_mapping` pofm
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pofm.`product_id`
						WHERE pofm.`offer_id` = %s and pom.`organisation_id` = %s and pom.`product_status` = 1""")
			get_offer_product_data = (pdata['offer_id'],organisation_id)
			count_offer_product = cursor.execute(get_offer_product_query,get_offer_product_data)
			if count_offer_product > 0:
				product_offer_data = cursor.fetchone()
				offer_data[pkey]['product_id'] = product_offer_data['product_id']

				get_product_meta_query = (""" SELECT `product_meta_id`
						FROM `product_meta` pm
						INNER JOIN `product_organisation_mapping` pom  ON pom.`product_id` = pm.`product_id`
						WHERE pm.`product_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s""")
				get_product_meta_data = (product_offer_data['product_id'],organisation_id)
				count_product_meta_data = cursor.execute(get_product_meta_query,get_product_meta_data)

				if count_product_meta_data > 0:
					product_meta_data = cursor.fetchone()
					offer_data[pkey]['product_meta_id'] = product_meta_data['product_meta_id']
				else:
					offer_data[pkey]['product_meta_id'] = 0
		else:
			offer_data[pkey]['product_id'] = 0
			offer_data[pkey]['product_meta_id'] = 0

	return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":offer_data}), status.HTTP_200_OK

#----------------------Dashboard-with-offer-By-Category-Id---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/dashboardWithOfferByCategoryId/<int:organisation_id>/<int:category_id>/<string:language>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def dashboardWithOfferByCategoryId(organisation_id,category_id,language):
#@name_space.route("/dashboardWithOfferByCategoryId/<int:organisation_id>/<int:category_id>/<string:language>")	
#class dashboardWithOfferByCategoryId(Resource):
	#def get(self,organisation_id,category_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		now = datetime.now()
		today_date = now.strftime("%Y-%m-%d")

		get_section =  ("""SELECT sm.`section_id`,sm.`offer_section_name`,sm.`offer_section_type`
			FROM `section_master` sm			 
			WHERE `organisation_id` = %s and `language` = %s and `category_id` = %s and `status`= 1 ORDER BY `sequence`""")
		get_section_data = (organisation_id,language,category_id)
		cursor.execute(get_section,get_section_data)
		section_data = cursor.fetchall()

		for key,data in enumerate(section_data):
			if data['offer_section_type'] == 2:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 4""")
			if data['offer_section_type'] == 3:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s limit 9""")
			if data['offer_section_type'] == 1:
				get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
					FROM `offer_section_mapping` osm 
					INNER JOIN `offer` o ON o.`offer_id` = osm.`offer_id`			
					WHERE osm.`organisation_id` = %s and o.`language` = %s and osm.`section_id` = %s and o.`status` = 1 and date(o.`validity_date`) >= %s""")
			get_offer_data = (organisation_id,language,data['section_id'],today_date)
			cursor.execute(get_offer_query,get_offer_data)
			offer_data = cursor.fetchall()

			i = 1
			for pkey,pdata in enumerate(offer_data):				
				offer_data[pkey]['appearence'] = i
				i =i+1

				if pdata['product_offer_type'] == 1:
					get_offer_product_query = ("""SELECT pofm.`product_id`
						FROM `product_offer_mapping` pofm
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pofm.`product_id`
						WHERE pofm.`offer_id` = %s and pom.`organisation_id` = %s and pom.`product_status` = 1""")
					get_offer_product_data = (pdata['offer_id'],organisation_id)
					count_prroduct_offer = cursor.execute(get_offer_product_query,get_offer_product_data)
					if count_prroduct_offer >0:
						product_offer_data = cursor.fetchone()
						offer_data[pkey]['product_id'] = product_offer_data['product_id']

						get_product_meta_query = ("""SELECT `product_meta_id`
						FROM `product_meta` pm
						INNER JOIN `product_organisation_mapping` pom  ON pom.`product_id` = pm.`product_id`
						WHERE pm.`product_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s""")
						get_product_meta_data = (product_offer_data['product_id'],organisation_id)
						count_product_meta_data = cursor.execute(get_product_meta_query,get_product_meta_data)

						if count_product_meta_data > 0:
							product_meta_data = cursor.fetchone()
							offer_data[pkey]['product_meta_id'] = product_meta_data['product_meta_id']
						else:
							offer_data[pkey]['product_meta_id'] = 0
					else:
						offer_data[pkey]['product_id'] = 0
						offer_data[pkey]['product_meta_id'] = 0
				else:
					offer_data[pkey]['product_id'] = 0
					offer_data[pkey]['product_meta_id'] = 0


			section_data[key]['offer_product'] = offer_data


		get_budget_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s""")		
		get_budget_data = (organisation_id,category_id)
		cursor.execute(get_budget_query,get_budget_data)

		budget_data = cursor.fetchall()

		for key,data in enumerate(budget_data):
			budget_data[key]['last_update_ts'] = str(data['last_update_ts'])

		get_brand_query = ("""SELECT `brand_id`
			FROM `category_brand_mapping`  WHERE `organisation_id` = %s and `category_id` = %s""")
		get_brand_data = (organisation_id,category_id)

		count_category_brand = cursor.execute(get_brand_query,get_brand_data)

		if count_category_brand > 0:

			brand_data = cursor.fetchall()

			for hkey,hdata in enumerate(brand_data):
				get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
				FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)

				getdata_key_value = (hdata['brand_id'])
				cursor.execute(get_key_value_query,getdata_key_value)

				key_value_data = cursor.fetchone()

				brand_data[hkey]['meta_key_value'] = key_value_data['meta_key_value']
				brand_data[hkey]['image'] = key_value_data['image']
		else:
			brand_data = []


		get_catalog = ("""SELECT c.`catalog_id`,c.`catalog_name`
			FROM `catalogs` c	
			INNER JOIN `catalog_category_mapping` ccm ON ccm.`catalog_id` = c.`catalog_id`		 
			WHERE ccm.`organisation_id` = %s and `language` = %s and c.`status`= 1 and `category_id` = %s ORDER BY `sequence`""")
		get_catalog_data = (organisation_id,language,category_id)
		cursor.execute(get_catalog,get_catalog_data)
		catalog_data = cursor.fetchall()

		for ckey,cdata in enumerate(catalog_data):
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				p.`product_type`,p.`category_id` as `product_type_id`
				FROM `product` p				
				INNER JOIN `product_catalog_mapping` pcm ON pcm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and pcm.`catalog_id` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s limit 4""")
			get_data = (cdata['catalog_id'],organisation_id)

			cursor.execute(get_query,get_data)
			product_data = cursor.fetchall()

			for key,data in enumerate(product_data):
				print(data['product_id'])
				get_product_meta = (""" SELECT pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
				get_product_meta_data = (data['product_id'],data['product_id'])
				count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)

				product_meta_data = cursor.fetchone()

				product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
				product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
				product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
				product_data[key]['in_price'] = product_meta_data['in_price']
				product_data[key]['out_price'] = product_meta_data['out_price']					

				a_string = data['meta_key_text']
				a_list = a_string.split(',')
					
				met_key = []
				for a in a_list:
					get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
							FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
					getdata_key_value = (a)
					cursor.execute(get_query_key_value,getdata_key_value)
					met_key_value_data = cursor.fetchone()

					get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
					getdata_key = (met_key_value_data['meta_key_id'])
					cursor.execute(get_query_key,getdata_key)
					met_key_data = cursor.fetchone()

					met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

					product_data[key]['met_key_value'] = met_key
						

				image_a = []	
				get_query_images = ("""SELECT `image`,`image_type`
								FROM `product_meta_images` WHERE `product_meta_id` = %s ORDER BY default_image_flag DESC""")
				getdata_images = (data['product_meta_id'])
				cursor.execute(get_query_images,getdata_images)
				images = cursor.fetchall()

				for image in images:
					image_a.append({"image":image['image'],"image_type":image['image_type']})

				if not image_a:
					if organisation_id == 93:
						product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/1/placeholderAMMobile.png","image_type":1}]
							
					else:
						product_data[key]['images'] = [{"image":"https://d1o7xhcyswcoe3.cloudfront.net/32/placeholderOthers.png","image_type":1}]
				else:
					product_data[key]['images'] = image_a				

			catalog_data[ckey]['catalog_product'] = product_data

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"section_data":section_data,"budget_data":budget_data,"brand_data":brand_data,"catalog_data":catalog_data}}), status.HTTP_200_OK

#----------------------Dashboard-with-offer-By-Category-Id---------------------#

#----------------------Offer-Details---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/OfferDetails/<int:organisation_id>/<string:language>/<int:offer_id>/<int:user_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def OfferDetails(organisation_id,language,offer_id,user_id):
	connection = mysql_connection()
	cursor = connection.cursor()

	connection_analytics = mysql_connection_analytics()
	cursor_analytics = connection_analytics.cursor()

	now = datetime.now()
	today_date = now.strftime("%Y-%m-%d")

	customer_id = user_id
	offer_id = offer_id
	from_web_or_phone = 2
	organisation_id = organisation_id
		

	offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
			`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
			%s,%s,%s)""")
	offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
			from_web_or_phone,organisation_id))

	get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
			FROM `offer` o		
			WHERE o.`offer_id` = %s and status = 1 and date(`validity_date`) >= %s""")
	get_offer_data = (offer_id,today_date)
	offer_count = cursor.execute(get_offer_query,get_offer_data)
	if offer_count > 0:
		offer_data = cursor.fetchone()

		get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`
				FROM `product_offer_mapping` pom			
				INNER JOIN `product` p ON pom.`product_id` = p.`product_id` 
				INNER JOIN `product_organisation_mapping` pomm ON pomm.`product_id` = p.`product_id`			
				WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s and pomm.`product_status`= 1 and pomm.`organisation_id` = %s""")
		get_offer_product_data = (offer_id,organisation_id,organisation_id)			
		count_offer_product = cursor.execute(get_offer_product,get_offer_product_data)

		if count_offer_product > 0 :
			product_data = cursor.fetchall()

			for key,data in enumerate(product_data):
				print(data['product_id'])
				get_offer_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
					`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
				get_offer_product_meta_data = (data['product_id'],data['product_id'])
				cursor.execute(get_offer_product_meta,get_offer_product_meta_data)

				product_meta_data = cursor.fetchone()

				product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
				product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
				product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
				product_data[key]['in_price'] = product_meta_data['in_price']

				get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
				get_out_price_data = (organisation_id, product_meta_data['product_meta_id'])
				count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
				if count_out_price_data >0:
					out_price_data = cursor.fetchone()
					product_data[key]['out_price'] = out_price_data['out_price']
				else:
					product_data[key]['out_price'] = product_meta_data['out_price']
				

				a_string = product_meta_data['meta_key_text']
				a_list = a_string.split(',')
				met_key = []

				for a in a_list:
					get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
										FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
					getdata_key_value = (a)
					cursor.execute(get_query_key_value,getdata_key_value)
					met_key_value_data = cursor.fetchone()
						
					get_query_key = ("""SELECT `meta_key`
										FROM `meta_key_master` WHERE `meta_key_id` = %s """)
					getdata_key = (met_key_value_data['meta_key_id'])
					cursor.execute(get_query_key,getdata_key)
					met_key_data = cursor.fetchone()

					met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

					product_data[key]['met_key_value'] = met_key
					
				get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
				getdata_image = (product_meta_data['product_meta_id'])
				product_image_count = cursor.execute(get_query_image,getdata_image)

				if product_image_count >0 :
					product_image = cursor.fetchone()
					product_data[key]['image'] = product_image['image']
				else:
					product_data[key]['image'] = ""

				get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
				getdata_discount = (product_meta_data['product_meta_id'])
				count_dicscount = cursor.execute(get_query_discount,getdata_discount)

				if count_dicscount > 0:
					product_meta_discount = cursor.fetchone()
					product_data[key]['discount'] = product_meta_discount['discount']

					discount = (data['out_price']/100)*product_meta_discount['discount']
					actual_amount = data['out_price'] - discount

					product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
				else:
					product_data[key]['discount'] = 0
					product_data[key]['after_discounted_price'] = product_meta_data['out_price']

				product_data[key]['rating'] = 4.3

				get_favourite = ("""SELECT `product_meta_id`
						FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

				getFavData = (product_meta_data['product_meta_id'],user_id,organisation_id)
					
				count_fav_product = cursor.execute(get_favourite,getFavData)

				if count_fav_product > 0:
					product_data[key]['is_favourite'] = "y"
				else:
					product_data[key]['is_favourite'] = "n"

				get_cart = ("""SELECT `product_meta_id`
					FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
				getCartData = (product_meta_data['product_meta_id'],user_id,organisation_id)
				count_cart_product = cursor.execute(get_cart,getCartData)

				if count_cart_product > 0:
					product_data[key]['is_cart'] = "y"
				else:
					product_data[key]['is_cart'] = "n"

				get_stock = ("""SELECT pi.`stock` 
					FROM `user_retailer_mapping` urm 
					INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
					WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
				getstockData = (user_id,product_meta_data['product_meta_id'])

				count_stock = cursor.execute(get_stock,getstockData)

				if count_stock > 0:
					product_data[key]['stock'] = "In Stock"
				else:
					product_data[key]['stock'] = "Out Of Stock"	

			offer_data['product_data'] = product_data
		else:
			offer_data['product_data'] = []

		get_query_offer_image = ("""SELECT `offer_image` FROM `offer_images` WHERE `offer_id` = %s""")
		getdata_offer_image = (offer_id)
		image_count = cursor.execute(get_query_offer_image,getdata_offer_image)

		if image_count > 0:
			offer_images = cursor.fetchall()

			image_a = []

			for image_offer in offer_images:
				image_a.append(image_offer['offer_image'])

			offer_data['images'] = image_a
		else:
			offer_data['images'] = []
	else:
		offer_data = {}

	return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":offer_data}), status.HTTP_200_OK


#----------------------Offer-Details---------------------#	

#----------------------Offer-Details---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/OfferDetailsWithAnalytics/<int:organisation_id>/<string:language>/<int:offer_id>/<int:user_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def OfferDetailsWithAnalytics(organisation_id,language,offer_id,user_id,wop):
	connection = mysql_connection()
	cursor = connection.cursor()

	connection_analytics = mysql_connection_analytics()
	cursor_analytics = connection_analytics.cursor()

	now = datetime.now()
	today_date = now.strftime("%Y-%m-%d")

	customer_id = user_id
	offer_id = offer_id
	from_web_or_phone = wop
	organisation_id = organisation_id
		

	offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
			`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
			%s,%s,%s)""")
	offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
			from_web_or_phone,organisation_id))

	get_offer_query =  ("""SELECT o.`offer_id`,o.`offer_image`,o.`coupon_code`,o.`discount_percentage`,o.`absolute_price`,o.`discount_value`,o.`product_offer_type`,o.`is_landing_page`,o.`offer_image_type`
			FROM `offer` o		
			WHERE o.`offer_id` = %s and status = 1 and date(`validity_date`) >= %s""")
	get_offer_data = (offer_id,today_date)
	offer_count = cursor.execute(get_offer_query,get_offer_data)
	if offer_count > 0:
		offer_data = cursor.fetchone()

		get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`
				FROM `product_offer_mapping` pom			
				INNER JOIN `product` p ON pom.`product_id` = p.`product_id` 
				INNER JOIN `product_organisation_mapping` pomm ON pomm.`product_id` = p.`product_id`			
				WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s and pomm.`product_status`= 1 and pomm.`organisation_id` = %s""")
		get_offer_product_data = (offer_id,organisation_id,organisation_id)			
		cursor.execute(get_offer_product,get_offer_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):
			get_offer_product_meta = (""" SELECT pm.`product_id`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
				`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
			get_offer_product_meta_data = (data['product_id'],data['product_id'])
			cursor.execute(get_offer_product_meta,get_offer_product_meta_data)

			product_meta_data = cursor.fetchone()

			product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
			product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
			product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
			product_data[key]['in_price'] = product_meta_data['in_price']
			
			get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data = (organisation_id, product_meta_data['product_meta_id'])
			count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
			if count_out_price_data >0:
				out_price_data = cursor.fetchone()
				product_data[key]['out_price'] = out_price_data['out_price']
			else:
				product_data[key]['out_price'] = product_meta_data['out_price']

			a_string = product_meta_data['meta_key_text']
			a_list = a_string.split(',')
			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
									FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()
					
				get_query_key = ("""SELECT `meta_key`
									FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
				
			get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (product_meta_data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
			getdata_discount = (product_meta_data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = product_meta_data['out_price']

			product_data[key]['rating'] = 4.3

			get_favourite = ("""SELECT `product_meta_id`
					FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (product_meta_data['product_meta_id'],user_id,organisation_id)
				
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (product_meta_data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,product_meta_data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"	

		offer_data['product_data'] = product_data

		get_query_offer_image = ("""SELECT `offer_image` FROM `offer_images` WHERE `offer_id` = %s""")
		getdata_offer_image = (offer_id)
		image_count = cursor.execute(get_query_offer_image,getdata_offer_image)

		if image_count > 0:
			offer_images = cursor.fetchall()

			image_a = []

			for image_offer in offer_images:
				image_a.append(image_offer['offer_image'])

			offer_data['images'] = image_a
		else:
			offer_data['images'] = []
	else:
		offer_data = {}

	return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":offer_data}), status.HTTP_200_OK


#----------------------Offer-Details---------------------#	

@name_space.route("/offerList/<int:offer_id>/<int:user_id>/<int:organisation_id>")	
class offerList(Resource):
	def get(self,offer_id,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
			FROM `product_offer_mapping` pom			
			INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s""")
		get_offer_product_data = (offer_id,organisation_id)			
		cursor.execute(get_offer_product,get_offer_product_data)
		product_data = cursor.fetchall()	

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"			

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"offer_data":product_data}}), status.HTTP_200_OK

#----------------------Offer-List---------------------#

#----------------------Offer-List-With-Language---------------------#

@name_space.route("/offerListWithLanguage/<int:offer_id>/<int:user_id>/<int:organisation_id>/<string:language>")	
class offerListWithLanguage(Resource):
	def get(self,offer_id,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
			FROM `product_offer_mapping` pom			
			INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s and p.`status` = 1 and p.`language` = %s""")
		get_offer_product_data = (offer_id,organisation_id,language)			
		cursor.execute(get_offer_product,get_offer_product_data)
		product_data = cursor.fetchall()	

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"			

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success"
		    },
		    "responseList":{"offer_data":product_data}}), status.HTTP_200_OK

#----------------------Offer-List-with-Language---------------------#

#----------------------Offer-List-With-Language-And-Pagination---------------------#

@name_space.route("/offerListWithLanguageAndPagination/<int:offer_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class offerListWithLanguageAndPagination(Resource):
	def get(self,offer_id,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
			FROM `product_offer_mapping` pom			
			INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s and p.`status` = 1 and p.`language` = %s LIMIT %s,20""")
		get_offer_product_data = (offer_id,organisation_id,language,offset)			
		cursor.execute(get_offer_product,get_offer_product_data)
		product_data = cursor.fetchall()	

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"	

		get_offer_product_count =  ("""SELECT count(*) as product_count
			FROM `product_offer_mapping` pom			
			INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s and p.`status` = 1 and p.`language` = %s""")
		get_offer_product_data_count = (offer_id,organisation_id,language)			
		cursor.execute(get_offer_product_count,get_offer_product_data_count)
		product_data_count = cursor.fetchone()	

		page_count = math.trunc(product_data_count['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1	

		return ({"attributes": {
		    	"status_desc": "offer_details",
		    	"status": "success",
		    	"page_count":page_count,
		    	"page": page
		    },
		    "responseList":{"offer_data":product_data}}), status.HTTP_200_OK

#----------------------Offer-List-with-Language---------------------#


#----------------------View-More---------------------#

@name_space.route("/viewMoreProductList/<string:key>/<int:category_id>/<int:organisation_id>")	
class viewMoreProductList(Resource):
	def get(self,key,category_id,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		if key == 'top_selling':
			product_status = 1
			get_top_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`
				FROM `product_top_selling_mapping` pts 
				INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
				WHERE pts.`organisation_id` = %s and p.`status` = %s""")	
			get_top_selling_product_data = (organisation_id,product_status)	
			cursor.execute(get_top_selling_product_query,get_top_selling_product_data)
			top_selling_product = cursor.fetchall()

			for tkey,tdata in enumerate(top_selling_product):			
				get_product_meta_image_quey = ("""SELECT `image` as `product_image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (tdata['product_meta_id'])
				rows_count_image_top_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_top_selling > 0:
					product_meta_image = cursor.fetchone()
					top_selling_product[tkey]['product_image'] = product_meta_image['product_image']
				else:
					top_selling_product[tkey]['product_image'] = ""	

				get_product_meta_inventory_stock_quey = ("""SELECT `stock`
				FROM `product_inventory` WHERE `product_meta_id` = %s """)
				product_meta_inventory_stock_data = (tdata['product_meta_id'])
				row_count_stock = cursor.execute(get_product_meta_inventory_stock_quey,product_meta_inventory_stock_data)

				if row_count_stock > 0:
					product_meta_inventory_stock = cursor.fetchone()

					top_selling_product[tkey]['totalproduct'] = product_meta_inventory_stock['stock']
				else:
					top_selling_product[tkey]['totalproduct'] = 0

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":top_selling_product}), status.HTTP_200_OK

		if key == 'best_selling':
			product_status = 1
			get_best_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s""")
			get_best_selling_product_data = (organisation_id,product_status)
			cursor.execute(get_best_selling_product_query,get_best_selling_product_data)
			best_selling_product = cursor.fetchall()

			for bkey,bdata in enumerate(best_selling_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					best_selling_product[bkey]['product_image'] = product_meta_image['image']
				else:
					best_selling_product[bkey]['product_image'] = ""

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":best_selling_product}), status.HTTP_200_OK

		if key == 'new_arrival':
			get_new_arrival_product_query =  ("""SELECT pnm.`product_id`,n.`new_arrival_id`,n.`new_arrival_image` as `offer_image`,n.`discount_percentage`
			FROM `product_new_arrival_mapping` pnm 
			INNER JOIN `new_arrival` n ON n.`new_arrival_id` = pnm.`new_arrival_id`
			WHERE pnm.`organisation_id` = %s""")
			get_new_arrival_product_data = (organisation_id)
			cursor.execute(get_new_arrival_product_query,get_new_arrival_product_data)
			new_arrival_product = cursor.fetchall()

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":new_arrival_product}), status.HTTP_200_OK

		if key == 'offer':
			get_offer =  ("""SELECT `offer_id`,`offer_image`,`discount_percentage`,`coupon_code`
			FROM `offer` where `organisation_id` = %s""")
			offer_data = (organisation_id)
			cursor.execute(get_offer,offer_data)
			offer = cursor.fetchall()

			for key,data in enumerate(offer):
				get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`
					FROM `product_offer_mapping` pom			
					INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
					WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s""")
				get_offer_product_data = (data['offer_id'],organisation_id)			
				cursor.execute(get_offer_product,get_offer_product_data)
				offer_product = cursor.fetchall()
				offer[key]['product'] = offer_product

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":offer}), status.HTTP_200_OK

		if key == 'latest_product':

			get_latest_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and pbsm.`organisation_id` = %s""")
			latest_product_data = (category_id,organisation_id)
			cursor.execute(get_latest_product,latest_product_data)
			latest_product = cursor.fetchall()

			for bkey,bdata in enumerate(latest_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					latest_product[bkey]['product_image'] = product_meta_image['image']
				else:
					latest_product[bkey]['product_image'] = ""

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":latest_product}), status.HTTP_200_OK

		if key == 'home_category':
			get_category_query = ("""SELECT meta_key_value_id
			FROM `home_category_mapping` WHERE organisation_id = %s """)

			get_category_data = (organisation_id)
			cout_home_category = cursor.execute(get_category_query,get_category_data)

			if cout_home_category > 0:

				home_category_data = cursor.fetchall()

				for key,data in enumerate(home_category_data):
					get_key_value_query = ("""SELECT `meta_key_value_id`,`meta_key_value`,`image`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)

					getdata_key_value = (data['meta_key_value_id'])
					cursor.execute(get_key_value_query,getdata_key_value)

					key_value_data = cursor.fetchone()

					home_category_data[key]['meta_key_value'] = key_value_data['meta_key_value']
					home_category_data[key]['image'] = key_value_data['image']
			else:
				home_category_data = []

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":home_category_data}), status.HTTP_200_OK

			

#----------------------View-More---------------------#

#----------------------View-More-With-Language---------------------#

@name_space.route("/viewMoreProductListWithLanguage/<string:key>/<int:category_id>/<int:organisation_id>/<string:language>")	
class viewMoreProductListWithLanguage(Resource):
	def get(self,key,category_id,organisation_id,language):

		connection = mysql_connection()
		cursor = connection.cursor()

		if key == 'top_selling':
			product_status = 1
			get_top_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`
				FROM `product_top_selling_mapping` pts 
				INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
				WHERE pts.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")	
			get_top_selling_product_data = (organisation_id,product_status,language)	
			cursor.execute(get_top_selling_product_query,get_top_selling_product_data)
			top_selling_product = cursor.fetchall()

			for tkey,tdata in enumerate(top_selling_product):			
				get_product_meta_image_quey = ("""SELECT `image` as `product_image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (tdata['product_meta_id'])
				rows_count_image_top_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_top_selling > 0:
					product_meta_image = cursor.fetchone()
					top_selling_product[tkey]['product_image'] = product_meta_image['product_image']
				else:
					top_selling_product[tkey]['product_image'] = ""	

				get_product_meta_inventory_stock_quey = ("""SELECT `stock`
				FROM `product_inventory` WHERE `product_meta_id` = %s """)
				product_meta_inventory_stock_data = (tdata['product_meta_id'])
				row_count_stock = cursor.execute(get_product_meta_inventory_stock_quey,product_meta_inventory_stock_data)

				if row_count_stock > 0:
					product_meta_inventory_stock = cursor.fetchone()

					top_selling_product[tkey]['totalproduct'] = product_meta_inventory_stock['stock']
				else:
					top_selling_product[tkey]['totalproduct'] = 0

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":top_selling_product}), status.HTTP_200_OK

		if key == 'best_selling':
			product_status = 1
			get_best_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
			get_best_selling_product_data = (organisation_id,product_status,language)
			cursor.execute(get_best_selling_product_query,get_best_selling_product_data)
			best_selling_product = cursor.fetchall()

			for bkey,bdata in enumerate(best_selling_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					best_selling_product[bkey]['product_image'] = product_meta_image['image']
				else:
					best_selling_product[bkey]['product_image'] = ""

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":best_selling_product}), status.HTTP_200_OK

		if key == 'new_arrival':
			get_new_arrival_product_query =  ("""SELECT pnm.`product_id`,n.`new_arrival_id`,n.`new_arrival_image` as `offer_image`,n.`discount_percentage`
			FROM `product_new_arrival_mapping` pnm 
			INNER JOIN `new_arrival` n ON n.`new_arrival_id` = pnm.`new_arrival_id`
			WHERE n.`organisation_id` = %s and n.`language` = %s""")
			get_new_arrival_product_data = (organisation_id,language)
			cursor.execute(get_new_arrival_product_query,get_new_arrival_product_data)
			new_arrival_product = cursor.fetchall()

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":new_arrival_product}), status.HTTP_200_OK

		if key == 'offer':
			get_offer =  ("""SELECT `offer_id`,`offer_image`,`discount_percentage`,`coupon_code`
			FROM `offer` where `organisation_id` = %s""")
			offer_data = (organisation_id)
			cursor.execute(get_offer,offer_data)
			offer = cursor.fetchall()

			for key,data in enumerate(offer):
				get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`
					FROM `product_offer_mapping` pom			
					INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
					WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s""")
				get_offer_product_data = (data['offer_id'],organisation_id)			
				cursor.execute(get_offer_product,get_offer_product_data)
				offer_product = cursor.fetchall()
				offer[key]['product'] = offer_product

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":offer}), status.HTTP_200_OK

		if key == 'latest_product':

			get_latest_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and p.`organisation_id` = %s and p.`language` = %s """)
			latest_product_data = (category_id,organisation_id,language)
			cursor.execute(get_latest_product,latest_product_data)
			latest_product = cursor.fetchall()

			for bkey,bdata in enumerate(latest_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					latest_product[bkey]['product_image'] = product_meta_image['image']
				else:
					latest_product[bkey]['product_image'] = ""

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":latest_product}), status.HTTP_200_OK

		if key == 'home_category':
			get_category_query = ("""SELECT mm.`meta_key_value`,mm.`meta_key_value_id`,mm.`image`			
			FROM `home_category_mapping` hcm
			INNER JOIN meta_key_value_master mm ON mm.`meta_key_value_id` = hcm.`meta_key_value_id` 
			WHERE mm.`organisation_id` = %s and mm.`language` = %s""")

			get_category_data = (organisation_id,language)
			cout_home_category = cursor.execute(get_category_query,get_category_data)
			home_category_data = cursor.fetchall()			

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":home_category_data}), status.HTTP_200_OK

			

#----------------------View-More-with-Language---------------------#

#----------------------View-More-With-Language-And-Pagination---------------------#

@name_space.route("/viewMoreProductListWithLanguageAndPagination/<string:key>/<int:category_id>/<int:organisation_id>/<string:language>/<int:page>")	
class viewMoreProductListWithLanguageAndPagination(Resource):
	def get(self,key,category_id,organisation_id,language,page):

		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		if key == 'top_selling':
			product_status = 1
			get_top_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`
				FROM `product_top_selling_mapping` pts 
				INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
				WHERE pts.`organisation_id` = %s and p.`status` = %s and p.`language` = %s LIMIT %s,20""")	
			get_top_selling_product_data = (organisation_id,product_status,language,offset)	
			cursor.execute(get_top_selling_product_query,get_top_selling_product_data)
			top_selling_product = cursor.fetchall()

			for tkey,tdata in enumerate(top_selling_product):			
				get_product_meta_image_quey = ("""SELECT `image` as `product_image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (tdata['product_meta_id'])
				rows_count_image_top_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_top_selling > 0:
					product_meta_image = cursor.fetchone()
					top_selling_product[tkey]['product_image'] = product_meta_image['product_image']
				else:
					top_selling_product[tkey]['product_image'] = ""	

				get_product_meta_inventory_stock_quey = ("""SELECT `stock`
				FROM `product_inventory` WHERE `product_meta_id` = %s """)
				product_meta_inventory_stock_data = (tdata['product_meta_id'])
				row_count_stock = cursor.execute(get_product_meta_inventory_stock_quey,product_meta_inventory_stock_data)

				if row_count_stock > 0:
					product_meta_inventory_stock = cursor.fetchone()

					top_selling_product[tkey]['totalproduct'] = product_meta_inventory_stock['stock']
				else:
					top_selling_product[tkey]['totalproduct'] = 0

			get_top_selling_product_query_count =  ("""SELECT count(*) as product_count
				FROM `product_top_selling_mapping` pts 
				INNER JOIN `product_meta` pm ON pts.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
				WHERE pts.`organisation_id` = %s and p.`status` = %s and p.`language` = %s LIMIT %s,20""")	
			get_top_selling_product_data_count = (organisation_id,product_status,language,offset)	
			cursor.execute(get_top_selling_product_query_count,get_top_selling_product_data_count)

			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count": page_count,
		    		"page":page
		    	},
		    	"responseList":top_selling_product}), status.HTTP_200_OK

		if key == 'best_selling':
			product_status = 1
			get_best_selling_product_query =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s LIMIT %s,20""")
			get_best_selling_product_data = (organisation_id,product_status,language,offset)
			cursor.execute(get_best_selling_product_query,get_best_selling_product_data)
			best_selling_product = cursor.fetchall()

			for bkey,bdata in enumerate(best_selling_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					best_selling_product[bkey]['product_image'] = product_meta_image['image']
				else:
					best_selling_product[bkey]['product_image'] = ""

			get_best_selling_product_query_count =  ("""SELECT count(*) as product_count
			FROM `product_best_selling_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
			WHERE pbsm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
			get_best_selling_product_data_count = (organisation_id,product_status,language)
			cursor.execute(get_best_selling_product_query_count,get_best_selling_product_data_count)

			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count": page_count,
		    		"page": page
		    	},
		    	"responseList":best_selling_product}), status.HTTP_200_OK

		if key == 'new_arrival':
			get_new_arrival_product_query =  ("""SELECT pnm.`product_id`,n.`new_arrival_id`,n.`new_arrival_image` as `offer_image`,n.`discount_percentage`
			FROM `product_new_arrival_mapping` pnm 
			INNER JOIN `new_arrival` n ON n.`new_arrival_id` = pnm.`new_arrival_id`
			WHERE n.`organisation_id` = %s and n.`language` = %s""")
			get_new_arrival_product_data = (organisation_id,language)
			cursor.execute(get_new_arrival_product_query,get_new_arrival_product_data)
			new_arrival_product = cursor.fetchall()

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":new_arrival_product}), status.HTTP_200_OK

		if key == 'offer':
			get_offer =  ("""SELECT `offer_id`,`offer_image`,`discount_percentage`,`coupon_code`
			FROM `offer` where `organisation_id` = %s LIMIT %s,20""")
			offer_data = (organisation_id,offset)
			cursor.execute(get_offer,offer_data)
			offer = cursor.fetchall()

			for key,data in enumerate(offer):
				get_offer_product =  ("""SELECT p.`product_id`,p.`product_name`
					FROM `product_offer_mapping` pom			
					INNER JOIN `product` p ON pom.`product_id` = p.`product_id`  
					WHERE pom.`offer_id` = %s and pom.`organisation_id` = %s""")
				get_offer_product_data = (data['offer_id'],organisation_id)			
				cursor.execute(get_offer_product,get_offer_product_data)
				offer_product = cursor.fetchall()
				offer[key]['product'] = offer_product

			get_offer_count =  ("""SELECT count(*) as product_count
			FROM `offer` where `organisation_id` = %s""")
			offer_data_count = (organisation_id)
			cursor.execute(get_offer_count,offer_data_count)
			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"page":page
		    	},
		    	"responseList":offer}), status.HTTP_200_OK

		if key == 'latest_product':

			get_latest_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and pbsm.`organisation_id` = %s and p.`language` = %s LIMIT %s,20""")
			latest_product_data = (category_id,organisation_id,language,offset)
			cursor.execute(get_latest_product,latest_product_data)
			latest_product = cursor.fetchall()

			for bkey,bdata in enumerate(latest_product):
				get_product_meta_image_quey = ("""SELECT `image`
				FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (bdata['product_meta_id'])
				rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image_best_selling > 0:
					product_meta_image = cursor.fetchone()
					latest_product[bkey]['product_image'] = product_meta_image['image']
				else:
					latest_product[bkey]['product_image'] = ""

			get_latest_product_count =  ("""SELECT count(*) as product_count
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and pbsm.`organisation_id` = %s and p.`language` = %s""")
			latest_product_data_count = (category_id,organisation_id,language)
			cursor.execute(get_latest_product_count,latest_product_data_count)

			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"page":page
		    	},
		    	"responseList":latest_product}), status.HTTP_200_OK

		if key == 'home_category':
			get_category_query = ("""SELECT mm.`meta_key_value`,mm.`meta_key_value_id`,mm.`image`			
			FROM `home_category_mapping` hcm
			INNER JOIN meta_key_value_master mm ON mm.`meta_key_value_id` = hcm.`meta_key_value_id` 
			WHERE mm.`organisation_id` = %s and mm.`language` = %s LIMIT %s,20""")

			get_category_data = (organisation_id,language,offset)
			cout_home_category = cursor.execute(get_category_query,get_category_data)
			home_category_data = cursor.fetchall()

			get_category_query_count = ("""SELECT count(*) as product_count		
			FROM `home_category_mapping` hcm
			INNER JOIN meta_key_value_master mm ON mm.`meta_key_value_id` = hcm.`meta_key_value_id` 
			WHERE mm.`organisation_id` = %s and mm.`language` = %s""")

			get_category_data_count = (organisation_id,language)
			cursor.execute(get_category_query_count,get_category_data_count)	

			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1
		

			return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"page": page
		    	},
		    	"responseList":home_category_data}), status.HTTP_200_OK

			

#----------------------View-More-With-Language-And-Pagination---------------------#

#----------------------Product-List-By-Category---------------------#
@name_space.route("/getProductListByCategory/<int:category_id>/<int:organisation_id>")	
class getProductListByCategory(Resource):
	def get(self,category_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_latest_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`,pm.`loyalty_points`
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and pbsm.`organisation_id` = %s and p.`status` = %s
			LIMIT 6""")
		product_status = 1
		latest_product_data = (category_id,organisation_id,product_status)
		cursor.execute(get_latest_product,latest_product_data)
		latest_product = cursor.fetchall()

		for bkey,bdata in enumerate(latest_product):
			get_product_meta_image_quey = ("""SELECT `image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (bdata['product_meta_id'])
			rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_best_selling > 0:
				product_meta_image = cursor.fetchone()
				latest_product[bkey]['product_image'] = product_meta_image['image']
			else:
				latest_product[bkey]['product_image'] = ""

		get_budget_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s""")		
		get_budget_data = (organisation_id,category_id)
		cursor.execute(get_budget_query,get_budget_data)

		budget_data = cursor.fetchall()

		for key,data in enumerate(budget_data):
			budget_data[key]['last_update_ts'] = str(data['last_update_ts'])

		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success"
		    	},
		    	"responseList":{"latest_product":latest_product,"budget_data":budget_data}}), status.HTTP_200_OK

#----------------------Product-List-By-Category---------------------#

#----------------------Product-List-By-Category-with-Language---------------------#
@name_space.route("/getProductListByCategoryWithLanguage/<int:category_id>/<int:organisation_id>/<string:language>")	
class getProductListByCategoryWithLanguage(Resource):
	def get(self,category_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_latest_product =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`out_price`,pm.`loyalty_points`
			FROM `latest_product_mapping` pbsm 
			INNER JOIN `product_meta` pm ON pbsm.`product_meta_id` = pm.`product_meta_id`
			INNER JOIN `product` p ON pm.`product_id` = p.`product_id` 
			WHERE p.`category_id` = %s and pbsm.`organisation_id` = %s and p.`language` = %s and p.`status` = %s
			LIMIT 6""")
		product_status = 1
		latest_product_data = (category_id,organisation_id,language,product_status)
		cursor.execute(get_latest_product,latest_product_data)
		latest_product = cursor.fetchall()

		for bkey,bdata in enumerate(latest_product):
			get_product_meta_image_quey = ("""SELECT `image`
			FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
			product_meta_image_data = (bdata['product_meta_id'])
			rows_count_image_best_selling = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
			if rows_count_image_best_selling > 0:
				product_meta_image = cursor.fetchone()
				latest_product[bkey]['product_image'] = product_meta_image['image']
			else:
				latest_product[bkey]['product_image'] = ""

		get_budget_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s and language = %s """)		
		get_budget_data = (organisation_id,category_id,language)
		cursor.execute(get_budget_query,get_budget_data)

		budget_data = cursor.fetchall()

		for key,data in enumerate(budget_data):
			budget_data[key]['last_update_ts'] = str(data['last_update_ts'])

		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success"
		    	},
		    	"responseList":{"latest_product":latest_product,"budget_data":budget_data}}), status.HTTP_200_OK

#----------------------Product-List-By-Category-with-Language---------------------#

#----------------------Product-List-By-Category-Price-Range---------------------#
@name_space.route("/getProductListByCategoryPriceRange/<int:category_id>/<int:from_price>/<int:to_price>/<int:user_id>/<int:organisation_id>")	
class getProductListByCategoryPriceRange(Resource):
	def get(self,category_id,from_price,to_price,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		if category_id == 0:

			get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
				WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s ORDER BY pm.`out_price` ASC""")
			product_status = 1
			data = (from_price,to_price,organisation_id,product_status)
			

		else:
			get_product_list =  ("""SELECT DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
				WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s ORDER BY pm.`out_price` ASC""")
			product_status = 1
			data = (category_id,from_price,to_price,organisation_id,product_status)
			

		cursor.execute(get_product_list,data)
		product_data = cursor.fetchall()
		print(product_data)

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cout_product_image = cursor.execute(get_query_image,getdata_image)
			if cout_product_image > 0:
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-By-Category-Price-Range---------------------#

#----------------------Product-List-By-Category-Price-Range---------------------#
@name_space.route("/getProductListByCategoryPriceRangeWithPagination/<int:category_id>/<int:from_price>/<int:to_price>/<int:user_id>/<int:organisation_id>/<int:page>")	
class getProductListByCategoryPriceRangeWithPagination(Resource):
	def get(self,category_id,from_price,to_price,user_id,organisation_id,page):

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		connection = mysql_connection()
		cursor = connection.cursor()

		if category_id == 0:

			get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
				WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
			product_status = 1
			data = (from_price,to_price,organisation_id,product_status,offset)
			

		else:
			get_product_list =  ("""SELECT DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
				WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
			product_status = 1
			data = (category_id,from_price,to_price,organisation_id,product_status,offset)
			
		cursor.execute(get_product_list,data)
		product_data = cursor.fetchall()		

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cout_product_image = cursor.execute(get_query_image,getdata_image)
			if cout_product_image > 0:
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"		
		
		if category_id == 0:
			get_count_query = ("""SELECT COUNT(*) as product_count
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
				WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s""")
			product_status = 1
			countdata = (from_price,to_price,organisation_id,product_status)
			
		else:
			get_count_query = ("""SELECT COUNT(DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`) as product_count 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
				WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s """)
			product_status = 1
			countdata = (category_id,from_price,to_price,organisation_id,product_status)

		cursor.execute(get_count_query,countdata)
		product_count_data = cursor.fetchone()

		page_count = math.trunc(product_count_data['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1

		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-By-Category-Price-Range---------------------#

#----------------------Product-List-By-Category-Price-Range-With-Language---------------------#
@name_space.route("/getProductListByCategoryPriceRangeWithLanguage/<int:category_id>/<int:from_price>/<int:to_price>/<int:user_id>/<int:organisation_id>/<string:language>")	
class getProductListByCategoryPriceRangeWithLanguage(Resource):
	def get(self,category_id,from_price,to_price,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		if category_id == 0:

			get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
				WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s ORDER BY pm.`out_price` ASC""")
			product_status = 1
			data = (from_price,to_price,organisation_id,product_status,language)
			

		else:
			get_product_list =  ("""SELECT DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
				WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s ORDER BY pm.`out_price` ASC """)
			product_status = 1
			data = (category_id,from_price,to_price,organisation_id,product_status,language)
			

		cursor.execute(get_product_list,data)
		product_data = cursor.fetchall()
		print(product_data)

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cout_product_image = cursor.execute(get_query_image,getdata_image)
			if cout_product_image > 0:
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-By-Category-Price-Range-With-Language---------------------#

#----------------------Product-List-By-Category-Price-Range-With-Language-And-Pagination---------------------#
@name_space.route("/getProductListByCategoryPriceRangeWithLanguageAndPagination/<int:category_id>/<int:from_price>/<int:to_price>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListByCategoryPriceRangeWithLanguageAndPagination(Resource):
	def get(self,category_id,from_price,to_price,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		if category_id == 0:

			get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
				WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
			product_status = 1
			data = (from_price,to_price,organisation_id,product_status,language,offset)
			

		else:
			get_product_list =  ("""SELECT DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text` 
				FROM `product` p 
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
				WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
			product_status = 1
			data = (category_id,from_price,to_price,organisation_id,product_status,language,offset)
			

		cursor.execute(get_product_list,data)
		product_data = cursor.fetchall()
		

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cout_product_image = cursor.execute(get_query_image,getdata_image)
			if cout_product_image > 0:
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"


		if category_id == 0:
			get_count_query = ("""SELECT COUNT(*) as product_count
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
					WHERE pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s""")
			product_status = 1
			countdata = (from_price,to_price,organisation_id,product_status)
			
		else:
			get_count_query = ("""SELECT COUNT(DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`) as product_count 
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`  
					WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and p.`organisation_id` = %s and p.`status` = %s """)
			product_status = 1
			countdata = (category_id,from_price,to_price,organisation_id,product_status)

		cursor.execute(get_count_query,countdata)
		product_count_data = cursor.fetchone()

		page_count = math.trunc(product_count_data['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1


		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success",
		    		"page_count": page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-By-Category-Price-Range-With-Language-And-Pagination---------------------#

#----------------------Product-List-By-Category-Price-Range-With-Language-And-Pagination---------------------#
@name_space.route("/getProductListByCategoryPriceRangeWithLanguageAndPaginationFromProductOrganisationMapping/<int:category_id>/<int:from_price>/<int:to_price>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListByCategoryPriceRangeWithLanguageAndPaginationFromProductOrganisationMapping(Resource):
	def get(self,category_id,from_price,to_price,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		if category_id == 0:

			if page > 0:
				get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
					WHERE pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1 and p.`language` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
				product_status = 1
				data = (from_price,to_price,organisation_id,product_status,language,offset)
			else:
				get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
					WHERE pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1 and p.`language` = %s ORDER BY pm.`out_price` ASC """)
				product_status = 1
				data = (from_price,to_price,organisation_id,product_status,language)
			

		else:
			if page > 0:
				get_product_list =  ("""SELECT DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text` 
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
					WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1 and p.`language` = %s ORDER BY pm.`out_price` ASC LIMIT %s, 20""")
				product_status = 1
				data = (category_id,from_price,to_price,organisation_id,product_status,language,offset)
			else:
				get_product_list =  ("""SELECT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`,pm.`loyalty_points` 
					FROM `product` p 
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
					WHERE pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and  pom.`product_status` = 1 and p.`language` = %s ORDER BY pm.`out_price` ASC""")
				product_status = 1
				data = (from_price,to_price,organisation_id,product_status,language)			

		cursor.execute(get_product_list,data)
		product_data = cursor.fetchall()
		

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cout_product_image = cursor.execute(get_query_image,getdata_image)
			if cout_product_image > 0:
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		if page >0 :		
			if category_id == 0:
				get_count_query = ("""SELECT COUNT(*) as product_count
						FROM `product` p 
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
						WHERE pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1""")
				product_status = 1
				countdata = (from_price,to_price,organisation_id,product_status)
				
			else:
				get_count_query = ("""SELECT COUNT(DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`) as product_count 
						FROM `product` p 
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`  
						WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1""")
				product_status = 1
				countdata = (category_id,from_price,to_price,organisation_id,product_status)

			cursor.execute(get_count_query,countdata)
			product_count_data = cursor.fetchone()

			page_count = math.trunc(product_count_data['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1
		else:
			if category_id == 0:
				get_count_query = ("""SELECT COUNT(*) as product_count
						FROM `product` p 
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id` 
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id` 
						WHERE pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1""")
				product_status = 1
				countdata = (from_price,to_price,organisation_id,product_status)
				
			else:
				get_count_query = ("""SELECT COUNT(DISTINCT p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`product_meta_code`,pm.`out_price`,pm.`meta_key_text`) as product_count 
						FROM `product` p 
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`  
						WHERE p.`category_id` = %s and pm.`out_price` BETWEEN %s AND %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1""")
				product_status = 1
				countdata = (category_id,from_price,to_price,organisation_id,product_status)

			page_count = cursor.execute(get_count_query,countdata)


		return ({"attributes": {
		    		"status_desc": "latest_product",
		    		"status": "success",
		    		"page_count": page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-By-Category-Price-Range-With-Language-And-Pagination---------------------#

#----------------------Product-List-By-Home-Brnad---------------------#

@name_space.route("/getProductListByHomeBrand/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>")	
class getProductListByHomeBrand(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`loyalty_points`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s""")
		get_product_data = (meta_key_value_id,organisation_id,product_status)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			if product_image_count > 0:
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Brnad---------------------#

#----------------------Product-List-By-Home-Brnad-With-Language---------------------#

@name_space.route("/getProductListByHomeBrandWithLanguage/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>/<string:language>")	
class getProductListByHomeBrandWithLanguage(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`loyalty_points`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` =%s""")
		get_product_data = (meta_key_value_id,organisation_id,product_status,language)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			if product_image_count > 0:
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Brnad-With-Language---------------------#

#----------------------Product-List-By-Home-Brnad-With-Language-and-Pagination---------------------#

@name_space.route("/getProductListByHomeBrandWithLanguageandPagination/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListByHomeBrandWithLanguageandPagination(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,pm.`loyalty_points`,
			min(pm.`out_price`) as `out_price`,pm.`product_meta_code`,pm.`meta_key_text`
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` =%s group by pm.`product_id` LIMIT %s, 20""")
		get_product_data = (meta_key_value_id,organisation_id,product_status,language,offset)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			if product_image_count > 0:
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		get_product_list_count =  ("""SELECT count(*) as product_count
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` =%s group by pm.`product_id`""")
		get_product_data_count = (meta_key_value_id,organisation_id,product_status,language)
		cursor.execute(get_product_list_count,get_product_data_count)
		product_data_count = cursor.fetchone()

		page_count = math.trunc(product_data_count['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Brnad-With-Language-and-Pagination---------------------#

#----------------------Product-List-By-Home-Brnad-With-Language-and-Pagination---------------------#

@name_space.route("/getProductListByBrandAndCatgoryWithLanguageandPagination/<int:brand_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>/<int:category_id>")	
class getProductListByBrandAndCatgoryWithLanguageandPagination(Resource):
	def get(self,brand_id,user_id,organisation_id,language,page,category_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`	
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`					
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s and p.`language` =%s and p.`category_id` = %s LIMIT %s, 20""")
		get_product_data = (brand_id,organisation_id,product_status,organisation_id,language,category_id,offset)
		cursor.execute(get_product_list,get_product_data)
		print(cursor._last_executed)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			get_product_meta = (""" SELECT pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price` FROM `product_meta` pm WHERE 
			`out_price` =  ( SELECT MIN(`out_price`) FROM product_meta  where product_id = %s) and product_id= %s """)
			get_product_meta_data = (data['product_id'],data['product_id'])
			count_product_meta = cursor.execute(get_product_meta,get_product_meta_data)

			if count_product_meta > 0:

				product_meta_data = cursor.fetchone()

				product_data[key]['product_meta_id'] = product_meta_data['product_meta_id']
				product_data[key]['product_meta_code'] = product_meta_data['product_meta_code']
				product_data[key]['meta_key_text'] = product_meta_data['meta_key_text']
				product_data[key]['in_price'] = product_meta_data['in_price']
				product_data[key]['out_price'] = product_meta_data['out_price']

				if product_meta_data['meta_key_text'] :

					a_string = product_meta_data['meta_key_text']
					a_list = a_string.split(',')

					met_key = []

					for a in a_list:
						get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
										FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
						getdata_key_value = (a)
						cursor.execute(get_query_key_value,getdata_key_value)
						met_key_value_data = cursor.fetchone()

						get_query_key = ("""SELECT `meta_key`
										FROM `meta_key_master` WHERE `meta_key_id` = %s """)
						getdata_key = (met_key_value_data['meta_key_id'])
						cursor.execute(get_query_key,getdata_key)
						met_key_data = cursor.fetchone()

						met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

						product_data[key]['met_key_value'] = met_key
				
				get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
				getdata_image = (product_meta_data['product_meta_id'])
				product_image_count = cursor.execute(get_query_image,getdata_image)
				product_image = cursor.fetchone()

				get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
				getdata_discount = (product_meta_data['product_meta_id'])
				count_dicscount = cursor.execute(get_query_discount,getdata_discount)

				if count_dicscount > 0:
					product_meta_discount = cursor.fetchone()
					product_data[key]['discount'] = product_meta_discount['discount']

					discount = (product_meta_data['out_price']/100)*product_meta_discount['discount']
					actual_amount = product_meta_data['out_price'] - discount

					product_data[key]['after_discounted_price'] = round(actual_amount,2) 
				else:
					product_data[key]['discount'] = 0
					product_data[key]['after_discounted_price'] = product_meta_data['out_price']

				product_data[key]['rating'] = 4.3

				if product_image_count > 0:
					product_data[key]['image'] = product_image['image']
				else:
					product_data[key]['image'] = ""

				
				get_favourite = ("""SELECT `product_meta_id`
					FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

				getFavData = (product_meta_data['product_meta_id'],user_id,organisation_id)
				
				count_fav_product = cursor.execute(get_favourite,getFavData)

				if count_fav_product > 0:
					product_data[key]['is_favourite'] = "y"
				else:
					product_data[key]['is_favourite'] = "n"

				get_cart = ("""SELECT `product_meta_id`
					FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
				getCartData = (product_meta_data['product_meta_id'],user_id,organisation_id)
				count_cart_product = cursor.execute(get_cart,getCartData)

				if count_cart_product > 0:
					product_data[key]['is_cart'] = "y"
				else:
					product_data[key]['is_cart'] = "n"


				get_stock = ("""SELECT pi.`stock` 
					FROM `user_retailer_mapping` urm 
					INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
					WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
				getstockData = (user_id,product_meta_data['product_meta_id'])

				count_stock = cursor.execute(get_stock,getstockData)

				if count_stock > 0:
					product_data[key]['stock'] = "In Stock"
				else:
					product_data[key]['stock'] = "Out Of Stock"
			else:
				product_data[key]['out_price'] = 0

		get_product_list_count =  ("""SELECT count(*) as product_count
			FROM `product_brand_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`	
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`					
			WHERE pbm.`brand_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = 1 and pom.`organisation_id` = %s and p.`language` =%s and p.`category_id` = %s""")
		get_product_data_count = (brand_id,organisation_id,product_status,organisation_id,language,category_id)
		cursor.execute(get_product_list_count,get_product_data_count)
		product_data_count = cursor.fetchone()

		page_count = math.trunc(product_data_count['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Brnad-With-Language-and-Pagination---------------------#

#----------------------Product-List-By-Home-Category---------------------#

@name_space.route("/getProductListByHomeCategory/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>")	
class getProductListByHomeCategory(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`loyalty_points`
			FROM `product_category_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			where pbm.`category_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s """)
		get_product_data = (meta_key_value_id,organisation_id,product_status)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Category---------------------#

#----------------------Product-List-By-Home-Category-With-Language---------------------#

@name_space.route("/getProductListByHomeCategoryWithLanguage/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>/<string:language>")	
class getProductListByHomeCategoryWithLanguage(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`loyalty_points`
			FROM `product_category_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			where pbm.`category_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s """)
		get_product_data = (meta_key_value_id,organisation_id,product_status,language)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"
		

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Category-With-Language---------------------#

#----------------------Product-List-By-Home-Category-With-Language-And-Pagination---------------------#

@name_space.route("/getProductListByHomeCategoryWithLanguageAndPagination/<int:meta_key_value_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListByHomeCategoryWithLanguageAndPagination(Resource):
	def get(self,meta_key_value_id,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		product_status = 1
		get_product_list =  ("""SELECT pbm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
			pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`loyalty_points`
			FROM `product_category_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			where pbm.`category_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s LIMIT %s, 20""")
		get_product_data = (meta_key_value_id,organisation_id,product_status,language,offset)
		cursor.execute(get_product_list,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			if product_image_count >0 :
			 	product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ''

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		get_product_list_count =  ("""SELECT count(*) as product_count
			FROM `product_category_mapping` pbm 
			INNER JOIN `product` p ON pbm.`product_id` = p.`product_id`
			INNER JOIN `product_meta` pm ON pbm.`product_id` = pm.`product_id`			
			where pbm.`category_id` = %s and pbm.`organisation_id` = %s and p.`status` = %s and p.`language` = %s """)
		get_product_data_count = (meta_key_value_id,organisation_id,product_status,language)
		cursor.execute(get_product_list_count,get_product_data_count)
		product_data_count = cursor.fetchone()

		page_count = math.trunc(product_data_count['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1

		return ({"attributes": {
		    		"status_desc": "product_list",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK
			
#----------------------Product-List-By-Home-Category-With-Language-And-Pagination---------------------#

#----------------------Product-List---------------------#
@name_space.route("/getProductList/<int:product_id>/<int:user_id>/<int:organisation_id>")	
class getProductList(Resource):
	def get(self,product_id,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`status` = 1 and p.`product_id` = %s and p.`organisation_id` = %s""")
		get_data = (product_id,organisation_id)
		cursor.execute(get_query,get_data)

		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List---------------------#

#----------------------Product-List-With-Language---------------------#
@name_space.route("/getProductListWithLanguage/<int:product_id>/<int:user_id>/<int:organisation_id>/<string:language>")	
class getProductListWithLanguage(Resource):
	def get(self,product_id,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()		

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`status` = 1 and p.`product_id` = %s and p.`organisation_id` = %s and p.`language` = %s""")
		get_data = (product_id,organisation_id,language)
		cursor.execute(get_query,get_data)

		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"
		

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-With-Language---------------------#

#----------------------Product-List-With-Language-And-Pagination---------------------#
@name_space.route("/getProductListWithLanguageAndPagination/<int:product_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListWithLanguageAndPagination(Resource):
	def get(self,product_id,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`status` = 1 and p.`product_id` = %s and p.`organisation_id` = %s and p.`language` = %s limit %s,20""")
		get_data = (product_id,organisation_id,language,offset)
		cursor.execute(get_query,get_data)

		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		get_query_count = ("""SELECT count(*) as product_count
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`status` = 1 and p.`product_id` = %s and p.`organisation_id` = %s and p.`language` = %s""")
		get_data_count = (product_id,organisation_id,language)
		cursor.execute(get_query_count,get_data_count)

		product_data_count = cursor.fetchone()

		page_count = math.trunc(product_data_count['product_count']/20)

		if page_count == 0:
			page_count = 1
		else:
			page_count = page_count + 1

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-With-Language-And-Pagination---------------------#

#----------------------Product-List-With-Language-And-Pagination---------------------#
@name_space.route("/getProductListWithLanguageAndPaginationFromProductOrganisationMapping/<int:product_id>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class getProductListWithLanguageAndPaginationFromProductOrganisationMapping(Resource):
	def get(self,product_id,user_id,organisation_id,language,page):
		connection = mysql_connection()
		cursor = connection.cursor()

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		if page > 0:

			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and p.`product_id` = %s and pom.`organisation_id` = %s and p.`language` = %s limit %s,20""")
			get_data = (product_id,organisation_id,language,offset)
			cursor.execute(get_query,get_data)

		else:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and p.`product_id` = %s and pom.`organisation_id` = %s and p.`language` = %s""")
			get_data = (product_id,organisation_id,language)
			cursor.execute(get_query,get_data)

		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			product_image_count = cursor.execute(get_query_image,getdata_image)

			if product_image_count >0 :
				product_image = cursor.fetchone()
				product_data[key]['image'] = product_image['image']
			else:
				product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"

			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"

		if page > 0:

			get_query_count = ("""SELECT count(*) as product_count
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and p.`product_id` = %s and pom.`organisation_id` = %s and p.`language` = %s""")
			get_data_count = (product_id,organisation_id,language)
			cursor.execute(get_query_count,get_data_count)

			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1
		else:

			get_query_count = ("""SELECT count(*) as product_count
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and p.`product_id` = %s and pom.`organisation_id` = %s and p.`language` = %s""")
			get_data_count = (product_id,organisation_id,language)
			page_count = cursor.execute(get_query_count,get_data_count)


		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success",
		    		"page_count":page_count,
		    		"current_page": page
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-List-With-Language-And-Pagination---------------------#

#----------------------Suggested-Product-List---------------------#
@name_space.route("/getSuggestedProductList/<int:product_id>/<int:user_id>")	
class getSuggestedProductList(Resource):
	def get(self,product_id,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ps.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 2""")
		get_product_data = (product_id)
		cursor.execute(get_product_query,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"


		return ({"attributes": {
			    		"status_desc": "product_details",
			    		"status": "success"
			    	},
			    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Suggested-Product-List---------------------#

#----------------------Suggested-Product-List-With-Language---------------------#
@name_space.route("/getSuggestedProductListWithLanguage/<int:product_id>/<int:organisation_id>/<int:user_id>/<string:language>")	
class getSuggestedProductListWithLanguage(Resource):
	def get(self,product_id,organisation_id,user_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ps.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 2 and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
		product_status = 1
		get_product_data = (product_id,organisation_id,product_status,language)
		cursor.execute(get_product_query,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"


		return ({"attributes": {
			    		"status_desc": "product_details",
			    		"status": "success"
			    	},
			    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Suggested-Product-List-With-Language---------------------#

#----------------------Suggested-Product-List-With-Language---------------------#
@name_space.route("/getSuggestedProductListWithLanguageFromProductOrganisationMapping/<int:product_id>/<int:organisation_id>/<int:user_id>/<string:language>")	
class getSuggestedProductListWithLanguageFromProductOrganisationMapping(Resource):
	def get(self,product_id,organisation_id,user_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ps.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = sp.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 2 and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
		product_status = 1
		get_product_data = (product_id,organisation_id,product_status,language)
		cursor.execute(get_product_query,get_product_data)
		product_data = cursor.fetchall()

		for key,data in enumerate(product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				product_data[key]['discount'] = 0
				product_data[key]['after_discounted_price'] = data['out_price']

			product_data[key]['rating'] = 4.3

			product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				product_data[key]['is_favourite'] = "y"
			else:
				product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				product_data[key]['is_cart'] = "y"
			else:
				product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				product_data[key]['stock'] = "In Stock"
			else:
				product_data[key]['stock'] = "Out Of Stock"


		return ({"attributes": {
			    		"status_desc": "product_details",
			    		"status": "success"
			    	},
			    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Suggested-Product-List-With-Language---------------------#

#----------------------Product-Details---------------------#
@name_space.route("/productDetails/<int:product_id>/<int:product_meta_code>/<int:user_id>")	
class productDetails(Resource):
	def get(self,product_id,product_meta_code,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`product_id` = %s and `product_meta_code` = %s""")
		getdata = (product_id,product_meta_code)
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

			get_query_all_key_value = ("""SELECT `meta_key_id`,`meta_key_value`,`meta_key_value_id`
					FROM `meta_key_value_master` WHERE `meta_key_id` = %s """)
			getdata_all_key_value = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_all_key_value,getdata_all_key_value)
			met_key_value_all_data = cursor.fetchall()

				#product_meta[key][met_key_data['meta_key']] = met_key_value_all_data
			met_key_value_all_data_new = []		

			for key_all,met_key_value_all_data_one in  enumerate(met_key_value_all_data):
				met_key_value_all_data_new.append({met_key_value_all_data_one['meta_key_value_id']:met_key_value_all_data_one['meta_key_value']})

			product_data[met_key_data['meta_key']] = met_key_value_all_data_new

		image_a = []	
		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s """)
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = image_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)
		getFavData = (product_data['product_meta_id'],user_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
		getCartData = (product_data['product_meta_id'],user_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
		getstockData = (user_id,product_data['product_meta_id'])
		count_stock = cursor.execute(get_stock,getstockData)

		if count_stock > 0:
			product_data['stock'] = "In Stock"
		else:
			product_data['stock'] = "Out Of Stock"

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-Details---------------------#

#----------------------Product-Details---------------------#
@name_space.route("/productDetailsWithSuggestion/<int:product_id>/<int:product_meta_code>/<int:user_id>")	
class productDetailsWithSuggestion(Resource):
	def get(self,product_id,product_meta_code,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`product_id` = %s and `product_meta_code` = %s""")
		getdata = (product_id,product_meta_code)
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

			get_query_all_key_value = ("""SELECT `meta_key_id`,`meta_key_value`,`meta_key_value_id`
					FROM `meta_key_value_master` WHERE `meta_key_id` = %s """)
			getdata_all_key_value = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_all_key_value,getdata_all_key_value)
			met_key_value_all_data = cursor.fetchall()

				#product_meta[key][met_key_data['meta_key']] = met_key_value_all_data
			met_key_value_all_data_new = []		

			for key_all,met_key_value_all_data_one in  enumerate(met_key_value_all_data):
				met_key_value_all_data_new.append({met_key_value_all_data_one['meta_key_value_id']:met_key_value_all_data_one['meta_key_value']})

			product_data[met_key_data['meta_key']] = met_key_value_all_data_new		

		image_a = []	
		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s """)
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)
		getFavData = (product_data['product_meta_id'],user_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
		getCartData = (product_data['product_meta_id'],user_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
		getstockData = (user_id,product_data['product_meta_id'])
		count_stock = cursor.execute(get_stock,getstockData)

		if count_stock > 0:
			product_data['stock'] = "In Stock"
		else:
			product_data['stock'] = "Out Of Stock"

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1""")
		get_suggested_product_data = (product_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			suggested_product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"



		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data}}), status.HTTP_200_OK

#----------------------Product-Details---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@name_space.route("/productDetailsWithSuggestionAndLanguage/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>")	
class productDetailsWithSuggestionAndLanguage(Resource):
	def get(self,product_id,product_meta_code,user_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`product_id` = %s and `product_meta_code` = %s""")
		getdata = (product_id,product_meta_code)
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

			get_query_all_key_value = ("""SELECT `meta_key_id`,`meta_key_value`,`meta_key_value_id`
					FROM `meta_key_value_master` WHERE `meta_key_id` = %s """)
			getdata_all_key_value = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_all_key_value,getdata_all_key_value)
			met_key_value_all_data = cursor.fetchall()

				#product_meta[key][met_key_data['meta_key']] = met_key_value_all_data
			met_key_value_all_data_new = []		

			for key_all,met_key_value_all_data_one in  enumerate(met_key_value_all_data):
				met_key_value_all_data_new.append({met_key_value_all_data_one['meta_key_value_id']:met_key_value_all_data_one['meta_key_value']})

			product_data[met_key_data['meta_key']] = met_key_value_all_data_new		

		image_a = []	
		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s """)
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)
		getFavData = (product_data['product_meta_id'],user_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
		getCartData = (product_data['product_meta_id'],user_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
		getstockData = (user_id,product_data['product_meta_id'])
		count_stock = cursor.execute(get_stock,getstockData)

		if count_stock > 0:
			product_data['stock'] = "In Stock"
		else:
			product_data['stock'] = "Out Of Stock"

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s""")
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			suggested_product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"



		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@name_space.route("/detailProduct/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
class detailProduct(Resource):
	def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`product_id` = %s and pm.`product_meta_code` = %s and pm.`organisation_id` = %s""")
		getdata = (product_id,product_meta_code,organisation_id)
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 """)
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)
		getFavData = (product_data['product_meta_id'],user_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
		getCartData = (product_data['product_meta_id'],user_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
		getstockData = (user_id,product_data['product_meta_id'])
		count_stock = cursor.execute(get_stock,getstockData)

		if count_stock > 0:
			product_data['stock'] = "In Stock"
		else:
			product_data['stock'] = "Out Of Stock"

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and p.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and p.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)

		print(cursor._last_executed)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):

			other_specification_json_1 = json.loads(data['other_specification_json'])
			compare_product_data[key]['other_specification_json']= other_specification_json_1
			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s """)
			getdata_image = (data['product_meta_id'])
			cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			compare_product_data[key]['image'] = product_image['image']

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[
							{
								"offer_id":1,
								"offer_name":"No Cost Emi",
								"offer_description": "Upto 435.19 EMI  interest saving on amazon Pay ICICI Bank",
								"offer_count":1
	        				},
	        				{
	        					"offer_id":1,
								"offer_name":"Bank Offer",
								"offer_description": "Upto 549.95 discount on kotak credit cards, Kotak Debit Cards",
								"offer_count":3
	        				},
	        				{
	        					"offer_id":1,
								"offer_name":"Cashback",
								"offer_description": "Get min Rs 100 back with Amazon Pay Later T&c apply. Check eligible...",
								"offer_count":2
							}

						]

		get_offer_type_data_query  = (""" SELECT `offer_type_id`,`offer_type`,`offer_type_description` FROM `offer_type` where `organisation_id` = %s""")
		offer_type_data = (organisation_id)
		row_count_offer_type = cursor.execute(get_offer_type_data_query,offer_type_data)
		if row_count_offer_type > 0:
			product_offer_type_data = cursor.fetchall()
			for okey,odata in enumerate(product_offer_type_data):	
				get_offer_data = (""" SELECT * FROM `offer` o
									LEFT JOIN `product_offer_mapping` pom ON pom.`offer_id` = o.`offer_id`
									where o.`offer_type` = %s and pom.`product_id` = %s and o.`organisation_id` = %s""")
				offer_datas = (odata['offer_type_id'],product_id,organisation_id)
				count_offer_data = cursor.execute(get_offer_data,offer_datas)
				product_offer_type_data[okey]['offer_count'] = count_offer_data

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pp.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

			getFavData = (data['product_meta_id'],user_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
			getCartData = (data['product_meta_id'],user_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"product_offer_type_data":product_offer_type_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMapping(product_id,product_meta_code,user_id,language,organisation_id):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = 2
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		if product_meta_code == 0:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,p.`category_id`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()
		else:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,p.`category_id`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pm.`product_meta_code` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,product_meta_code,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`status`= 1""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = 2
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s and o.`status`= 1""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = 2
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		if user_id == 0:
			product_data['address'] = {}
			product_data['address']["address_line_1"] = ""
			product_data['address']["address_line_2"] = ""
			product_data['address']["city"] = ""
			product_data['address']["country"] = ""
			product_data['address']["state"] = ""
			product_data['address']["pincode"] = 0
		
		else:

			get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
					FROM `admins` WHERE `admin_id` = %s""")
			getAddressData = (user_id)
			cursor.execute(get_address_query,getAddressData)

			address_data = cursor.fetchone()

			product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		if product_data['category_id'] == 6:

			if  product_data['out_price'] < 35000:

				min_price = product_data['out_price'] - 2000
				max_price = product_data['out_price'] + 2000 

			elif product_data['out_price'] > 35000:
				min_price = product_data['out_price'] - 10000
				max_price = product_data['out_price'] + 10000 


			get_product_brand_query = ("""SELECT * FROM `product_brand_mapping` where `product_id` = %s and `organisation_id` = %s""")
			get_product_brand_data = (product_data['product_id'],organisation_id)
			get_product_brand_count = cursor.execute(get_product_brand_query,get_product_brand_data)
			if get_product_brand_count > 0:
				product_brand = cursor.fetchone()
				product_brand_id = product_brand['brand_id']
			else:
				product_brand_id = 0

		else:
			min_price = product_data['out_price'] - 100
			max_price = product_data['out_price'] + 100

			product_brand_id = 0

		product_category_id = product_data['category_id'] 

		if product_brand_id == 0:
			product_search_type = product_data['product_type']				

			get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE pm.`product_meta_id` = %s and pom.`organisation_id` = %s
					UNION
					SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`category_id` = %s and p.`language` = %s and pom.`organisation_id` = %s and NOT p.`product_id`= %s and p.`product_type` like %s group by pm.`product_id` limit 3""")

			get_compare_product_data = (product_data['product_meta_id'],organisation_id,min_price,max_price,product_category_id,language,organisation_id,product_data['product_id'],"%"+product_search_type+"%")
				
		else:
			if product_brand_id == 11:
				min_price = product_data['out_price'] - 20000
				max_price = product_data['out_price'] + 20000 

				get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE pm.`product_meta_id` = %s and pom.`organisation_id` = %s
				UNION
				SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				INNER JOIN `product_brand_mapping` pbm ON pbm.`product_id` = p.`product_id`
				WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`category_id` = %s and p.`language` = %s and pom.`organisation_id` = %s and pbm.`brand_id` = %s and pbm.`organisation_id` = %s and Not p.`product_id` = %s group by pm.`product_id` limit 3""")

				get_compare_product_data = (product_data['product_meta_id'],organisation_id,min_price,max_price,product_category_id,language,organisation_id,product_brand_id,organisation_id,product_data['product_id'])
			else:
				get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE pm.`product_meta_id` = %s and pom.`organisation_id` = %s
					UNION
					SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					INNER JOIN `product_brand_mapping` pbm ON pbm.`product_id` = p.`product_id`
					WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`category_id` = %s and p.`language` = %s and pom.`organisation_id` = %s and pbm.`organisation_id` = %s and Not p.`product_id` = %s group by pm.`product_id` limit 3""")

				get_compare_product_data = (product_data['product_meta_id'],organisation_id,min_price,max_price,product_category_id,language,organisation_id,organisation_id,product_data['product_id'])

		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		print(cursor._last_executed)

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]

		plan_data = []

		get_product_meta_query = ("""SELECT p.`product_id`,pm.`product_meta_id`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
		get_product_meta_data = (product_id,organisation_id)
		product_meta_count = cursor.execute(get_product_meta_query,get_product_meta_data)
		if product_meta_count > 0:
			product_meta_data = cursor.fetchone()  

			get_plan_by_product_meta_id_query = ("""SELECT p.`plan_description`,p.`plan_short_description`,eb.`emi_bank_name`,p.`validity_date_from`,p.`validity_date_to`
													FROM `product_plan_mapping` ppm
													INNER JOIN `plan` p ON p.`plan_id` = ppm.`plan_id` 
													INNER JOIN `emi_bank` eb ON eb.`emi_bank_id` = p.`emi_bank_id`
													where ppm.`product_meta_id` = %s and ppm.`organisation_id` = %s""")
			get_plan_by_product_meta_id_data = (product_meta_data['product_meta_id'],organisation_id)
			plan_count = cursor.execute(get_plan_by_product_meta_id_query,get_plan_by_product_meta_id_data)

			if plan_count > 0:
				plan_data =  cursor.fetchall()  

				for key,data in enumerate(plan_data):
					plan_data[key]['validity_date_from'] = str(data['validity_date_from'])
					plan_data[key]['validity_date_to'] = str(data['validity_date_to'])

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	


		if user_id == 0:
			user_data = {}
			user_data["address_line_1"] = ""
			user_data["address_line_2"] = ""
			user_data["city"] = ""
			user_data["country"] = ""
			user_data["state"] = ""
			user_data["pincode"] = 0
		else:	
			get_user_details_query = (""" SELECT address_line_1,address_line_2,city,country,state,pincode 
										FROM `admins` WHERE admin_id = %s """)
			get_user_details_data = (user_id)
			count_user_details = cursor.execute(get_user_details_query,get_user_details_data)

			if count_user_details > 0:
				user_data = cursor.fetchone()
			else:
				user_data = {}
				user_data["address_line_1"] = ""
				user_data["address_line_2"] = ""
				user_data["city"] = ""
				user_data["country"] = ""
				user_data["state"] = ""
				user_data["pincode"] = 0

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"plan_data":plan_data,"protection_product_data":protection_product_data,"address":user_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#


#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMappingwithAnalysis/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMappingwithAnalysis(product_id,product_meta_code,user_id,language,organisation_id,wop):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = wop
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		if product_meta_code == 0:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()
		else:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pm.`product_meta_code` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,product_meta_code,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`status` = 1""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = wop
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s and o.`status` = 1""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = wop
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and pom.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]  

		plan_data = []

		get_product_meta_query = ("""SELECT p.`product_id`,pm.`product_meta_id`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
		get_product_meta_data = (product_id,organisation_id)
		product_meta_count = cursor.execute(get_product_meta_query,get_product_meta_data)
		if product_meta_count > 0:
			product_meta_data = cursor.fetchone()  

			get_plan_by_product_meta_id_query = ("""SELECT p.`plan_description`,p.`plan_short_description`,eb.`emi_bank_name`,p.`validity_date_from`,p.`validity_date_to`
													FROM `product_plan_mapping` ppm
													INNER JOIN `plan` p ON p.`plan_id` = ppm.`plan_id` 
													INNER JOIN `emi_bank` eb ON eb.`emi_bank_id` = p.`emi_bank_id`
													where ppm.`product_meta_id` = %s and ppm.`organisation_id` = %s""")
			get_plan_by_product_meta_id_data = (product_meta_data['product_meta_id'],organisation_id)
			plan_count = cursor.execute(get_plan_by_product_meta_id_query,get_plan_by_product_meta_id_data)

			if plan_count > 0:
				plan_data =  cursor.fetchall()

				for key,data in enumerate(plan_data):
					plan_data[key]['validity_date_from'] = str(data['validity_date_from'])
					plan_data[key]['validity_date_to'] = str(data['validity_date_to'])  

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"plan_data":plan_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMappingwithAnalysiForWeight/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMappingwithAnalysiForWeight(product_id,product_meta_code,user_id,language,organisation_id,wop):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = wop
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		if product_meta_code == 0:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()
		else:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pm.`product_meta_code` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,product_meta_code,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []
		Weight = []
		Weight_price = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])

			if  pdata['meta_key_value'] and "Weight" in  pdata['meta_key_value']:
				Weight.append(pdata['meta_key_value']['Weight'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
		product_data['Weight'] = unique(Weight)

		for weight in product_data['Weight']:
			get_weight_query = ("""SELECT `meta_key_value_id`
				FROM `meta_key_value_master` mkvm			
				WHERE mkvm.`meta_key_value` = %s""")
			get_weight_data = (weight)
			cursor.execute(get_weight_query,get_weight_data)
			weight_data = cursor.fetchone()

			
			get_price_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE p.`product_id` = %s and pom.`organisation_id` = %s and pm.`meta_key_text` = %s""")
			getdataprice = (product_id,organisation_id,weight_data['meta_key_value_id'])
			cursor.execute(get_price_query,getdataprice)
			product_price_data = cursor.fetchone()

			Weight_price.append(product_price_data['out_price'])

		product_data['Weight_price'] = Weight_price
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`status` = 1""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = wop
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s and o.`status` = 1""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = wop
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and pom.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]  

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMappingwithAnalysiForSize/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMappingwithAnalysiForSize(product_id,product_meta_code,user_id,language,organisation_id,wop):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = wop
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		if product_meta_code == 0:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()
		else:
			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pm.`product_meta_code` = %s and pom.`organisation_id` = %s""")
			getdata = (product_id,product_meta_code,organisation_id)
			cursor.execute(get_query,getdata)
			product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []
		Size = []
		Size_price = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])

			if  pdata['meta_key_value'] and "Size" in  pdata['meta_key_value']:
				Size.append(pdata['meta_key_value']['Size'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
		product_data['Size'] = unique(Size)

		for size in product_data['Size']:
			get_weight_query = ("""SELECT `meta_key_value_id`
				FROM `meta_key_value_master` mkvm			
				WHERE mkvm.`meta_key_value` = %s""")
			get_weight_data = (size)
			cursor.execute(get_weight_query,get_weight_data)
			weight_data = cursor.fetchone()

			
			get_price_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE p.`product_id` = %s and pom.`organisation_id` = %s and pm.`meta_key_text` = %s""")
			getdataprice = (product_id,organisation_id,weight_data['meta_key_value_id'])
			cursor.execute(get_price_query,getdataprice)
			product_price_data = cursor.fetchone()

			Size_price.append(product_price_data['out_price'])

		product_data['Size_price'] = Size_price
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`status` = 1""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = wop
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s and o.`status` = 1""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = wop
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and pom.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]  

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMappingwithAnalysisByWeight/<int:product_id>/<string:weight>/<int:user_id>/<string:language>/<int:organisation_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMappingwithAnalysisByWeight(product_id,weight,user_id,language,organisation_id,wop):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = wop
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		get_weight_query = ("""SELECT `meta_key_value_id`
				FROM `meta_key_value_master` mkvm			
				WHERE mkvm.`meta_key_value` = %s""")
		get_weight_data = (weight)
		cursor.execute(get_weight_query,get_weight_data)
		weight_data = cursor.fetchone()

		
		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s and pm.`meta_key_text` = %s""")
		getdata = (product_id,organisation_id,weight_data['meta_key_value_id'])
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()
		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []
		Weight = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])

			if  pdata['meta_key_value'] and "Weight" in  pdata['meta_key_value']:
				Weight.append(pdata['meta_key_value']['Weight'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
		product_data['Weight'] = unique(Weight)
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = wop
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = wop
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and pom.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]  

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-Details-withsuggestions-and-language---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/detailProductFromProductOrganisationMappingwithAnalysisBySize/<int:product_id>/<string:size>/<int:user_id>/<string:language>/<int:organisation_id>/<int:wop>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def detailProductFromProductOrganisationMappingwithAnalysisBySize(product_id,size,user_id,language,organisation_id,wop):

#@name_space.route("/detailProductFromProductOrganisationMapping/<int:product_id>/<int:product_meta_code>/<int:user_id>/<string:language>/<int:organisation_id>")	
#class detailProductFromProductOrganisationMapping(Resource):
	#def get(self,product_id,product_meta_code,user_id,language,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		connection_analytics = mysql_connection_analytics()
		cursor_analytics = connection_analytics.cursor()

		from_web_or_phone = wop
		customer_id = user_id
		last_update_id = organisation_id

		insert_query = ("""INSERT INTO `customer_product_analytics`(`customer_id`,`product_id`,`from_web_or_phone`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s)""")
		data = (customer_id,product_id,from_web_or_phone,organisation_id,last_update_id)
		cursor_analytics.execute(insert_query,data)

		get_size_query = ("""SELECT `meta_key_value_id`
				FROM `meta_key_value_master` mkvm			
				WHERE mkvm.`meta_key_value` = %s""")
		get_size_data = (size)
		cursor.execute(get_size_query,get_size_data)
		size_data = cursor.fetchone()

		
		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				WHERE p.`product_id` = %s and pom.`organisation_id` = %s and pm.`meta_key_text` = %s""")
		getdata = (product_id,organisation_id,size_data['meta_key_value_id'])
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()
		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

		get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
		get_out_price_data = (organisation_id, product_data['product_meta_id'])
		count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

		if count_out_price_data >0:
			out_price_data = cursor.fetchone()
			product_data['out_price'] = out_price_data['out_price']
		else:
			product_data['out_price'] = product_data['out_price']

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []
		Size = []

		for pkey,pdata in enumerate(product_meta_data):
			if  pdata['meta_key_value'] and "Storage" in  pdata['meta_key_value']:
				Storage.append(pdata['meta_key_value']['Storage'])			
			if  pdata['meta_key_value'] and "Ram" in  pdata['meta_key_value']:
				Ram.append(pdata['meta_key_value']['Ram'])

			if  pdata['meta_key_value'] and "Size" in  pdata['meta_key_value']:
				Size.append(pdata['meta_key_value']['Size'])
			
		product_data['Storage'] = unique(Storage)			
		product_data['Ram'] = unique(Ram)
		product_data['Size'] = unique(Size)
				

		image_a = []	
		image_gallery_a = []

		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `is_gallery` <> 1 ORDER BY default_image_flag DESC""")
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_images_gallery = ("""SELECT `image`
					FROM `product_meta_images` WHERE `product_meta_id` = %s and `image_type` = 1 and `is_gallery` = 1 ORDER BY default_image_flag DESC""")
		getdata_images_gallery = (product_data['product_meta_id'])
		cursor.execute(get_query_images_gallery,getdata_images_gallery)
		print(cursor._last_executed)
		images_gallery = cursor.fetchall()

		for image_gallery in images_gallery:
			image_gallery_a.append(image_gallery['image'])

		product_data['gellery_image'] = image_gallery_a

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		product_meta_offer_mapping_query = (""" SELECT *
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'])
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['absolute_price'] = product_meta_offer_data['absolute_price']
			product_data['is_online'] =  product_meta_offer_data['is_online']
			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']
			product_data['discount_value'] = product_meta_offer_data['discount_value']
			product_data['coupon_code'] = product_meta_offer_data['coupon_code']
			product_data['instruction'] = product_meta_offer_data['instruction']
			product_data['is_product_meta_offer`'] = product_meta_offer_data['is_product_meta_offer']

			customer_id = user_id
			offer_id = product_meta_offer_data['offer_id']
			from_web_or_phone = wop
			organisation_id = organisation_id				

			offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
					`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
					%s,%s,%s)""")
			offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
					from_web_or_phone,organisation_id))

		else:
			get_product_offer_query = 	 ("""SELECT *
					FROM `product_offer_mapping` pom
					INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
					WHERE pom.`product_id` = %s and pom.`organisation_id` = %s""")
			get_product_offer_data = (product_id,organisation_id)
			rows_count_product_offer = cursor.execute(get_product_offer_query,get_product_offer_data)
			if rows_count_product_offer > 0:
				product_offer_data = cursor.fetchone()
				product_data['absolute_price'] = product_offer_data['absolute_price']
				product_data['is_online'] =  product_offer_data['is_online']
				product_data['discount_percentage'] = product_offer_data['discount_percentage']
				product_data['discount_value'] = product_offer_data['discount_value']
				product_data['coupon_code'] = product_offer_data['coupon_code']
				product_data['instruction'] = product_offer_data['instruction']

				customer_id = user_id
				offer_id = product_offer_data['offer_id']
				from_web_or_phone = wop
				organisation_id = organisation_id				

				offerviewquery = ("""INSERT INTO `customer_offer_analytics`(`customer_id`,
						`offer_id`, `from_web_or_phone`, `organisation_id`) VALUES (%s,
						%s,%s,%s)""")
				offerviewdata = cursor_analytics.execute(offerviewquery,(customer_id,offer_id,
						from_web_or_phone,organisation_id))
			
			else:
				product_data['absolute_price'] = 0
				product_data['discount_percentage'] = 0
				product_data['discount_value'] = 0
				product_data['coupon_code'] = ""
				product_data['is_online'] = 0
				product_data['instruction'] = ""

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")
		getFavData = (product_data['product_meta_id'],user_id,organisation_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
		getCartData = (product_data['product_meta_id'],user_id,organisation_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		#get_stock = ("""SELECT pi.`stock` 
				#FROM `user_retailer_mapping` urm 
				#INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				#WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		#getstockData = (user_id,product_data['product_meta_id'],organisation_id)
		#count_stock = cursor.execute(get_stock,getstockData)

		#if count_stock > 0:
			#stock_data = cursor.fetchone()
			#product_data['stock_count'] = stock_data['stock']
			#product_data['stock'] = "In Stock"
		#else:
			#product_data['stock_count'] = 0
			#product_data['stock'] = "Out Of Stock"

		get_retailer_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_store_id` = urm.`retailer_store_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s and urm.`organisation_id` = %s""")
		getretailerstockData = (user_id,product_data['product_meta_id'],organisation_id)
		count_retailer_stock = cursor.execute(get_retailer_stock,getretailerstockData)

		if count_retailer_stock > 0:
			retailer_stock_data = cursor.fetchone()
			product_data['stock_count'] = retailer_stock_data['stock']
			product_data['stock'] = "In Stock"
		else:
			product_data['stock_count'] = 0
			product_data['stock'] = "Out Of Stock"

		product_meta_offer_mapping_query = (""" SELECT `discount_percentage`
						FROM `product_meta_offer_mapping` pmom
						INNER JOIN `offer` o ON o.`offer_id` = pmom.`offer_id` 
						where  pmom.`organisation_id` = %s and `product_id` = %s and `product_meta_id` = %s and o.`organisation_id` = %s""")
		product_meta_offer_mapping_data = (organisation_id,product_id,product_data['product_meta_id'],organisation_id)
		count_product_meta_offer_mapping_data = cursor.execute(product_meta_offer_mapping_query,product_meta_offer_mapping_data)

		if count_product_meta_offer_mapping_data > 0:
			product_meta_offer_data = cursor.fetchone()

			product_data['discount_percentage'] = product_meta_offer_data['discount_percentage']

			discount_offer = (product_data['out_price']/100)*product_meta_offer_data['discount_percentage']
			actual_amount = product_data['out_price'] - discount_offer
			product_data['after_discounted_offer_price'] = round(actual_amount,2)

		else:

			get_query_offer_discount = ("""SELECT `discount_percentage`
										FROM `product_offer_mapping` pom
										INNER JOIN `offer` o ON o.`offer_id` = pom.`offer_id`
										WHERE `product_id` = %s and pom.`organisation_id` = %s and o.`organisation_id` = %s""")
			getdata_discount_offer = (product_id,organisation_id,organisation_id)
			count_offer_dicscount = cursor.execute(get_query_offer_discount,getdata_discount_offer)
			print(cursor._last_executed)

			if count_offer_dicscount > 0:
				product_offer_discount = cursor.fetchone()
				product_data['discount_percentage'] = product_offer_discount['discount_percentage']

				discount_offer = (product_data['out_price']/100)*product_offer_discount['discount_percentage']
				actual_amount = product_data['out_price'] - discount_offer
				product_data['after_discounted_offer_price'] = round(actual_amount,2)

			else:
				product_data['discount_percentage'] = 0
				product_data['after_discounted_offer_price'] = product_data['out_price']

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		get_suggested_product_query = ("""SELECT ps.`product_id`,ps.`product_name`,ps.`product_long_description`,ps.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `suggested_product_mapping` sp		
				LEFT JOIN `product` ps ON ps.`product_id` = sp.`suggested_product_id`
				LEFT JOIN `product` p ON p.`product_id` = sp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`	
				WHERE sp.`product_id` = %s and sp.`suggestion_type` = 1 and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s """)
		suggested_product_status = 1
		get_suggested_product_data = (product_id,suggested_product_status,language,organisation_id)
		cursor.execute(get_suggested_product_query,get_suggested_product_data)
		suggested_product_data = cursor.fetchall()

		for key,data in enumerate(suggested_product_data):

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				suggested_product_data[key]['met_key_value'] = met_key
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_suggested_product = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				suggested_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				suggested_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				suggested_product_data[key]['discount'] = 0
				suggested_product_data[key]['after_discounted_price'] = data['out_price']

			suggested_product_data[key]['rating'] = 4.3

			if count_suggested_product > 0:

				suggested_product_data[key]['image'] = product_image['image']
			else:
				suggested_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				suggested_product_data[key]['is_favourite'] = "y"
			else:
				suggested_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				suggested_product_data[key]['is_cart'] = "y"
			else:
				suggested_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				suggested_product_data[key]['stock'] = "In Stock"
			else:
				suggested_product_data[key]['stock'] = "Out Of Stock"

		min_price = product_data['out_price'] - 2000
		max_price = product_data['out_price'] + 2000 

		get_compare_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`other_specification_json`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
			WHERE pm.`out_price` > %s and pm.`out_price` < %s and p.`language` = %s and pom.`organisation_id` = %s limit 3""")

		get_compare_product_data = (min_price,max_price,language,organisation_id)
		cursor.execute(get_compare_product_query,get_compare_product_data)
		compare_product_data = cursor.fetchall()

		for key,data in enumerate(compare_product_data):			
			if data['other_specification_json'] == '0':
				compare_product_data[key]['other_specification_json'] = {}
			else:
				other_specification_json_1 = json.loads(data['other_specification_json'])
				compare_product_data[key]['other_specification_json']= other_specification_json_1
				

			a_string = data['meta_key_text']
			a_list = a_string.split(',')

			met_key = []

			for a in a_list:
				get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
								FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
				getdata_key_value = (a)
				cursor.execute(get_query_key_value,getdata_key_value)
				met_key_value_data = cursor.fetchone()

				get_query_key = ("""SELECT `meta_key`
								FROM `meta_key_master` WHERE `meta_key_id` = %s """)
				getdata_key = (met_key_value_data['meta_key_id'])
				cursor.execute(get_query_key,getdata_key)
				met_key_data = cursor.fetchone()

				met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

				compare_product_data[key]['met_key_value'] = met_key

			get_out_price_query_for_compare_product = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
			get_out_price_data_for_compare_product = (organisation_id, data['product_meta_id'])
			count_out_price_data_for_compare_product = cursor.execute(get_out_price_query_for_compare_product,get_out_price_data_for_compare_product)

			if count_out_price_data_for_compare_product >0:
				out_price_data_for_compare_product = cursor.fetchone()
				compare_product_data[key]['out_price'] = out_price_data_for_compare_product['out_price']
			else:
				compare_product_data[key]['out_price'] = data['out_price']
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_product_image = cursor.execute(get_query_image,getdata_image)

			if count_product_image > 0:
				product_image = cursor.fetchone()
				compare_product_data[key]['image'] = product_image['image']
			else:
				compare_product_data[key]['image'] = ""

			get_query_discount = ("""SELECT `discount`
										FROM `product_meta_discount_mapping` pdm
										INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
										WHERE `product_meta_id` = %s """)
			getdata_discount = (data['product_meta_id'])
			count_dicscount = cursor.execute(get_query_discount,getdata_discount)

			if count_dicscount > 0:
				product_meta_discount = cursor.fetchone()
				compare_product_data[key]['discount'] = product_meta_discount['discount']

				discount = (data['out_price']/100)*product_meta_discount['discount']
				actual_amount = data['out_price'] - discount

				compare_product_data[key]['after_discounted_price'] = round(actual_amount,2)  
			else:
				compare_product_data[key]['discount'] = 0
				compare_product_data[key]['after_discounted_price'] = data['out_price']

			compare_product_data[key]['rating'] = 4.3

			

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				compare_product_data[key]['is_favourite'] = "y"
			else:
				compare_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				compare_product_data[key]['is_cart'] = "y"
			else:
				compare_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				compare_product_data[key]['stock'] = "In Stock"
			else:
				compare_product_data[key]['stock'] = "Out Of Stock"


		offer_data = 	[]  

		get_protection_product_query = ("""SELECT pp.`product_id`,pp.`product_name`,pp.`product_long_description`,pp.`product_short_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
				FROM `product_protection_plan_mapping` ppp		
				LEFT JOIN `product` pp ON pp.`product_id` = ppp.`protection_product_id`
				LEFT JOIN `product` p ON p.`product_id` = ppp.`product_id`
				INNER JOIN `product_meta` pm ON pm.`product_id` = ppp.`protection_product_id`
				INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = pp.`product_id`	
				WHERE ppp.`product_id` = %s and p.`status` = %s and p.`language` = %s and pom.`organisation_id` = %s""")
		protection_product_status = 1
		get_protection_product_data = (product_id,protection_product_status,language,organisation_id)
		cursor.execute(get_protection_product_query,get_protection_product_data)
		protection_product_data = cursor.fetchall()		

		for key,data in enumerate(protection_product_data):			
			
			get_query_image = ("""SELECT `image`
										FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
			getdata_image = (data['product_meta_id'])
			count_image = cursor.execute(get_query_image,getdata_image)
			product_image = cursor.fetchone()			

			protection_product_data[key]['rating'] = 4.3

			if count_image > 0:
				protection_product_data[key]['image'] = product_image['image']
			else:
				protection_product_data[key]['image'] = ""

			
			get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

			getFavData = (data['product_meta_id'],user_id,organisation_id)
			
			count_fav_product = cursor.execute(get_favourite,getFavData)

			if count_fav_product > 0:
				protection_product_data[key]['is_favourite'] = "y"
			else:
				protection_product_data[key]['is_favourite'] = "n"

			get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
			getCartData = (data['product_meta_id'],user_id,organisation_id)
			count_cart_product = cursor.execute(get_cart,getCartData)

			if count_cart_product > 0:
				protection_product_data[key]['is_cart'] = "y"
			else:
				protection_product_data[key]['is_cart'] = "n"


			get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
			getstockData = (user_id,data['product_meta_id'])

			count_stock = cursor.execute(get_stock,getstockData)

			if count_stock > 0:
				protection_product_data[key]['stock'] = "In Stock"
			else:
				protection_product_data[key]['stock'] = "Out Of Stock"	

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":{"product_details":product_data,"suggestedProduct":suggested_product_data,"compareProduct":compare_product_data,"offer_data":offer_data,"protection_product_data":protection_product_data}}), status.HTTP_200_OK

#----------------------Product-Details-withsuggestions-and-language---------------------#

#----------------------Product-List---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/getProductListWithMeta/<int:product_id>/<int:user_id>/<string:storage>/<string:ram>/<int:organisation_id>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def getProductListWithMeta(product_id,user_id,storage,ram,organisation_id):

#@name_space.route("/getProductListWithMeta/<int:product_id>/<int:user_id>/<string:storage>/<string:ram>/<int:organisation_id>")	
#class getProductListWithMeta(Resource):
	#def get(self,product_id,user_id,storage,ram,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()	

		meta_keys = ["Storage","Color","Ram"]

		get_meta_query = ("""SELECT DISTINCT pm.`meta_key_text`
			FROM `product_meta` pm
			WHERE pm.`product_id` = %s """)
		getmetadata = (product_id)
		cursor.execute(get_meta_query,getmetadata)
		product_meta_data = cursor.fetchall()
		

		for key,data in enumerate(product_meta_data):
			a_string_meta = data['meta_key_text']
			a_list_meta = a_string_meta.split(',')			

			met_key_meta = {}

			for a_meta in a_list_meta:

				get_query_key_value_meta = ("""SELECT mkvm.`meta_key_id`,mkvm.`meta_key_value`,mkm.`meta_key`,mkvm.`meta_key_value_id`
					FROM `meta_key_value_master` mkvm 
					INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
					WHERE `meta_key_value_id` = %s """)
				getdata_key_value_meta = (a_meta)
				cursor.execute(get_query_key_value_meta,getdata_key_value_meta)
				met_key_value_data_meta = cursor.fetchone()				

				met_key_meta[met_key_value_data_meta['meta_key']] = met_key_value_data_meta['meta_key_value_id']

			product_meta_data[key]['meta_key_value'] = met_key_meta

		print(product_meta_data)
		Storage = []
		Color = []
		Ram = []

		for pkey,pdata in enumerate(product_meta_data):						
			if  pdata['meta_key_value'] and "Color" in  pdata['meta_key_value']:
				Color.append(pdata['meta_key_value']['Color'])
			
		#product_data['Storage'] = unique(Storage)			
		#product_data['Ram'] = unique(Ram)

		Colors =  unique(Color)

		

		new_data = []

		print(Colors)

		for color_meta in Colors:				
							
			meta_key_text = []

			for meta_key in meta_keys:

				if meta_key == "Storage" and storage != "na":

					get_meta_query = ("""SELECT `meta_key_id`,`meta_key` FROM `meta_key_master`
										 WHERE  `meta_key` LIKE %s and `organisation_id` = %s """)
					getmetadata = (meta_key,1)
					count_meta_data = cursor.execute(get_meta_query,getmetadata)
					
					search_meta = cursor.fetchone()
					get_meta_value_query = ("""SELECT `meta_key_value_id` FROM `meta_key_value_master` WHERE `meta_key_id` = %s
							 and `organisation_id` = %s and `status` = 1 and `meta_key_value` = %s""")
					getdata_meta_data = (search_meta['meta_key_id'],1,storage)
					cursor.execute(get_meta_value_query,getdata_meta_data)

					meta_value_data = cursor.fetchone()

					meta_key_text.append(str(meta_value_data['meta_key_value_id']))	
				

				if meta_key == "Color":				

					meta_key_text.append(str(color_meta))

				if meta_key == "Ram" and ram != "na":

					get_meta_query = ("""SELECT `meta_key_id`,`meta_key` FROM `meta_key_master`
										 WHERE  `meta_key` LIKE %s and `organisation_id` = %s """)
					getmetadata = (meta_key,1)
					count_meta_data = cursor.execute(get_meta_query,getmetadata)
					
					search_meta = cursor.fetchone()
					get_meta_value_query = ("""SELECT `meta_key_value_id` FROM `meta_key_value_master` WHERE `meta_key_id` = %s
							 and `organisation_id` = %s and `status` = 1 and `meta_key_value` = %s""")
					getdata_meta_data = (search_meta['meta_key_id'],1,ram)
					cursor.execute(get_meta_value_query,getdata_meta_data)

					meta_value_data = cursor.fetchone()

					meta_key_text.append(str(meta_value_data['meta_key_value_id']))
		
			smeta_key_text = ","		
			smeta_key_text = smeta_key_text.join(meta_key_text) 

			#meta_key_text.append(meta_value_data['meta_key_value_id'])

			print(smeta_key_text)


			get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_long_description`,
				pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
				FROM `product` p
				INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				WHERE p.`status` = 1 and p.`product_id` = %s and pm.`meta_key_text` = %s""")
			get_data = (product_id,smeta_key_text)
			product_count = cursor.execute(get_query,get_data)

			product_data = cursor.fetchall()

			#print(product_data)

			if product_count >0 :
				print("hello")

				for key,data in enumerate(product_data):

					get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
					getdata_image = (data['product_meta_id'])
					product_image_count = cursor.execute(get_query_image,getdata_image)

					if product_image_count >0 :
						product_image = cursor.fetchone()
						product_data[key]['image'] = product_image['image']
					else:
						product_data[key]['image'] = ""

					get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
					getdata_discount = (data['product_meta_id'])
					count_dicscount = cursor.execute(get_query_discount,getdata_discount)

					if count_dicscount > 0:
						product_meta_discount = cursor.fetchone()
						product_data[key]['discount'] = product_meta_discount['discount']

						discount = (data['out_price']/100)*product_meta_discount['discount']
						actual_amount = data['out_price'] - discount

						product_data[key]['after_discounted_price'] = round(actual_amount ,2) 
					else:
						product_data[key]['discount'] = 0
						product_data[key]['after_discounted_price'] = data['out_price']

					product_data[key]['rating'] = 4.3

					

					
					get_favourite = ("""SELECT `product_meta_id`
						FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

					getFavData = (data['product_meta_id'],user_id)
					
					count_fav_product = cursor.execute(get_favourite,getFavData)

					if count_fav_product > 0:
						product_data[key]['is_favourite'] = "y"
					else:
						product_data[key]['is_favourite'] = "n"

					get_cart = ("""SELECT `product_meta_id`
						FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
					getCartData = (data['product_meta_id'],user_id)
					count_cart_product = cursor.execute(get_cart,getCartData)

					if count_cart_product > 0:
						product_data[key]['is_cart'] = "y"
					else:
						product_data[key]['is_cart'] = "n"

					get_stock = ("""SELECT pi.`stock` 
						FROM `user_retailer_mapping` urm 
						INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
						WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
					getstockData = (user_id,data['product_meta_id'])

					count_stock = cursor.execute(get_stock,getstockData)

					if count_stock > 0:
						product_data[key]['stock'] = "In Stock"
					else:
						product_data[key]['stock'] = "Out Of Stock"

					a_string = data['meta_key_text']
					a_list = a_string.split(',')

					met_key = []

					for a in a_list:
						get_query_key_value = ("""SELECT mkvm.`meta_key_id`,`meta_key_value`,mkm.`meta_key` 
							FROM `meta_key_value_master` mkvm 
							INNER JOIN `meta_key_master` mkm ON mkvm.`meta_key_id` = mkm.`meta_key_id`
							WHERE `meta_key_value_id` = %s """)
						getdata_key_value = (a)
						cursor.execute(get_query_key_value,getdata_key_value)
						met_key_value_data = cursor.fetchone()

						met_key.append({met_key_value_data['meta_key']:met_key_value_data['meta_key_value']})

						product_data[key]['met_key_value'] = met_key
						
					new_data.append(product_data[key])

					print(new_data)

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":new_data}), status.HTTP_200_OK

#----------------------Product-List---------------------#



def unique(list1): 
  
    # intilize a null list 
    unique_list = [] 
      
    # traverse for all elements 
    for x in list1: 
        # check if exists in unique_list or not 
        if x not in unique_list: 
            unique_list.append(x) 
    # print list 
    return unique_list

#----------------------Product-Details-with-Video---------------------#
@name_space.route("/productDetailsWithVideo/<int:product_id>/<int:product_meta_code>/<int:user_id>")	
class productDetailsWithVideo(Resource):
	def get(self,product_id,product_meta_code,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_long_description`,p.`product_short_description`,
			pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`,pm.`loyalty_points`
			FROM `product` p
			INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
			WHERE p.`product_id` = %s and `product_meta_code` = %s""")
		getdata = (product_id,product_meta_code)
		cursor.execute(get_query,getdata)
		product_data = cursor.fetchone()

		
		a_string = product_data['meta_key_text']
		a_list = a_string.split(',')
			
		met_key = []
		for a in a_list:
			get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
			getdata_key_value = (a)
			cursor.execute(get_query_key_value,getdata_key_value)
			met_key_value_data = cursor.fetchone()

			get_query_key = ("""SELECT `meta_key`
							FROM `meta_key_master` WHERE `meta_key_id` = %s """)
			getdata_key = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_key,getdata_key)
			met_key_data = cursor.fetchone()

			met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

			product_data['met_key_value'] = met_key

			get_query_all_key_value = ("""SELECT `meta_key_id`,`meta_key_value`,`meta_key_value_id`
					FROM `meta_key_value_master` WHERE `meta_key_id` = %s """)
			getdata_all_key_value = (met_key_value_data['meta_key_id'])
			cursor.execute(get_query_all_key_value,getdata_all_key_value)
			met_key_value_all_data = cursor.fetchall()

				#product_meta[key][met_key_data['meta_key']] = met_key_value_all_data
			met_key_value_all_data_new = []		

			for key_all,met_key_value_all_data_one in  enumerate(met_key_value_all_data):
				met_key_value_all_data_new.append({met_key_value_all_data_one['meta_key_value_id']:met_key_value_all_data_one['meta_key_value']})

			product_data[met_key_data['meta_key']] = met_key_value_all_data_new

		image_a = []	
		get_query_images = ("""SELECT `image`,`image_type`
					FROM `product_meta_images` WHERE `product_meta_id` = %s """)
		getdata_images = (product_data['product_meta_id'])
		cursor.execute(get_query_images,getdata_images)
		images = cursor.fetchall()

		for image in images:
			image_a.append(image['image'])

		product_data['images'] = images

		get_query_discount = ("""SELECT `discount`
									FROM `product_meta_discount_mapping` pdm
									INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
									WHERE `product_meta_id` = %s """)
		getdata_discount = (product_data['product_meta_id'])
		count_dicscount = cursor.execute(get_query_discount,getdata_discount)

		if count_dicscount > 0:
			product_meta_discount = cursor.fetchone()
			product_data['discount'] = product_meta_discount['discount']

			discount = (product_data['out_price']/100)*product_meta_discount['discount']
			actual_amount = product_data['out_price'] - discount
			product_data['after_discounted_price'] = round(actual_amount,2)

		else:
			product_data['discount'] = 0
			product_data['after_discounted_price'] = product_data['out_price']

		get_favourite = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)
		getFavData = (product_data['product_meta_id'],user_id)
		count_fav_product = cursor.execute(get_favourite,getFavData)

		if count_fav_product > 0:
			product_data['is_favourite'] = "y"
		else:
			product_data['is_favourite'] = "n"

		get_cart = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
		getCartData = (product_data['product_meta_id'],user_id)
		count_cart_product = cursor.execute(get_cart,getCartData)

		if count_cart_product > 0:
			product_data['is_cart'] = "y"
		else:
			product_data['is_cart'] = "n"
		

		product_data['rating'] = 4.3

		get_stock = ("""SELECT pi.`stock` 
				FROM `user_retailer_mapping` urm 
				INNER JOIN `product_inventory` pi ON pi.`retailer_store_id` = urm.`retailer_id` 
				WHERE urm.`user_id` = %s and pi.`product_meta_id` = %s""")
		getstockData = (user_id,product_data['product_meta_id'])
		count_stock = cursor.execute(get_stock,getstockData)

		if count_stock > 0:
			product_data['stock'] = "In Stock"
		else:
			product_data['stock'] = "Out Of Stock"

		get_address_query = ("""SELECT `address_line_1`,`address_line_2`,`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE `admin_id` = %s""")
		getAddressData = (user_id)
		cursor.execute(get_address_query,getAddressData)

		address_data = cursor.fetchone()

		product_data['address'] = address_data

		return ({"attributes": {
		    		"status_desc": "product_details",
		    		"status": "success"
		    	},
		    	"responseList":product_data}), status.HTTP_200_OK

#----------------------Product-Details-with-Video---------------------#

#----------------------Add-To-Cart---------------------#
@name_space.route("/addProductToCart")	
class addProductToCart(Resource):
	@api.expect(add_to_cart_postmodel)
	def post(self):	

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		product_meta_id = details['product_meta_id']
		customer_id = details['customer_id']
		organisation_id = details['organisation_id']
		last_update_id = 1
		product_status = "c"
		customer_prodcut_status = 1
		
		product_status = "c"
		get_query = ("""SELECT `product_meta_id`
			FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and `product_status` = %s """)

		getData = (product_meta_id,customer_id,product_status)
			
		count_product = cursor.execute(get_query,getData)

		if count_product > 0:

			connection.commit()
			cursor.close()

			return ({"attributes": {
				    	"status_desc": "customer_product_details",
				    	"status": "error"
				    },
				    "responseList":"Product Already Exsits" }), status.HTTP_200_OK

		else:

			insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")

			data = (customer_id,product_meta_id,product_status,customer_prodcut_status,organisation_id,last_update_id)
			cursor.execute(insert_query,data)		

			mapping_id = cursor.lastrowid
			details['mapping_id'] = mapping_id

			qty = 1
			qty_status = 1

			insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s)""")
			data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
			cursor.execute(insert_qty_query,data_qty)
			
			get_query_count = ("""SELECT `product_meta_id`
				FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_status` = %s and `organisation_id` = %s""")

			getDataCount = (customer_id,product_status,organisation_id)
				
			count_product = cursor.execute(get_query_count,getDataCount)

			connection.commit()
			cursor.close()

			return ({"attributes": {
					    		"status_desc": "customer_product_details",
					    		"status": "success"
					    	},
					    	"responseList":{"cart_count":count_product}}), status.HTTP_200_OK


#----------------------Add-To-Cart---------------------#

#----------------------Add-To-Cart-With-qty---------------------#
@name_space.route("/addProductToCartWithQty")	
class addProductToCartWithQty(Resource):
	@api.expect(add_to_cart_postmodel_with_qty)
	def post(self):	

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		product_meta_id = details['product_meta_id']
		customer_id = details['customer_id']
		organisation_id = details['organisation_id']
		last_update_id = 1
		product_status = "c"
		customer_prodcut_status = 1

		input_qty = details['qty']
		
		product_status = "c"
		get_query = ("""SELECT `product_meta_id`,`mapping_id`
			FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and `product_status` = %s """)

		getData = (product_meta_id,customer_id,product_status)
			
		count_product = cursor.execute(get_query,getData)

		if count_product > 0:
			customer_product = cursor.fetchone()

			get_customer_product_qty_query = ("""SELECT `qty`
			FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

			getCustomerProductQtyData = (customer_product['mapping_id'])
			
			customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

			if customerProductQtyCount > 0 :				

				customerProductQtyData = cursor.fetchone()

				qty = customerProductQtyData['qty'] +input_qty

				customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
					WHERE `customer_mapping_id` = %s""")
				update_qty_data = (qty,customer_product['mapping_id'])
				cursor.execute(customer_product_update_qty_query,update_qty_data)

		else:

			insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")

			data = (customer_id,product_meta_id,product_status,customer_prodcut_status,organisation_id,last_update_id)
			cursor.execute(insert_query,data)		

			mapping_id = cursor.lastrowid
			details['mapping_id'] = mapping_id

			qty = input_qty
			qty_status = 1

			insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s)""")
			data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
			cursor.execute(insert_qty_query,data_qty)

			
		get_query_count = ("""SELECT COALESCE(sum(cpmq.`qty`),0) as cart_count  
			FROM `customer_product_mapping` cpm 
			INNER JOIN `customer_product_mapping_qty`cpmq ON cpmq.`customer_mapping_id` = cpm.`mapping_id` 
			WHERE cpm.`customer_id` = %s and cpm.`product_status` = %s and cpm.`organisation_id` = %s and cpmq.`organisation_id` = %s""")

		getDataCount = (customer_id,product_status,organisation_id,organisation_id)
				
		count_product = cursor.execute(get_query_count,getDataCount)

		if count_product > 0:
			cart_count_data = cursor.fetchone()
			cart_count = cart_count_data['cart_count']
		else:
			cart_count = 0

		connection.commit()
		cursor.close()

		return ({"attributes": {
					    		"status_desc": "customer_product_details",
					    		"status": "success"
					    	},
					    	"responseList":{"cart_count":int(cart_count)}}), status.HTTP_200_OK


#----------------------Add-To-Cart---------------------#

#----------------------Apply-Cupon---------------------#

@name_space.route("/applyCoupon")	
class applyCupon(Resource):
	@api.expect(apply_cupon_postmodel)
	def post(self):	

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		coupon_code = details['coupon_code']
		organisation_id = details['organisation_id']


		get_query = ("""SELECT `coupon_code`
			FROM `offer` WHERE  `coupon_code` = %s and organisation_id = %s""")

		getData = (coupon_code,organisation_id)
			
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()


			return ({"attributes": {
					"status_desc": "coupon_details",
					"status": "success"
				},
					"responseList":data}), status.HTTP_200_OK
		else:

			return ({"attributes": {
			    		"status_desc": "coupon_details",
			    		"status": "error",
			    		"message":"Invalid Coupon"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK

#----------------------Apply-Cupon---------------------#


#----------------------Delete-cart-Item---------------------#

@name_space.route("/deleteCartItem/<int:cart_id>")
class deleteFolderCourse(Resource):
	def delete(self, cart_id):
		connection = mysql_connection()
		cursor = connection.cursor()
		
		delete_cart_query = ("""DELETE FROM `customer_product_mapping` WHERE `mapping_id` = %s """)
		delcartData = (cart_id)
		
		cursor.execute(delete_cart_query,delcartData)

		delete_cart_qty_query = ("""DELETE FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s """)
		delcartqtyData = (cart_id)
		
		cursor.execute(delete_cart_qty_query,delcartqtyData)

		connection.commit()
		cursor.close()
		
		return ({"attributes": {"status_desc": "Delete Cart",
								"status": "success"},
				"responseList": 'Deleted Successfully'}), status.HTTP_200_OK

#----------------------Delete-Folder-Course---------------------#

#----------------------Update-Cart-Item---------------------#

@name_space.route("/UpdateCartItem/<int:cart_id>")
class UpdateCartItem(Resource):
	@api.expect(cart_putmodel)
	def put(self,cart_id):
		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()

		qty = details['qty']
		update_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
				WHERE `customer_mapping_id` = %s """)
		update_data = (qty,cart_id)
		cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update Cart Item",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK


#----------------------Update-Cart-Item---------------------#

#----------------------Save-Order---------------------#
@name_space.route("/saveOrder")
class saveOrder(Resource):
	@api.expect(save_order)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = details['purpose']
		coupon_code = details['coupon_code']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		select_product_status = "c"

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 3

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_option = ""

		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			prebookLoyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()


		get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
			FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_status` = %s and `organisation_id` = %s""")

		geCustomerProductData = (user_id,select_product_status,organisation_id)
			
		customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

		if customerProductCount > 0:

			customerProductData = cursor.fetchall()			

			initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")

			initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)

			cursor.execute(initiatePaymentQuery,initiateData)

			transaction_id = cursor.lastrowid

			for key,data in enumerate(customerProductData):
				product_status = "o"
				customer_product_update_query = ("""UPDATE `customer_product_mapping` SET `product_status` = %s
					WHERE `product_meta_id` = %s and `product_status` = %s and `organisation_id` = %s""")
				update_data = (product_status,data['product_meta_id'],select_product_status,organisation_id)
				cursor.execute(customer_product_update_query,update_data)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,data['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
				loyalityData = {
						"customer_id":user_id,
						"product_meta_id":data['product_meta_id'],
						"organisation_id": organisation_id
				}

				loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()	

			get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getData = (user_id)
				
			count = cursor.execute(get_query,getData)

			if count >0:

				data = cursor.fetchone()

				URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

				headers = {'Content-type':'application/json', 'Accept':'application/json'}

				payload = {
							"amount":amount,
							"purpose":purpose,
							"buyer_name":data['first_name']+' '+data['last_name'],
							"email":data['email'],
							"phone":data['phoneno'],
							"user_id":user_id,
							"transaction_id":transaction_id,
							"coupon_code":coupon_code,
							"organisation_id" : organisation_id,
							"order_payment_status":order_payment_status,
							"delivery_option":delivery_option,
							"delivery_charges":delivery_charges

						}

				mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()

				if mojoResponse['responseList']['transactionId']:
					createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
					payloadData = {
							"user_id":user_id,
							"transaction_id":mojoResponse['responseList']['transactionId']							
					}

					send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

					get_user_device_query = ("""SELECT `device_token`
								FROM `devices` WHERE  `user_id` = %s""")

					get_user_device_data = (user_id)
					device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

					if device_token_count > 0:
						device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
								FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
						payloadpushData = {
							"device_id":device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key'],
							"update_status":"Complete"
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

					get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
								`city`,`country`,`state`,`pincode`
					FROM `admins` WHERE  `admin_id` = %s""")
					getUserData = (user_id)
					countUser = cursor.execute(get_user_query,getUserData)

					if countUser > 0:
						customer_data = cursor.fetchone()
						send_sms(customer_data['phoneno'])

					for key,data in enumerate(customerProductData):	
						product_loyality_point_query = 	("""SELECT `loyalty_points`
							FROM `product_meta` WHERE  `product_meta_id` = %s """)
						getProductLoyaltyData = (data['product_meta_id'])
				
						productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

						'''if productLoyaltyCount > 0:
							productLoyalityData = cursor.fetchone()
							get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
							customer_wallet_data = (user_id)
							cursor.execute(get_customer_wallet_query,customer_wallet_data)
							wallet_data = cursor.fetchone()

							wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

							insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
								`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
							transaction_source = "product_loyalty"
							updated_value = wallet
							previous_value = 0
							wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

							cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


							update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
							update_customer_wallet_data = (updated_value,user_id)
							cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

							get_user_device_query = ("""SELECT `device_token`
									FROM `devices` WHERE  `user_id` = %s""")		
							get_user_device_data = (user_id)
							device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

							if device_token_count > 0:
								device_token_data = cursor.fetchone()
								get_organisation_firebase_query = ("""SELECT `firebase_key`
									FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
								get_organisation_firebase_data = (organisation_id)
								cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
								firebase_data = cursor.fetchone()

								headers = {'Content-type':'application/json', 'Accept':'application/json'}
								sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
								payloadpushData = {
									"device_id":device_token_data['device_token'],
									"firebase_key": firebase_data['firebase_key']
								}

								send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
				lifetimePurchaseLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
				}

				lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()				
								
				connection.commit()
				cursor.close()

				return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Cart Empty"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK

#----------------------Save-Order---------------------#

#----------------------Save-Order-With-R---------------------#
@name_space.route("/saveOrderWithR")
class saveOrderWithR(Resource):
	@api.expect(save_order_r)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = details['purpose']
		coupon_code = details['coupon_code']
		payment_id = details['payment_id']
		update_status = details['update_status']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		select_product_status = "c"

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 2

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_charges = ""

		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			prebookLoyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
			FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_status` = %s and `organisation_id` = %s""")

		geCustomerProductData = (user_id,select_product_status,organisation_id)
			
		customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

		if customerProductCount > 0:

			customerProductData = cursor.fetchall()			

			initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")

			initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)

			cursor.execute(initiatePaymentQuery,initiateData)

			transaction_id = cursor.lastrowid

			for key,data in enumerate(customerProductData):			


				product_status = "o"
				customer_product_update_query = ("""UPDATE `customer_product_mapping` SET `product_status` = %s
					WHERE `product_meta_id` = %s and `product_status` = %s and `organisation_id` = %s""")
				update_data = (product_status,data['product_meta_id'],select_product_status,organisation_id)
				cursor.execute(customer_product_update_query,update_data)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,data['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

				get_customer_product_qty_query = ("""SELECT `qty`
					FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

				getCustomerProductQtyData = (data['mapping_id'])
				
				customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

				if customerProductQtyCount > 0 :
					customerProductQtyData = cursor.fetchone()

					stock_management_settings_query = ("""SELECT * FROM stock_management_settings where `organisation_id` = %s""")
					stock_management_settings_data = (organisation_id)
					count_stock_management_settings = cursor.execute(stock_management_settings_query,stock_management_settings_data)

					if count_stock_management_settings > 0:
						stock_management_settings = cursor.fetchone()

						if stock_management_settings['setting_value'] == 1:
							get_retailer_id_query = (""" SELECT * FROM user_retailer_mapping where `organisation_id` = %s and `user_id` = %s""")
							retailer_id_data = (organisation_id,user_id)
							count_reatiler_id_data =  cursor.execute(get_retailer_id_query,retailer_id_data)

							if count_reatiler_id_data > 0:
								user_retailer_data = cursor.fetchone()

								update_stock_url = BASE_URL + "ecommerce_product_admin/EcommerceProductAdmin/updateStockwithBuy"
								headers = {'Content-type':'application/json', 'Accept':'application/json'}
								stockdata = {
											  "retailer_store_id": user_retailer_data['retailer_id'],
											  "stock": customerProductQtyData['qty'],
											  "product_meta_id": data['product_meta_id'],
											  "organisation_id": organisation_id,
											  "last_update_id": organisation_id
											}


								stockResponse = requests.put(update_stock_url,data=json.dumps(stockdata), headers=headers).json()

								print(stockResponse)

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
				loyalityData = {
						"customer_id":user_id,
						"product_meta_id":data['product_meta_id'],
						"organisation_id": organisation_id
				}

				loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()	

			get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getData = (user_id)
				
			count = cursor.execute(get_query,getData)

			if count >0:

				data = cursor.fetchone()

				URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

				headers = {'Content-type':'application/json', 'Accept':'application/json'}

				payload = {
							"amount":amount,
							"purpose":purpose,
							"buyer_name":data['first_name']+' '+data['last_name'],
							"email":data['email'],
							"phone":data['phoneno'],
							"user_id":user_id,
							"transaction_id":transaction_id,
							"coupon_code":coupon_code,
							"organisation_id" : organisation_id,
							"order_payment_status":order_payment_status,
							"delivery_option":delivery_option,
							"delivery_charges":delivery_charges
						}

				mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()

				if mojoResponse['responseList']['transactionId']:

					#update_status = 'Complete'
					payment_status = 'Credit'
					payment_request_id = mojoResponse['responseList']['transactionId']
		
					updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
						`payment_status` = %s,`payment_id`= %s, `status` = %s WHERE `transaction_id`= %s""")

					paymentData = (payment_status,payment_id,update_status,payment_request_id)

					cursor.execute(updatePaymentQuery,paymentData)

					get_instamojo_payemnt_request_details_query = ("""SELECT *
								FROM `instamojo_payment_request` WHERE  `transaction_id` = %s""")
					get_instamojo_payemnt_request_details_data = (mojoResponse['responseList']['transactionId'])
					cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

					instamojo_payment_data = cursor.fetchone()

					orderHistoryUrl =  BASE_URL + "order_historydtls/EcommerceOrderHistory/OderHistoryDetails"
					payloadDataOrderHistory = {
						  "order_product_id": instamojo_payment_data['request_id'],
						  "imageurl": "",
						  "retailer_remarks": "",
						  "updatedorder_status":instamojo_payment_data['status'],
						  "updatedpayment_status": instamojo_payment_data['payment_status'],
						  "updateduser_id": user_id,
						  "organisation_id": organisation_id
					}

					send_orderhistory = requests.post(orderHistoryUrl,data=json.dumps(payloadDataOrderHistory), headers=headers).json()

					createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
					payloadData = {
							"user_id":user_id,
							"transaction_id":mojoResponse['responseList']['transactionId']							
					}

					send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
					transactionLoyalityData = {
											"transaction_id":mojoResponse['responseList']['transactionId'],
											"customer_id":user_id,
											"organisation_id": organisation_id
										}		

					transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

					get_user_device_query = ("""SELECT `device_token`
								FROM `devices` WHERE  `user_id` = %s""")

					get_user_device_data = (user_id)
					device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

					if device_token_count > 0:
						device_token_data = cursor.fetchone()

						get_organisation_firebase_query = ("""SELECT `firebase_key`
								FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
						get_organisation_firebase_data = (organisation_id)
						cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
						firebase_data = cursor.fetchone()

						sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
						payloadpushData = {
							"device_id":device_token_data['device_token'],
							"firebase_key": firebase_data['firebase_key'],
							"update_status":update_status
						}

						send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

					get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
								`city`,`country`,`state`,`pincode`
					FROM `admins` WHERE  `admin_id` = %s""")
					getUserData = (user_id)
					countUser = cursor.execute(get_user_query,getUserData)

					if countUser > 0:
						customer_data = cursor.fetchone()
						send_sms(customer_data['phoneno'])

					for key,data in enumerate(customerProductData):	
						product_loyality_point_query = 	("""SELECT `loyalty_points`
							FROM `product_meta` WHERE  `product_meta_id` = %s """)
						getProductLoyaltyData = (data['product_meta_id'])
				
						productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

						'''if productLoyaltyCount > 0:
							productLoyalityData = cursor.fetchone()
							get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
							customer_wallet_data = (user_id)
							cursor.execute(get_customer_wallet_query,customer_wallet_data)
							wallet_data = cursor.fetchone()

							wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

							insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
								`updated_value`,`organisation_id`,`status`,`last_update_id`)
									VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
							transaction_source = "product_loyalty"
							updated_value = wallet
							previous_value = 0
							wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

							cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


							update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
														WHERE `admin_id` = %s """)
							update_customer_wallet_data = (updated_value,user_id)
							cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

							get_user_device_query = ("""SELECT `device_token`
									FROM `devices` WHERE  `user_id` = %s""")		
							get_user_device_data = (user_id)
							device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

							if device_token_count > 0:
								device_token_data = cursor.fetchone()
								get_organisation_firebase_query = ("""SELECT `firebase_key`
									FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
								get_organisation_firebase_data = (organisation_id)
								cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
								firebase_data = cursor.fetchone()

								headers = {'Content-type':'application/json', 'Accept':'application/json'}
								sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
								payloadpushData = {
									"device_id":device_token_data['device_token'],
									"firebase_key": firebase_data['firebase_key']
								}

								send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''

				get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

				getCustomerData = (user_id)
					
				countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

				if countCustomerData > 0 :
					cstomerData = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
					payloadpushData = {
							"title":"Request an order",
							"msg":cstomerData['phoneno']+" has initiated Order",
							"img": "",
							"organisation_id": organisation_id
					}

					sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
				lifetimePurchaseLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
				}

				lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()

				connection.commit()
				cursor.close()

				return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Cart Empty"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK

#----------------------Save-Order-With-R---------------------#


@name_space.route("/createInvoice")
class createInvoice(Resource):
	@api.expect(create_invoice)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()
		data = {}

		get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
		getUserData = (details['user_id'])
		countUser = cursor.execute(get_user_query,getUserData)

		if countUser > 0:
			customer_data = cursor.fetchone()
			data['customer_data'] = customer_data
		else:
			data['customer_data'] = ""

		get_transaction_query = ("""SELECT `transaction_id`,`amount`,`status`,`customer_product_json`,`coupon_code`,`last_update_ts`
			FROM `instamojo_payment_request` WHERE  `user_id` = %s and transaction_id = %s""")

		getTransactionData = (details['user_id'],details['transaction_id'])
			
		countTransaction = cursor.execute(get_transaction_query,getTransactionData)

		if countTransaction > 0:
			order_data = cursor.fetchone()

			product_status = "o"
			customer_product_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
				pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
				FROM `order_product` op
				INNER JOIN `customer_product_mapping` cpm ON cpm.`mapping_id` = op.`customer_mapping_id` 
				INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
				INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
				where op.`transaction_id` = %s and cpm.`product_status` = %s""")	

			customer_product_data = (order_data['transaction_id'],product_status)				

			count_customer_product = cursor.execute(customer_product_query,customer_product_data)

			if count_customer_product > 0:

				customer_product = cursor.fetchall()

				for tkey,tdata in enumerate(customer_product):			
					get_product_meta_image_quey = ("""SELECT `image` as `product_image`
							FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
					product_meta_image_data = (tdata['product_meta_id'])
					rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
					if rows_count_image > 0:
						product_meta_image = cursor.fetchone()
						customer_product[tkey]['product_image'] = product_meta_image['product_image']
					else:
						customer_product[tkey]['product_image'] = ""

					if tdata['meta_key_text'] :	
						a_string = tdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							customer_product[tkey]['met_key_value'] = met_key

					get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
					getdata_discount = (tdata['product_meta_id'])
					count_dicscount = cursor.execute(get_query_discount,getdata_discount)

					if count_dicscount > 0:
						product_meta_discount = cursor.fetchone()
						customer_product[tkey]['discount'] = product_meta_discount['discount']

						discount = (tdata['out_price']/100)*product_meta_discount['discount']
						actual_amount = tdata['out_price'] - discount
						customer_product[tkey]['after_discounted_price'] = round(actual_amount,2)

					else:
						customer_product[tkey]['discount'] = 0
						customer_product[tkey]['after_discounted_price'] = tdata['out_price']

					qty_quey = ("""SELECT `qty` 
							FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
					qty_data = (tdata['mapping_id'])
					rows_count_qty = cursor.execute(qty_quey,qty_data)
					if rows_count_qty > 0:
						qty = cursor.fetchone()
						customer_product[tkey]['qty'] = qty['qty']
					else:
						customer_product[tkey]['qty'] = 0

					customer_product[tkey]['actual_price'] = qty['qty'] * tdata['out_price']	

				order_data['customer_product'] = customer_product
				order_data['last_update_ts'] = str(order_data['last_update_ts'])
			
			data['order_data'] = order_data

		else:
			data['order_data'] = {}

		sent_email_status = invoice(data)


		"""abs_html_path = 
		print(abs_html_path)	
	
		res = 'Failure. Wrong MailId or SourceApp.'

		msg = MIMEMultipart()
		msg['Subject'] = "Order Details"
		msg['From'] = EMAIL_ADDRESS
		msg['To'] = "sutandra.mazumder@gmail.com"

		html = invoice(data)
		part1 = MIMEText(html, 'html')
		
		msg.attach(part1)

		try:
			smtp = smtplib.SMTP('mail.creamsonservices.com', 587)
			smtp.starttls()
			smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
			smtp.sendmail(EMAIL_ADDRESS, "talk.to.sutandra@gmail.com", msg.as_string())

			res = {"status":'Success'}
			sent = 'Y'

		except Exception as e:
			res = {"status":'Failure'}
			sent = 'N'
		smtp.quit()	

		user_id = details['user_id']

		uploadURL = BASE_URL + 'aws_portal_upload/awsResourceUploadController/uploadToS3Bucket/{}'.format(user_id)
		headers = {"content-type": "multipart/form-data"}

		files = {}

		now = datetime.now()
		date_of_creation = now.strftime("%Y-%m-%d %H:%M:%S")

		file_name = "Invoice"+date_of_creation+str(details['transaction_id'])+".html"
		 
		files['file'] = (file_name, abs_html_path)
		
		uploadRes = requests.post(uploadURL,files=files).json()
		responselist = json.dumps(uploadRes['responseList'][0])
		s2 = json.loads(responselist)

		invoice_url = s2['FilePath'] 

		if(len(invoice_url) != 0): """ 

			#update_query = ("""UPDATE `instamojo_payment_request` SET `invoice_url` = %s
				#WHERE `transaction_id` = %s """)
			#update_data = (invoice_url,details['transaction_id'])
			#cursor.execute(update_query,update_data)

		return ({"attributes": {"status_desc": "Invoice Created Successfully",
									"status": "success"},
					"responseList": sent_email_status}), status.HTTP_200_OK


#----------------------Buy---------------------#

@name_space.route("/buy")
class buy(Resource):
	@api.expect(buy_model)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = details['purpose']
		product_meta_id = details['product_meta_id']
		coupon_code = details['coupon_code']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		select_product_status = "c"

		initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")
		initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)
		cursor.execute(initiatePaymentQuery,initiateData)
		transaction_id = cursor.lastrowid

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
			FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_meta_id` = %s and product_status = %s and `organisation_id` = %s""")

		geCustomerProductData = (user_id,product_meta_id,select_product_status,organisation_id)
			
		customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

		if customerProductCount > 0:
			customerProductData = cursor.fetchone()
			get_customer_product_qty_query = ("""SELECT `qty`
			FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

			getCustomerProductQtyData = (customerProductData['mapping_id'])
			
			customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

			if customerProductQtyCount > 0 :

				customer_product_status = "o"

				customerProductQtyData = cursor.fetchone()

				qty = customerProductQtyData['qty'] + 1

				customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
					WHERE `customer_mapping_id` = %s""")
				update_qty_data = (qty,customerProductData['mapping_id'])
				cursor.execute(customer_product_update_qty_query,update_qty_data)

				CustomerProductUpdateQuery = ("""UPDATE `customer_product_mapping` SET `product_status` = %s 
					WHERE `mapping_id` = %s""")
				update_customer_product_data = (customer_product_status,customerProductData['mapping_id'])
				cursor.execute(CustomerProductUpdateQuery,update_customer_product_data)

			else:
				insert_qty = 1 
				insertCustomerProductQtyQuery = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`, 
					`qty`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				insertCustomerProductQtyData = (customerProductData['mapping_id'],insert_qty,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,customerProductData['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)
		else:

			customer_product_status = "o"
			insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")

			data = (user_id,product_meta_id,customer_product_status,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(insert_query,data)		

			mapping_id = cursor.lastrowid
			details['mapping_id'] = mapping_id

			qty = 1
			qty_status = 1

			insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s)""")
			data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
			cursor.execute(insert_qty_query,data_qty)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,mapping_id,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)

		get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

		getData = (user_id)
				
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()

			URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

			headers = {'Content-type':'application/json', 'Accept':'application/json'}

			payload = {
						"amount":amount,
						"purpose":purpose,
						"buyer_name":data['first_name']+' '+data['last_name'],
						"email":data['email'],
						"phone":data['phoneno'],
						"user_id":user_id,
						"transaction_id":transaction_id,
						"coupon_code":coupon_code,
						"organisation_id": organisation_id
					}
	

			mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()	

			'''product_loyality_point_query = 	("""SELECT `loyalty_points`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductLoyaltyData = (product_meta_id)
			
			productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

			if productLoyaltyCount > 0:
				productLoyalityData = cursor.fetchone()
				get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
				customer_wallet_data = (user_id)
				cursor.execute(get_customer_wallet_query,customer_wallet_data)
				wallet_data = cursor.fetchone()

				wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

				insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
							`updated_value`,`organisation_id`,`status`,`last_update_id`)
								VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
				transaction_source = "product_loyalty"
				updated_value = wallet
				previous_value = 0
				wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

				cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


				update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
													WHERE `admin_id` = %s """)
				update_customer_wallet_data = (updated_value,user_id)
				cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

				get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

				get_user_device_data = (user_id)
				device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

				if device_token_count > 0:
					device_token_data = cursor.fetchone()

					get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
					get_organisation_firebase_data = (organisation_id)
					cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
					firebase_data = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
					payloadpushData = {
						"device_id":device_token_data['device_token'],
						"firebase_key": firebase_data['firebase_key']
					}
					print(payloadpushData)

					send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''


			if mojoResponse['responseList']['transactionId']:
				createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
				#createInvoiceUrl = "http://127.0.0.1:5000/ecommerce_customer/EcommerceCustomer/createInvoice"
				payloadData = {
					"user_id":user_id,
					"transaction_id":mojoResponse['responseList']['transactionId']							
				}

				send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
				transactionLoyalityData = {
										"transaction_id":mojoResponse['responseList']['transactionId'],
										"customer_id":user_id,
										"organisation_id": organisation_id
									}		

				transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

			get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

			get_user_device_data = (user_id)
			device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

			if device_token_count > 0:
				device_token_data = cursor.fetchone()

				get_organisation_firebase_query = ("""SELECT `firebase_key`
					FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
				get_organisation_firebase_data = (organisation_id)
				cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
				firebase_data = cursor.fetchone()

				sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
				payloadpushData = {
					"device_id":device_token_data['device_token'],
					"firebase_key": firebase_data['firebase_key'],
					"update_status":"Complete"
				}


				send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
			getUserData = (user_id)
			countUser = cursor.execute(get_user_query,getUserData)

			if countUser > 0:
				customer_data = cursor.fetchone()
				send_sms(customer_data['phoneno'])


			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (user_id)
				
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
				payloadpushData = {
						"title":"Request an order",
						"msg":cstomerData['phoneno']+" has initiated Order",
						"img": "",
						"organisation_id": organisation_id
				}

				sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
			loyalityData = {
					"customer_id":user_id,
					"product_meta_id":product_meta_id,
					"organisation_id": organisation_id
			}

			loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()	

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
			lifetimePurchaseLoyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
			}

			lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()	


			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Invalid User"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
		

#----------------------Buy---------------------#

#----------------------Buy---------------------#

@name_space.route("/buywithqty")
class buywithqty(Resource):
	@api.expect(buy_model_with_qty)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = details['purpose']
		product_meta_id = details['product_meta_id']
		coupon_code = details['coupon_code']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		input_qty = details['qty']

		select_product_status = "c"

		payment_id = details['payment_id']
		update_status = details['update_status']

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 2

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_charges = ""

		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			prebookLoyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")
		initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)
		cursor.execute(initiatePaymentQuery,initiateData)
		transaction_id = cursor.lastrowid

		get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
			FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_meta_id` = %s and product_status = %s and `organisation_id` = %s""")

		geCustomerProductData = (user_id,product_meta_id,select_product_status,organisation_id)
			
		customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

		if customerProductCount > 0:
			customerProductData = cursor.fetchone()
			get_customer_product_qty_query = ("""SELECT `qty`
			FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

			getCustomerProductQtyData = (customerProductData['mapping_id'])
			
			customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

			if customerProductQtyCount > 0 :

				customer_product_status = "o"

				customerProductQtyData = cursor.fetchone()

				qty = customerProductQtyData['qty'] + input_qty

				customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
					WHERE `customer_mapping_id` = %s""")
				update_qty_data = (qty,customerProductData['mapping_id'])
				cursor.execute(customer_product_update_qty_query,update_qty_data)

				CustomerProductUpdateQuery = ("""UPDATE `customer_product_mapping` SET `product_status` = %s 
					WHERE `mapping_id` = %s""")
				update_customer_product_data = (customer_product_status,customerProductData['mapping_id'])
				cursor.execute(CustomerProductUpdateQuery,update_customer_product_data)

			else:
				insert_qty = 1 
				insertCustomerProductQtyQuery = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`, 
					`qty`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				insertCustomerProductQtyData = (customerProductData['mapping_id'],insert_qty,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,customerProductData['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)
		else:

			customer_product_status = "o"
			insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")

			data = (user_id,product_meta_id,customer_product_status,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(insert_query,data)		

			mapping_id = cursor.lastrowid
			details['mapping_id'] = mapping_id

			qty = 1
			qty_status = 1

			insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s)""")
			data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
			cursor.execute(insert_qty_query,data_qty)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,mapping_id,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)

		stock_management_settings_query = ("""SELECT * FROM stock_management_settings where `organisation_id` = %s""")
		stock_management_settings_data = (organisation_id)
		count_stock_management_settings = cursor.execute(stock_management_settings_query,stock_management_settings_data)

		if count_stock_management_settings > 0:
			stock_management_settings = cursor.fetchone()

			if stock_management_settings['setting_value'] == 1:
				get_retailer_id_query = (""" SELECT * FROM user_retailer_mapping where `organisation_id` = %s and `user_id` = %s""")
				retailer_id_data = (organisation_id,user_id)
				count_reatiler_id_data =  cursor.execute(get_retailer_id_query,retailer_id_data)

				if count_reatiler_id_data > 0:
					user_retailer_data = cursor.fetchone()

					update_stock_url = BASE_URL + "ecommerce_product_admin/EcommerceProductAdmin/updateStockwithBuy"
					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					stockdata = {
									"retailer_store_id": user_retailer_data['retailer_id'],
									"stock": details['qty'],
									"product_meta_id": product_meta_id,
									"organisation_id": organisation_id,
									"last_update_id": organisation_id
								}


					stockResponse = requests.put(update_stock_url,data=json.dumps(stockdata), headers=headers).json()

					print(stockResponse)

		get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

		getData = (user_id)
				
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()

			URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

			headers = {'Content-type':'application/json', 'Accept':'application/json'}				

			payload = {
						"amount":amount,
						"purpose":purpose,
						"buyer_name":data['first_name']+' '+data['last_name'],
						"email":data['email'],
						"phone":data['phoneno'],
						"user_id":user_id,
						"transaction_id":transaction_id,
						"coupon_code":coupon_code,
						"organisation_id": organisation_id,
						"order_payment_status":order_payment_status,
						"delivery_option":delivery_option,
						"delivery_charges":delivery_charges
					}
	

			mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()	

			'''product_loyality_point_query = 	("""SELECT `loyalty_points`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductLoyaltyData = (product_meta_id)
			
			productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

			if productLoyaltyCount > 0:
				productLoyalityData = cursor.fetchone()
				get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
				customer_wallet_data = (user_id)
				cursor.execute(get_customer_wallet_query,customer_wallet_data)
				wallet_data = cursor.fetchone()

				wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

				insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
							`updated_value`,`organisation_id`,`status`,`last_update_id`)
								VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
				transaction_source = "product_loyalty"
				updated_value = wallet
				previous_value = 0
				wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

				cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


				update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
													WHERE `admin_id` = %s """)
				update_customer_wallet_data = (updated_value,user_id)
				cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

				get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

				get_user_device_data = (user_id)
				device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

				if device_token_count > 0:
					device_token_data = cursor.fetchone()

					get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
					get_organisation_firebase_data = (organisation_id)
					cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
					firebase_data = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
					payloadpushData = {
						"device_id":device_token_data['device_token'],
						"firebase_key": firebase_data['firebase_key']
					}
					print(payloadpushData)

					send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''

			print(mojoResponse['responseList'])		
			if mojoResponse['responseList']['transactionId']:

				payment_status = 'Credit'
				payment_request_id = mojoResponse['responseList']['transactionId']
		
				updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
					`payment_status` = %s,`payment_id`= %s, `status` = %s WHERE `transaction_id`= %s""")

				paymentData = (payment_status,payment_id,update_status,payment_request_id)
				cursor.execute(updatePaymentQuery,paymentData)

				print(cursor._last_executed)

				get_instamojo_payemnt_request_details_query = ("""SELECT *
								FROM `instamojo_payment_request` WHERE  `transaction_id` = %s""")
				get_instamojo_payemnt_request_details_data = (mojoResponse['responseList']['transactionId'])
				cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

				instamojo_payment_data = cursor.fetchone()

				orderHistoryUrl =  BASE_URL + "order_historydtls/EcommerceOrderHistory/OderHistoryDetails"
				payloadDataOrderHistory = {
					  "order_product_id": instamojo_payment_data['transaction_id'],
					  "imageurl": "",
					  "retailer_remarks": "",
					  "updatedorder_status":instamojo_payment_data['status'],
					  "updatedpayment_status": instamojo_payment_data['payment_status'],
					  "updateduser_id": user_id,
					  "organisation_id": organisation_id
				}

				print(payloadDataOrderHistory)

				send_orderhistory = requests.post(orderHistoryUrl,data=json.dumps(payloadDataOrderHistory), headers=headers).json()


				createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
				#createInvoiceUrl = "http://127.0.0.1:5000/ecommerce_customer/EcommerceCustomer/createInvoice"
				payloadData = {
					"user_id":user_id,
					"transaction_id":mojoResponse['responseList']['transactionId']							
				}

				send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
				transactionLoyalityData = {
										"transaction_id":mojoResponse['responseList']['transactionId'],
										"customer_id":user_id,
										"organisation_id": organisation_id
									}		

				transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

			get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

			get_user_device_data = (user_id)
			device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

			if device_token_count > 0:
				device_token_data = cursor.fetchone()

				get_organisation_firebase_query = ("""SELECT `firebase_key`
					FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
				get_organisation_firebase_data = (organisation_id)
				cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
				firebase_data = cursor.fetchone()

				sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
				payloadpushData = {
					"device_id":device_token_data['device_token'],
					"firebase_key": firebase_data['firebase_key'],
					"update_status":update_status
				}


				send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
			getUserData = (user_id)
			countUser = cursor.execute(get_user_query,getUserData)

			if countUser > 0:
				customer_data = cursor.fetchone()
				send_sms(customer_data['phoneno'])

			
			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (user_id)
				
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
				payloadpushData = {
						"title":"Request an order",
						"msg":cstomerData['phoneno']+" has initiated Order",
						"img": "",
						"organisation_id": organisation_id
				}

				sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()


			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
			loyalityData = {
					"customer_id":user_id,
					"product_meta_id":product_meta_id,
					"organisation_id": organisation_id
			}

			loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()	

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
			lifetimePurchaseLoyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
			}

			lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()			

			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Invalid User"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
		

#----------------------Buy---------------------#

#----------------------Buy---------------------#

@name_space.route("/buywithbundel")
class buywithbundel(Resource):
	@api.expect(buy_model_with_bundel)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = details['purpose']
		product_meta_ids = details.get('productmetaid',[])
		coupon_code = details['coupon_code']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		input_qty = details['qty']

		select_product_status = "c"

		payment_id = details['payment_id']
		update_status = details['update_status']

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 2

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_charges = ""


		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			prebookLoyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")
		initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)
		cursor.execute(initiatePaymentQuery,initiateData)
		transaction_id = cursor.lastrowid

		for key,product_meta_id in enumerate(product_meta_ids):	

			get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
				FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_meta_id` = %s and product_status = %s and `organisation_id` = %s""")

			geCustomerProductData = (user_id,product_meta_id,select_product_status,organisation_id)
				
			customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

			if customerProductCount > 0:
				customerProductData = cursor.fetchone()
				get_customer_product_qty_query = ("""SELECT `qty`
				FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

				getCustomerProductQtyData = (customerProductData['mapping_id'])
				
				customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

				if customerProductQtyCount > 0 :

					customer_product_status = "o"

					customerProductQtyData = cursor.fetchone()

					qty = customerProductQtyData['qty'] + input_qty

					customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
						WHERE `customer_mapping_id` = %s""")
					update_qty_data = (qty,customerProductData['mapping_id'])
					cursor.execute(customer_product_update_qty_query,update_qty_data)

					CustomerProductUpdateQuery = ("""UPDATE `customer_product_mapping` SET `product_status` = %s 
						WHERE `mapping_id` = %s""")
					update_customer_product_data = (customer_product_status,customerProductData['mapping_id'])
					cursor.execute(CustomerProductUpdateQuery,update_customer_product_data)

				else:
					insert_qty = 1 
					insertCustomerProductQtyQuery = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`, 
						`qty`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
					insertCustomerProductQtyData = (customerProductData['mapping_id'],insert_qty,initiate_paymengt_status,organisation_id,last_update_id)
					cursor.execute(orderProductQuery,orderProductData)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,customerProductData['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)
			else:

				customer_product_status = "o"
				insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
						VALUES(%s,%s,%s,%s,%s,%s)""")

				data = (user_id,product_meta_id,customer_product_status,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(insert_query,data)		

				mapping_id = cursor.lastrowid
				details['mapping_id'] = mapping_id

				qty = 1
				qty_status = 1

				insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
						VALUES(%s,%s,%s,%s,%s)""")
				data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
				cursor.execute(insert_qty_query,data_qty)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,mapping_id,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
			loyalityData = {
					"customer_id":user_id,
					"product_meta_id":product_meta_id,
					"organisation_id": organisation_id
			}

			loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()

			

		get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

		getData = (user_id)
				
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()

			URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

			headers = {'Content-type':'application/json', 'Accept':'application/json'}				

			payload = {
						"amount":amount,
						"purpose":purpose,
						"buyer_name":data['first_name']+' '+data['last_name'],
						"email":data['email'],
						"phone":data['phoneno'],
						"user_id":user_id,
						"transaction_id":transaction_id,
						"coupon_code":coupon_code,
						"organisation_id": organisation_id,
						"order_payment_status":order_payment_status,
						"delivery_option":delivery_option,
						"delivery_charges":delivery_charges
					}
	

			mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()	

			'''product_loyality_point_query = 	("""SELECT `loyalty_points`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductLoyaltyData = (product_meta_id)
			
			productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

			if productLoyaltyCount > 0:
				productLoyalityData = cursor.fetchone()
				get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
				customer_wallet_data = (user_id)
				cursor.execute(get_customer_wallet_query,customer_wallet_data)
				wallet_data = cursor.fetchone()

				wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

				insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
							`updated_value`,`organisation_id`,`status`,`last_update_id`)
								VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
				transaction_source = "product_loyalty"
				updated_value = wallet
				previous_value = 0
				wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

				cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


				update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
													WHERE `admin_id` = %s """)
				update_customer_wallet_data = (updated_value,user_id)
				cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

				get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

				get_user_device_data = (user_id)
				device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

				if device_token_count > 0:
					device_token_data = cursor.fetchone()

					get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
					get_organisation_firebase_data = (organisation_id)
					cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
					firebase_data = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
					payloadpushData = {
						"device_id":device_token_data['device_token'],
						"firebase_key": firebase_data['firebase_key']
					}
					print(payloadpushData)

					send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''

			print(mojoResponse['responseList'])		
			if mojoResponse['responseList']['transactionId']:

				payment_status = 'Credit'
				payment_request_id = mojoResponse['responseList']['transactionId']
		
				updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
					`payment_status` = %s,`payment_id`= %s, `status` = %s WHERE `transaction_id`= %s""")

				paymentData = (payment_status,payment_id,update_status,payment_request_id)
				cursor.execute(updatePaymentQuery,paymentData)

				print(cursor._last_executed)

				get_instamojo_payemnt_request_details_query = ("""SELECT *
								FROM `instamojo_payment_request` WHERE  `transaction_id` = %s""")
				get_instamojo_payemnt_request_details_data = (mojoResponse['responseList']['transactionId'])
				cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

				instamojo_payment_data = cursor.fetchone()

				orderHistoryUrl =  BASE_URL + "order_historydtls/EcommerceOrderHistory/OderHistoryDetails"
				payloadDataOrderHistory = {
					  "order_product_id": instamojo_payment_data['transaction_id'],
					  "imageurl": "",
					  "retailer_remarks": "",
					  "updatedorder_status":instamojo_payment_data['status'],
					  "updatedpayment_status": instamojo_payment_data['payment_status'],
					  "updateduser_id": user_id,
					  "organisation_id": organisation_id
				}

				print(payloadDataOrderHistory)

				send_orderhistory = requests.post(orderHistoryUrl,data=json.dumps(payloadDataOrderHistory), headers=headers).json()


				createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
				#createInvoiceUrl = "http://127.0.0.1:5000/ecommerce_customer/EcommerceCustomer/createInvoice"
				payloadData = {
					"user_id":user_id,
					"transaction_id":mojoResponse['responseList']['transactionId']							
				}

				send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
				transactionLoyalityData = {
										"transaction_id":mojoResponse['responseList']['transactionId'],
										"customer_id":user_id,
										"organisation_id": organisation_id
									}		

				transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

			get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

			get_user_device_data = (user_id)
			device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

			if device_token_count > 0:
				device_token_data = cursor.fetchone()

				get_organisation_firebase_query = ("""SELECT `firebase_key`
					FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
				get_organisation_firebase_data = (organisation_id)
				cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
				firebase_data = cursor.fetchone()

				sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
				payloadpushData = {
					"device_id":device_token_data['device_token'],
					"firebase_key": firebase_data['firebase_key'],
					"update_status":update_status
				}


				send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
			getUserData = (user_id)
			countUser = cursor.execute(get_user_query,getUserData)

			if countUser > 0:
				customer_data = cursor.fetchone()
				send_sms(customer_data['phoneno'])

			
			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (user_id)
				
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
				payloadpushData = {
						"title":"Request an order",
						"msg":cstomerData['phoneno']+" has initiated Order",
						"img": "",
						"organisation_id": organisation_id
				}

				sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
			lifetimePurchaseLoyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
			}

			lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()	

			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Invalid User"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
		

#----------------------Buy---------------------#

#----------------------Buy---------------------#

@name_space.route("/cashonwithqty")
class cashonwithqty(Resource):
	@api.expect(buy_model_cashon_with_qty)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		amount = details['amount']
		purpose = "buy with cod"
		product_meta_id = details['product_meta_id']
		coupon_code = details['coupon_code']

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = 1

		input_qty = details['qty']

		select_product_status = "c"		
		

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 2

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_charges = ""

		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			FirstPurchaseloyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")
		initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)
		cursor.execute(initiatePaymentQuery,initiateData)
		transaction_id = cursor.lastrowid

		get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
			FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_meta_id` = %s and product_status = %s and `organisation_id` = %s""")

		geCustomerProductData = (user_id,product_meta_id,select_product_status,organisation_id)
			
		customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

		if customerProductCount > 0:
			customerProductData = cursor.fetchone()
			get_customer_product_qty_query = ("""SELECT `qty`
			FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

			getCustomerProductQtyData = (customerProductData['mapping_id'])
			
			customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

			if customerProductQtyCount > 0 :

				customer_product_status = "o"

				customerProductQtyData = cursor.fetchone()

				qty = customerProductQtyData['qty'] + input_qty

				customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
					WHERE `customer_mapping_id` = %s""")
				update_qty_data = (qty,customerProductData['mapping_id'])
				cursor.execute(customer_product_update_qty_query,update_qty_data)

				CustomerProductUpdateQuery = ("""UPDATE `customer_product_mapping` SET `product_status` = %s 
					WHERE `mapping_id` = %s""")
				update_customer_product_data = (customer_product_status,customerProductData['mapping_id'])
				cursor.execute(CustomerProductUpdateQuery,update_customer_product_data)

			else:
				insert_qty = 1 
				insertCustomerProductQtyQuery = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`, 
					`qty`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				insertCustomerProductQtyData = (customerProductData['mapping_id'],insert_qty,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,customerProductData['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)
		else:

			customer_product_status = "o"
			insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")

			data = (user_id,product_meta_id,customer_product_status,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(insert_query,data)		

			mapping_id = cursor.lastrowid
			details['mapping_id'] = mapping_id

			qty = input_qty
			qty_status = 1

			insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s)""")
			data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
			cursor.execute(insert_qty_query,data_qty)

			orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
				`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
			orderProductData = (transaction_id,mapping_id,initiate_paymengt_status,organisation_id,last_update_id)
			cursor.execute(orderProductQuery,orderProductData)

		stock_management_settings_query = ("""SELECT * FROM stock_management_settings where `organisation_id` = %s""")
		stock_management_settings_data = (organisation_id)
		count_stock_management_settings = cursor.execute(stock_management_settings_query,stock_management_settings_data)

		if count_stock_management_settings > 0:
			stock_management_settings = cursor.fetchone()

			if stock_management_settings['setting_value'] == 1:
				get_retailer_id_query = (""" SELECT * FROM user_retailer_mapping where `organisation_id` = %s and `user_id` = %s""")
				retailer_id_data = (organisation_id,user_id)
				count_reatiler_id_data =  cursor.execute(get_retailer_id_query,retailer_id_data)

				if count_reatiler_id_data > 0:
					user_retailer_data = cursor.fetchone()

					update_stock_url = BASE_URL + "ecommerce_product_admin/EcommerceProductAdmin/updateStockwithBuy"
					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					stockdata = {
									"retailer_store_id": user_retailer_data['retailer_id'],
									"stock": details['qty'],
									"product_meta_id": product_meta_id,
									"organisation_id": organisation_id,
									"last_update_id": organisation_id
								}


					stockResponse = requests.put(update_stock_url,data=json.dumps(stockdata), headers=headers).json()

					print(stockResponse)

		get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s and `organisation_id` = %s""")

		getData = (user_id,organisation_id)
				
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()

			URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

			headers = {'Content-type':'application/json', 'Accept':'application/json'}				

			payload = {
						"amount":amount,
						"purpose":purpose,
						"buyer_name":data['first_name'],
						"email":data['email'],
						"phone":data['phoneno'],
						"user_id":user_id,
						"transaction_id":transaction_id,
						"coupon_code":coupon_code,
						"organisation_id": organisation_id,
						"order_payment_status":order_payment_status,
						"delivery_option":delivery_option,
						"delivery_charges":delivery_charges
					}

			print(payload)
	

			mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()	

			'''product_loyality_point_query = 	("""SELECT `loyalty_points`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductLoyaltyData = (product_meta_id)
			
			productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

			if productLoyaltyCount > 0:
				productLoyalityData = cursor.fetchone()
				get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
				customer_wallet_data = (user_id)
				cursor.execute(get_customer_wallet_query,customer_wallet_data)
				wallet_data = cursor.fetchone()

				wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

				insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
							`updated_value`,`organisation_id`,`status`,`last_update_id`)
								VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
				transaction_source = "product_loyalty"
				updated_value = wallet
				previous_value = 0
				wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

				cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


				update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
													WHERE `admin_id` = %s """)
				update_customer_wallet_data = (updated_value,user_id)
				cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

				get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

				get_user_device_data = (user_id)
				device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

				if device_token_count > 0:
					device_token_data = cursor.fetchone()

					get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
					get_organisation_firebase_data = (organisation_id)
					cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
					firebase_data = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
					payloadpushData = {
						"device_id":device_token_data['device_token'],
						"firebase_key": firebase_data['firebase_key']
					}
					print(payloadpushData)

					send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''

			print(mojoResponse['responseList'])		
			if mojoResponse['responseList']['transactionId']:

				payment_status = 'Cod'
				update_status = 'Ordered'
				payment_request_id = mojoResponse['responseList']['transactionId']
		
				updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
					`payment_status` = %s,`status` = %s WHERE `transaction_id`= %s""")

				paymentData = (payment_status,update_status,payment_request_id)
				cursor.execute(updatePaymentQuery,paymentData)

				print(cursor._last_executed)

				get_instamojo_payemnt_request_details_query = ("""SELECT *
								FROM `instamojo_payment_request` WHERE  `transaction_id` = %s""")
				get_instamojo_payemnt_request_details_data = (mojoResponse['responseList']['transactionId'])
				cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

				instamojo_payment_data = cursor.fetchone()

				orderHistoryUrl =  BASE_URL + "order_historydtls/EcommerceOrderHistory/OderHistoryDetails"
				payloadDataOrderHistory = {
					  "order_product_id": instamojo_payment_data['transaction_id'],
					  "imageurl": "",
					  "retailer_remarks": "",
					  "updatedorder_status":instamojo_payment_data['status'],
					  "updatedpayment_status": instamojo_payment_data['payment_status'],
					  "updateduser_id": user_id,
					  "organisation_id": organisation_id
				}

				print(payloadDataOrderHistory)

				send_orderhistory = requests.post(orderHistoryUrl,data=json.dumps(payloadDataOrderHistory), headers=headers).json()


				createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
				#createInvoiceUrl = "http://127.0.0.1:5000/ecommerce_customer/EcommerceCustomer/createInvoice"
				payloadData = {
					"user_id":user_id,
					"transaction_id":mojoResponse['responseList']['transactionId']							
				}

				send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
				transactionLoyalityData = {
										"transaction_id":mojoResponse['responseList']['transactionId'],
										"customer_id":user_id,
										"organisation_id": organisation_id
									}		

				transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

			get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

			get_user_device_data = (user_id)
			device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

			if device_token_count > 0:
				device_token_data = cursor.fetchone()

				get_organisation_firebase_query = ("""SELECT `firebase_key`
					FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
				get_organisation_firebase_data = (organisation_id)
				cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
				firebase_data = cursor.fetchone()

				sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
				payloadpushData = {
					"device_id":device_token_data['device_token'],
					"firebase_key": firebase_data['firebase_key'],
					"update_status":update_status
				}


				send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
			getUserData = (user_id)
			countUser = cursor.execute(get_user_query,getUserData)

			if countUser > 0:
				customer_data = cursor.fetchone()
				send_sms(customer_data['phoneno'])


			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (user_id)
				
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
				payloadpushData = {
						"title":"Request an order",
						"msg":cstomerData['phoneno']+" has initiated Order",
						"img": "",
						"organisation_id": organisation_id
				}

				sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
			loyalityData = {
					"customer_id":user_id,
					"product_meta_id":product_meta_id,
					"organisation_id": organisation_id
			}

			loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()	

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
			lifetimePurchaseLoyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
			}

			lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()			

			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Invalid User"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
		

#----------------------Buy---------------------#


#----------------------Buy---------------------#

@name_space.route("/buywithcashonDelivery")
class buywithcashonDelivery(Resource):
	@api.expect(buy_model_cashon)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		user_id = details['user_id']
		product_meta_ids = details.get('product_meta_id',[])

		initiate_paymengt_status = 1
		organisation_id  = details['organisation_id']
		last_update_id = details['organisation_id']		
		purpose = "buy with cod"

		if details and "coupon_code" in details:
			coupon_code = details['coupon_code']
		else:
			coupon_code = ''

		if details and "order_payment_status" in details:
			order_payment_status = details['order_payment_status']
		else:
			order_payment_status = 3

		if details and "delivery_option" in details:
			delivery_option = details['delivery_option']
		else:
			delivery_option = 1

		if details and "delivery_charges" in details:
			delivery_charges = details['delivery_charges']
		else:
			delivery_charges = ""


		if order_payment_status == 4:
			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			prebookLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityPreBook"
			prebookLoyalityData = {
					"customer_id":user_id,					
					"organisation_id": organisation_id
			}

			prebookLoyalityResponse = requests.post(prebookLoyalitynUrl,data=json.dumps(prebookLoyalityData), headers=headers).json()


		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		AddFirstPurchaseLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityFirstPurchase"
		firstpurchaseloyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
		}

		FirstPurchaseloyalityResponse = requests.post(AddFirstPurchaseLoyalitynUrl,data=json.dumps(firstpurchaseloyalityData), headers=headers).json()

		initiatePaymentQuery = ("""INSERT INTO `instamojo_initiate_payment`(`user_id`, 
				`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s)""")
		initiateData = (user_id,initiate_paymengt_status,organisation_id,last_update_id)
		cursor.execute(initiatePaymentQuery,initiateData)
		transaction_id = cursor.lastrowid
		
		amount = 0

		for key,product_meta_id in enumerate(product_meta_ids):

			product_meta_query = 	("""SELECT `out_price`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductMetaData = (product_meta_id)
			
			productMetaCount = cursor.execute(product_meta_query,getProductMetaData)	
			
			if productMetaCount > 0:
				productMetaData = cursor.fetchone()
				amount = amount + productMetaData['out_price']
			else:
				amount = 0
	

		for key,product_meta_id in enumerate(product_meta_ids):					

			select_product_status = "c"		

			get_customer_product_query = ("""SELECT `mapping_id`,`product_meta_id`,`product_status`
				FROM `customer_product_mapping` WHERE  `customer_id` = %s and `product_meta_id` = %s and product_status = %s and `organisation_id` = %s""")

			geCustomerProductData = (user_id,product_meta_id,select_product_status,organisation_id)
			
			customerProductCount = cursor.execute(get_customer_product_query,geCustomerProductData)

			if customerProductCount > 0:
				customerProductData = cursor.fetchone()
				get_customer_product_qty_query = ("""SELECT `qty`
				FROM `customer_product_mapping_qty` WHERE  `customer_mapping_id` = %s """)

				getCustomerProductQtyData = (customerProductData['mapping_id'])
				
				customerProductQtyCount = cursor.execute(get_customer_product_qty_query,getCustomerProductQtyData)

				if customerProductQtyCount > 0 :

					customer_product_status = "o"

					customerProductQtyData = cursor.fetchone()

					qty = customerProductQtyData['qty']

					customer_product_update_qty_query = ("""UPDATE `customer_product_mapping_qty` SET `qty` = %s
						WHERE `customer_mapping_id` = %s""")
					update_qty_data = (qty,customerProductData['mapping_id'])
					cursor.execute(customer_product_update_qty_query,update_qty_data)

					CustomerProductUpdateQuery = ("""UPDATE `customer_product_mapping` SET `product_status` = %s 
						WHERE `mapping_id` = %s""")
					update_customer_product_data = (customer_product_status,customerProductData['mapping_id'])
					cursor.execute(CustomerProductUpdateQuery,update_customer_product_data)

				else:
					insert_qty = 1 
					insertCustomerProductQtyQuery = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`, 
						`qty`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
					insertCustomerProductQtyData = (customerProductData['mapping_id'],insert_qty,initiate_paymengt_status,organisation_id,last_update_id)
					cursor.execute(orderProductQuery,orderProductData)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,customerProductData['mapping_id'],initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)
			else:

				customer_product_status = "o"
				insert_query = ("""INSERT INTO `customer_product_mapping`(`customer_id`,`product_meta_id`,`product_status`,`status`,`organisation_id`,`last_update_id`) 
						VALUES(%s,%s,%s,%s,%s,%s)""")

				data = (user_id,product_meta_id,customer_product_status,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(insert_query,data)		

				mapping_id = cursor.lastrowid
				details['mapping_id'] = mapping_id

				qty = 1
				qty_status = 1

				insert_qty_query = ("""INSERT INTO `customer_product_mapping_qty`(`customer_mapping_id`,`qty`,`status`,`organisation_id`,`last_update_id`) 
						VALUES(%s,%s,%s,%s,%s)""")
				data_qty = (mapping_id,qty,qty_status,organisation_id,last_update_id)
				cursor.execute(insert_qty_query,data_qty)

				orderProductQuery = ("""INSERT INTO `order_product`(`transaction_id`, 
					`customer_mapping_id`,`status`,`organisation_id`,`last_update_id`) VALUES (%s,%s,%s,%s,%s)""")
				orderProductData = (transaction_id,mapping_id,initiate_paymengt_status,organisation_id,last_update_id)
				cursor.execute(orderProductQuery,orderProductData)

				stock_management_settings_query = ("""SELECT * FROM stock_management_settings where `organisation_id` = %s""")
				stock_management_settings_data = (organisation_id)
				count_stock_management_settings = cursor.execute(stock_management_settings_query,stock_management_settings_data)

				if count_stock_management_settings > 0:
					stock_management_settings = cursor.fetchone()

					if stock_management_settings['setting_value'] == 1:
						get_retailer_id_query = (""" SELECT * FROM user_retailer_mapping where `organisation_id` = %s and `user_id` = %s""")
						retailer_id_data = (organisation_id,user_id)
						count_reatiler_id_data =  cursor.execute(get_retailer_id_query,retailer_id_data)

						if count_reatiler_id_data > 0:
							user_retailer_data = cursor.fetchone()

							update_stock_url = BASE_URL + "ecommerce_product_admin/EcommerceProductAdmin/updateStockwithBuy"
							headers = {'Content-type':'application/json', 'Accept':'application/json'}
							stockdata = {
										  "retailer_store_id": user_retailer_data['retailer_id'],
										  "stock": 1,
										  "product_meta_id": product_meta_id,
										  "organisation_id": organisation_id,
										  "last_update_id": organisation_id
										}


							stockResponse = requests.put(update_stock_url,data=json.dumps(stockdata), headers=headers).json()

							print(stockResponse)

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			AddLoyalitynUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterProductPurchase"
			loyalityData = {
					"customer_id":user_id,
					"product_meta_id":product_meta_id,
					"organisation_id": organisation_id
			}

			loyalityResponse = requests.post(AddLoyalitynUrl,data=json.dumps(loyalityData), headers=headers).json()


		get_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

		getData = (user_id)
				
		count = cursor.execute(get_query,getData)

		if count >0:

			data = cursor.fetchone()

			URL = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createPaymentRequest"

			headers = {'Content-type':'application/json', 'Accept':'application/json'}

			payload = {
						"amount":amount,
						"purpose":purpose,
						"buyer_name":data['first_name']+' '+data['last_name'],
						"email":data['email'],
						"phone":data['phoneno'],
						"user_id":user_id,
						"transaction_id":transaction_id,
						"coupon_code":coupon_code,
						"organisation_id": organisation_id,
						"order_payment_status":order_payment_status,
						"delivery_option":delivery_option,
						"delivery_charges":delivery_charges
					}
	

			mojoResponse = requests.post(URL,data=json.dumps(payload), headers=headers).json()	

			'''product_loyality_point_query = 	("""SELECT `loyalty_points`
				FROM `product_meta` WHERE  `product_meta_id` = %s """)
			getProductLoyaltyData = (product_meta_id)
			
			productLoyaltyCount = cursor.execute(product_loyality_point_query,getProductLoyaltyData)	

			if productLoyaltyCount > 0:
				productLoyalityData = cursor.fetchone()
				get_customer_wallet_query = ("""SELECT `wallet` from `admins` WHERE `admin_id` = %s""")
				customer_wallet_data = (user_id)
				cursor.execute(get_customer_wallet_query,customer_wallet_data)
				wallet_data = cursor.fetchone()

				wallet = productLoyalityData['loyalty_points']+wallet_data['wallet']				

				insert_wallet_transaction_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,
							`updated_value`,`organisation_id`,`status`,`last_update_id`)
								VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")
				transaction_source = "product_loyalty"
				updated_value = wallet
				previous_value = 0
				wallet_transaction_data = (user_id,productLoyalityData['loyalty_points'],transaction_source,previous_value,updated_value,organisation_id,initiate_paymengt_status,last_update_id)

				cursor.execute(insert_wallet_transaction_query,wallet_transaction_data)	


				update_customer_wallet_query = ("""UPDATE `admins` SET `wallet` = %s
													WHERE `admin_id` = %s """)
				update_customer_wallet_data = (updated_value,user_id)
				cursor.execute(update_customer_wallet_query,update_customer_wallet_data)

				get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

				get_user_device_data = (user_id)
				device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

				if device_token_count > 0:
					device_token_data = cursor.fetchone()

					get_organisation_firebase_query = ("""SELECT `firebase_key`
						FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
					get_organisation_firebase_data = (organisation_id)
					cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
					firebase_data = cursor.fetchone()

					headers = {'Content-type':'application/json', 'Accept':'application/json'}
					sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotificationforloyalityPoint"
					payloadpushData = {
						"device_id":device_token_data['device_token'],
						"firebase_key": firebase_data['firebase_key']
					}
					print(payloadpushData)

					send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()'''


			if mojoResponse['responseList']['transactionId']:
				payment_status = 'Cod'
				update_status = 'Ordered'
				payment_request_id = mojoResponse['responseList']['transactionId']
		
				updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
						`payment_status` = %s,`status` = %s WHERE `transaction_id`= %s""")

				paymentData = (payment_status,update_status,payment_request_id)

				cursor.execute(updatePaymentQuery,paymentData)

				get_instamojo_payemnt_request_details_query = ("""SELECT *
								FROM `instamojo_payment_request` WHERE  `transaction_id` = %s""")
				get_instamojo_payemnt_request_details_data = (mojoResponse['responseList']['transactionId'])
				cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

				instamojo_payment_data = cursor.fetchone()

				orderHistoryUrl =  BASE_URL + "order_historydtls/EcommerceOrderHistory/OderHistoryDetails"
				payloadDataOrderHistory = {
					  "order_product_id": instamojo_payment_data['transaction_id'],
					  "imageurl": "",
					  "retailer_remarks": "",
					  "updatedorder_status":instamojo_payment_data['status'],
					  "updatedpayment_status": instamojo_payment_data['payment_status'],
					  "updateduser_id": user_id,
					  "organisation_id": organisation_id
				}


				send_orderhistory = requests.post(orderHistoryUrl,data=json.dumps(payloadDataOrderHistory), headers=headers).json()

				createInvoiceUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/createInvoice"
				#createInvoiceUrl = "http://127.0.0.1:5000/ecommerce_customer/EcommerceCustomer/createInvoice"
				payloadData = {
					"user_id":user_id,
					"transaction_id":mojoResponse['responseList']['transactionId']							
				}

				send_invoice = requests.post(createInvoiceUrl,data=json.dumps(payloadData), headers=headers).json()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				transactionLoyalityUrl = BASE_URL + "/ecommerce_customer_loyality/EcommerceCustomerLoyality/transactionLoyality"
				transactionLoyalityData = {
										"transaction_id":mojoResponse['responseList']['transactionId'],
										"customer_id":user_id,
										"organisation_id": organisation_id
									}		

				transactionLoyality = requests.post(transactionLoyalityUrl,data=json.dumps(transactionLoyalityData), headers=headers).json()

			get_user_device_query = ("""SELECT `device_token`
							FROM `devices` WHERE  `user_id` = %s""")

			get_user_device_data = (user_id)
			device_token_count = cursor.execute(get_user_device_query,get_user_device_data)

			if device_token_count > 0:
				device_token_data = cursor.fetchone()

				get_organisation_firebase_query = ("""SELECT `firebase_key`
					FROM `organisation_firebase_details` WHERE  `organisation_id` = %s""")
				get_organisation_firebase_data = (organisation_id)
				cursor.execute(get_organisation_firebase_query,get_organisation_firebase_data)
				firebase_data = cursor.fetchone()

				sendAppPushNotificationUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/sendAppPushNotifications"
				payloadpushData = {
					"device_id":device_token_data['device_token'],
					"firebase_key": firebase_data['firebase_key'],
					"update_status":update_status
				}


				send_push_notification = requests.post(sendAppPushNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			get_user_query = ("""SELECT `name`,`first_name`,`last_name`,`email`,`phoneno`,`address_line_1`,`address_line_2`,
							`city`,`country`,`state`,`pincode`
				FROM `admins` WHERE  `admin_id` = %s""")
			getUserData = (user_id)
			countUser = cursor.execute(get_user_query,getUserData)

			if countUser > 0:
				customer_data = cursor.fetchone()
				send_sms(customer_data['phoneno'])


			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (user_id)
				
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				headers = {'Content-type':'application/json', 'Accept':'application/json'}
				sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
				payloadpushData = {
						"title":"Request an order",
						"msg":cstomerData['phoneno']+" has initiated Order",
						"img": "",
						"organisation_id": organisation_id
				}

			sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

			headers = {'Content-type':'application/json', 'Accept':'application/json'}
			lifetimePurchaseLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityLifetimePurchase"
			lifetimePurchaseLoyalityData = {
				"customer_id":user_id,					
				"organisation_id": organisation_id
			}

			lifetimePurchaseLoyalityResponse = requests.post(lifetimePurchaseLoyalityUrl,data=json.dumps(lifetimePurchaseLoyalityData), headers=headers).json()				

			connection.commit()
			cursor.close()

			return ({"attributes": {"status_desc": "Instamojo payment request Details",
									"status": "success"},
					"responseList": mojoResponse['responseList']}), status.HTTP_200_OK
		else:
			return ({"attributes": {
			    		"status_desc": "Instamojo payment request Details",
			    		"status": "error",
			    		"message":"Invalid User"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK
		

#----------------------Buy---------------------#




@name_space.route("/updateCustomerWallet/<int:user_id>")
class updateCustomerWallet(Resource):
	@api.expect(customer_wallet_putmodel)
	def put(self, user_id):

		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()

		user_wallet = details['wallet']

		update_query = ("""UPDATE `admins` SET `wallet` = %s
				WHERE `admin_id` = %s """)
		update_data = (user_wallet,user_id)
		cursor.execute(update_query,update_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update Customer Wallet",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK


#----------------------createPaymentRequest---------------------#
@name_space.route("/createPaymentRequest")
class createPaymentRequest(Resource):
	@api.expect(create_payment_link_model)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		details['redirect_url'] = 'http://creamsonservices.com/instamojoEcommerce.php'
		details['allow_repeated_payments'] = False
		details['send_email'] = False
		details['send_sms'] = True
		userId = details.get('user_id',None)
		details.pop('user_id',None)
		transactionId = details.get('transaction_id',None)		
		details.pop('transaction_id',None)

		coupon_code = details.get('coupon_code',None)
		organisation_id = details['organisation_id']

		payload = {"grant_type": "client_credentials",
					"client_id": CLIENT_ID,
					"client_secret": CLIENT_SECRET}

		authResponse = requests.post(MOJO_TEST_URL+"oauth2/token/",
			data=payload).json()

		accesstoken = authResponse.get('access_token')

		headers = {"Authorization": "Bearer "+accesstoken}

		if  '@' in details['email']:
			details['email'] = details['email']
		else:
			details['email'] = ''

		details['phone'] = 9836098360	
		'''if len(str(details['phone'])) < 10:
			details['phone'] = details['phone']
		else:
			characters = 10			
			details['phone'] = str(details['phone'])[:characters]

		details['phone'] = str(details['phone']).replace('.', '')

		print(details['phone'])		'''

		mojoResponse = requests.post(
		  "https://test.instamojo.com/v2/payment_requests/", 
		  data=details, 
		  headers=headers
		)



		statusCode = mojoResponse.status_code
		
		if statusCode == 201:
			response = mojoResponse.json()

			mojoResInsertQuery = ("""INSERT INTO `instamojo_payment_request`(`instamojo_request_id`, 
				`phone`, `email`, `buyer_name`, `amount`, `purpose`, `order_payment_status`,`delivery_option`,`delivery_charges`,`status`, `send_sms`, `coupon_code`,
				`send_email`, `sms_status`, `email_status`, `shorturl`, `longurl`, 
				`redirect_url`, `webhook`, `scheduled_at`, `expires_at`, `allow_repeated_payments`, 
				`mark_fulfilled`, `customer_id`, `created_at`, `modified_at`, `resource_uri`, 
				`remarks`,`organisation_id`, `user_id`,`transaction_id`) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,
				%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""")

			created_at = datetime.strptime(response.get('created_at'),'%Y-%m-%dT%H:%M:%S.%fZ').strftime('%Y-%m-%d %H:%M:%S')
			modified_at = datetime.strptime(response.get('modified_at'),'%Y-%m-%dT%H:%M:%S.%fZ').strftime('%Y-%m-%d %H:%M:%S')

			mojoData = (response.get('id'),details.get('phone'),response.get('email'),
				response.get('buyer_name'),response.get('amount'),response.get('purpose'),details.get('order_payment_status'),details.get('delivery_option'),details.get('delivery_charges'),
				response.get('status'),response.get('send_sms'),coupon_code,response.get('send_email'),response.get('sms_status'),response.get('email_status'),response.get('shorturl'),
				response.get('longurl'),response.get('redirect_url'),response.get('webhook'),
				response.get('scheduled_at'),response.get('expires_at'),response.get('allow_repeated_payments'),
				response.get('mark_fulfilled'),response.get('customer_id'),
				created_at,modified_at,response.get('resource_uri'),response.get('remarks'),organisation_id,userId,transactionId)
			cursor.execute(mojoResInsertQuery,mojoData)

			print(cursor._last_executed)

			requestId = cursor.lastrowid

			response['transactionId'] = transactionId
			response['paymentRequestId'] = requestId

			#createInvoiceURL = BASE_URL + "ecommerce_customer/EcommerceCustomer/createInvoice"

			#invoiceheaders = {'Content-type':'application/json', 'Accept':'application/json'}

			#invoiceData = {
							#"user_id":userId,
							#"transaction_id":transaction_id
						#}

			#requests.post(createInvoiceURL,data=json.dumps(invoiceData), headers=invoiceheaders).json()

			msg = 'Payment Link Created'
		else:
			response = {}
			msg = 'No matching credentials'

		return ({"attributes": {
					"status_desc": "Payment Request",
					"status": "success",
					"msg":msg
				},
					"responseList":response}), status.HTTP_200_OK

#----------------------createPaymentRequest---------------------#


#----------------------updatePaymentDetails---------------------#

@name_space.route("/updatePaymentDetails/<string:payment_id>/<string:payment_status>/<string:payment_request_id>")
class updatePaymentDetails(Resource):
	def put(self,payment_id,payment_status,payment_request_id):
		
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		update_status = 'Complete'
		
		updatePaymentQuery = ("""UPDATE `instamojo_payment_request` SET  
			`payment_status` = %s,`payment_id`= %s, `status` = %s WHERE `instamojo_request_id`= %s""")

		paymentData = (payment_status,payment_id,update_status,payment_request_id)

		cursor.execute(updatePaymentQuery,paymentData)

		return ({"attributes": {"status_desc": "Instamojo Payment Details",
							"status": "success"},
			"responseList": 'Payment Details Updated'}), status.HTTP_200_OK

#----------------------updatePaymentDetails---------------------#

#----------------------Order-History---------------------#

@name_space.route("/orderHistory/<int:user_id>")	
class orderHistory(Resource):
	def get(self,user_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT ipr.`transaction_id`,ipr.`amount`,ipr.`status`,ipr.`invoice_url`,
			a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,a.`pincode`
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s""")

		getData = (user_id)
			
		count = cursor.execute(get_query,getData)

		if count > 0:
			order_data = cursor.fetchall()

			for key,data in enumerate(order_data):
				product_status = "o"
				customer_product_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
					pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
					FROM `order_product` op
					INNER JOIN `customer_product_mapping` cpm ON cpm.`mapping_id` = op.`customer_mapping_id` 
					INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
					INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
					where op.`transaction_id` = %s and cpm.`product_status` = %s """)	

				customer_product_data = (data['transaction_id'],product_status)
				cursor.execute(customer_product_query,customer_product_data)

				customer_product = cursor.fetchall()

				for tkey,tdata in enumerate(customer_product):			
					get_product_meta_image_quey = ("""SELECT `image` as `product_image`
						FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
					product_meta_image_data = (tdata['product_meta_id'])
					rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
					if rows_count_image > 0:
						product_meta_image = cursor.fetchone()
						customer_product[tkey]['product_image'] = product_meta_image['product_image']
					else:
						customer_product[tkey]['product_image'] = ""

					if tdata['meta_key_text'] :	
						a_string = tdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = []

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							customer_product[tkey]['met_key_value'] = met_key

					get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
					getdata_discount = (tdata['product_meta_id'])
					count_dicscount = cursor.execute(get_query_discount,getdata_discount)

					if count_dicscount > 0:
						product_meta_discount = cursor.fetchone()
						customer_product[tkey]['discount'] = product_meta_discount['discount']

						discount = (tdata['out_price']/100)*product_meta_discount['discount']
						actual_amount = tdata['out_price'] - discount
						customer_product[tkey]['after_discounted_price'] = round(actual_amount,2)

					else:
						customer_product[tkey]['discount'] = 0
						customer_product[tkey]['after_discounted_price'] = tdata['out_price']

					qty_quey = ("""SELECT `qty` 
						FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
					qty_data = (tdata['mapping_id'])
					rows_count_qty = cursor.execute(qty_quey,qty_data)
					if rows_count_qty > 0:
						qty = cursor.fetchone()
						customer_product[tkey]['qty'] = qty['qty']
					else:
						customer_product[tkey]['qty'] = ""	

				order_data[key]['customer_product'] = customer_product

			return ({"attributes": {
					"status_desc": "order_history",
					"status": "success"
				},
					"responseList":order_data}), status.HTTP_200_OK

		else:

			return ({"attributes": {
			    		"status_desc": "order_history",
			    		"status": "success"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK

#----------------------Order-History---------------------#

#----------------------Order-History---------------------#

@name_space.route("/orderHistoryWithPagination/<int:user_id>/<int:page>")	
class orderHistoryWithPagination(Resource):
	def get(self,user_id,page):

		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT ipr.`transaction_id`,ipr.`amount`,ipr.`status`,ipr.`invoice_url`,
			a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,a.`pincode`
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s order by ipr.`transaction_id` DESC limit %s,20""")

		getData = (user_id,offset)
			
		count = cursor.execute(get_query,getData)

		if count > 0:
			order_data = cursor.fetchall()

			for key,data in enumerate(order_data):
				product_status = "o"
				customer_product_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
					pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
					FROM `order_product` op
					INNER JOIN `customer_product_mapping` cpm ON cpm.`mapping_id` = op.`customer_mapping_id` 
					INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
					INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
					where op.`transaction_id` = %s and cpm.`product_status` = %s """)	

				customer_product_data = (data['transaction_id'],product_status)
				cursor.execute(customer_product_query,customer_product_data)

				customer_product = cursor.fetchall()

				for tkey,tdata in enumerate(customer_product):			
					get_product_meta_image_quey = ("""SELECT `image` as `product_image`
						FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
					product_meta_image_data = (tdata['product_meta_id'])
					rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
					if rows_count_image > 0:
						product_meta_image = cursor.fetchone()
						customer_product[tkey]['product_image'] = product_meta_image['product_image']
					else:
						customer_product[tkey]['product_image'] = ""

					if tdata['meta_key_text'] :	
						a_string = tdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = []

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							customer_product[tkey]['met_key_value'] = met_key

					get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
					getdata_discount = (tdata['product_meta_id'])
					count_dicscount = cursor.execute(get_query_discount,getdata_discount)

					if count_dicscount > 0:
						product_meta_discount = cursor.fetchone()
						customer_product[tkey]['discount'] = product_meta_discount['discount']

						discount = (tdata['out_price']/100)*product_meta_discount['discount']
						actual_amount = tdata['out_price'] - discount
						customer_product[tkey]['after_discounted_price'] = round(actual_amount,2)

					else:
						customer_product[tkey]['discount'] = 0
						customer_product[tkey]['after_discounted_price'] = tdata['out_price']

					qty_quey = ("""SELECT `qty` 
						FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
					qty_data = (tdata['mapping_id'])
					rows_count_qty = cursor.execute(qty_quey,qty_data)
					if rows_count_qty > 0:
						qty = cursor.fetchone()
						customer_product[tkey]['qty'] = qty['qty']
					else:
						customer_product[tkey]['qty'] = ""	

				order_data[key]['customer_product'] = customer_product

			get_query_count = ("""SELECT count(*) as order_count
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s""")

			getDataCount = (user_id)
			
			cursor.execute(get_query_count,getDataCount)

			Ordercount = cursor.fetchone()

			page_count = math.trunc(Ordercount['order_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
					"status_desc": "order_history",
					"status": "success",
					"page_count": page_count,
					"page": page
				},
					"responseList":order_data}), status.HTTP_200_OK

		else:

			return ({"attributes": {
			    		"status_desc": "order_history",
			    		"status": "success",
			    		"page_count":1,
			    		"page": page
			    	},
			    	"responseList":[] }), status.HTTP_200_OK

#----------------------Order-History---------------------#

#----------------------Order-History---------------------#

@name_space.route("/orderHistoryWithPaginationWithOrganisation/<int:user_id>/<int:page>/<int:organisation_id>")	
class orderHistoryWithPaginationWithOrganisation(Resource):
	def get(self,user_id,page,organisation_id):

		if page == 1:
			offset = 0
		else:
			offset = page*20

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT ipr.`transaction_id`,ipr.`amount`,ipr.`status`,ipr.`invoice_url`,
			a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,a.`pincode`,last_update_ts
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s and ipr.`organisation_id` = %s order by ipr.`transaction_id` DESC limit %s,20""")

		getData = (user_id,organisation_id,offset)
			
		count = cursor.execute(get_query,getData)
		print(cursor._last_executed)

		if count > 0:
			order_data = cursor.fetchall()

			for key,data in enumerate(order_data):
				order_data[key]['last_update_ts'] = str(data['last_update_ts'])
				product_status = "o"
				customer_product_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
					pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
					FROM `order_product` op
					INNER JOIN `customer_product_mapping` cpm ON cpm.`mapping_id` = op.`customer_mapping_id` 
					INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
					INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
					where op.`transaction_id` = %s and cpm.`product_status` = %s """)	

				customer_product_data = (data['transaction_id'],product_status)
				cursor.execute(customer_product_query,customer_product_data)

				customer_product = cursor.fetchall()

				for tkey,tdata in enumerate(customer_product):			
					get_product_meta_image_quey = ("""SELECT `image` as `product_image`
						FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
					product_meta_image_data = (tdata['product_meta_id'])
					rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
					if rows_count_image > 0:
						product_meta_image = cursor.fetchone()
						customer_product[tkey]['product_image'] = product_meta_image['product_image']
					else:
						customer_product[tkey]['product_image'] = ""

					if tdata['meta_key_text'] :	
						a_string = tdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = []

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							customer_product[tkey]['met_key_value'] = met_key

					get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
					get_out_price_data = (organisation_id, tdata['product_meta_id'])
					count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)

					if count_out_price_data >0:
						out_price_data = cursor.fetchone()
						customer_product[tkey]['out_price'] = out_price_data['out_price']
					else:
						customer_product[tkey]['out_price'] = tdata['out_price']

					get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
					getdata_discount = (tdata['product_meta_id'])
					count_dicscount = cursor.execute(get_query_discount,getdata_discount)

					if count_dicscount > 0:
						product_meta_discount = cursor.fetchone()
						customer_product[tkey]['discount'] = product_meta_discount['discount']

						discount = (tdata['out_price']/100)*product_meta_discount['discount']
						actual_amount = tdata['out_price'] - discount
						customer_product[tkey]['after_discounted_price'] = round(actual_amount,2)

					else:
						customer_product[tkey]['discount'] = 0
						customer_product[tkey]['after_discounted_price'] = tdata['out_price']

					qty_quey = ("""SELECT `qty` 
						FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
					qty_data = (tdata['mapping_id'])
					rows_count_qty = cursor.execute(qty_quey,qty_data)
					if rows_count_qty > 0:
						qty = cursor.fetchone()
						customer_product[tkey]['qty'] = qty['qty']
					else:
						customer_product[tkey]['qty'] = ""	

				order_data[key]['customer_product'] = customer_product

			get_query_count = ("""SELECT count(*) as order_count
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s and ipr.`organisation_id` = %s""")

			getDataCount = (user_id,organisation_id)
			
			cursor.execute(get_query_count,getDataCount)

			Ordercount = cursor.fetchone()

			page_count = math.trunc(Ordercount['order_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1

			return ({"attributes": {
					"status_desc": "order_history",
					"status": "success",
					"page_count": page_count,
					"page": page
				},
					"responseList":order_data}), status.HTTP_200_OK

		else:

			return ({"attributes": {
			    		"status_desc": "order_history",
			    		"status": "success",
			    		"page_count":1,
			    		"page": page
			    	},
			    	"responseList":[] }), status.HTTP_200_OK

#----------------------Order-History---------------------#

#----------------------Order-Details---------------------#

@name_space.route("/orderDetails/<int:user_id>/<int:order_id>")	
class orderDetails(Resource):
	def get(self,user_id,order_id):		

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT ipr.`transaction_id`,ipr.`amount`,ipr.`status`,ipr.`invoice_url`,ipr.`delivery_charges`,
			a.`address_line_1`,a.`address_line_2`,a.`city`,a.`country`,a.`state`,a.`pincode`,ipr.`organisation_id`
			FROM `instamojo_payment_request` ipr
			INNER JOIN `admins` a ON a.`admin_id` = ipr.`user_id` 
			WHERE  ipr.`user_id` = %s and ipr.`transaction_id` = %s""")

		getData = (user_id,order_id)
			
		count = cursor.execute(get_query,getData)

		if count > 0:
			order_data = cursor.fetchone()

			print(order_data)
			
			product_status = "o"
			customer_product_query =  ("""SELECT cpm.`mapping_id`,p.`product_id`,p.`product_name`,pm.`product_meta_id`,
					pm.`out_price`,pm.`product_meta_code`,pm.`meta_key_text`
					FROM `order_product` op
					INNER JOIN `customer_product_mapping` cpm ON cpm.`mapping_id` = op.`customer_mapping_id` 
					INNER JOIN `product_meta` pm ON cpm.`product_meta_id` = pm.`product_meta_id`
					INNER JOIN `product` p ON pm.`product_id` = p.`product_id`
					where op.`transaction_id` = %s and cpm.`product_status` = %s """)	

			customer_product_data = (order_data['transaction_id'],product_status)
			cursor.execute(customer_product_query,customer_product_data)

			customer_product = cursor.fetchall()

			for tkey,tdata in enumerate(customer_product):			
				get_product_meta_image_quey = ("""SELECT `image` as `product_image`
						FROM `product_meta_images` WHERE `product_meta_id` = %s and default_image_flag = 1""")
				product_meta_image_data = (tdata['product_meta_id'])
				rows_count_image = cursor.execute(get_product_meta_image_quey,product_meta_image_data)
				if rows_count_image > 0:
					product_meta_image = cursor.fetchone()
					customer_product[tkey]['product_image'] = product_meta_image['product_image']
				else:
					customer_product[tkey]['product_image'] = ""

				if 	tdata['meta_key_text'] :
					a_string = tdata['meta_key_text']
					a_list = a_string.split(',')

					met_key = []

					for a in a_list:
						get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
						getdata_key_value = (a)
						cursor.execute(get_query_key_value,getdata_key_value)
						met_key_value_data = cursor.fetchone()

						get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
						getdata_key = (met_key_value_data['meta_key_id'])
						cursor.execute(get_query_key,getdata_key)
						met_key_data = cursor.fetchone()

						met_key.append({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

						customer_product[tkey]['met_key_value'] = met_key

				get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
				get_out_price_data = (order_data['organisation_id'], tdata['product_meta_id'])
				count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
				if count_out_price_data >0:
					out_price_data = cursor.fetchone()
					customer_product[tkey]['out_price'] = out_price_data['out_price']
				else:
					customer_product[tkey]['out_price'] = tdata['out_price']

				get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
				getdata_discount = (tdata['product_meta_id'])
				count_dicscount = cursor.execute(get_query_discount,getdata_discount)

				if count_dicscount > 0:
					product_meta_discount = cursor.fetchone()
					customer_product[tkey]['discount'] = product_meta_discount['discount']

					discount = (tdata['out_price']/100)*product_meta_discount['discount']
					actual_amount = tdata['out_price'] - discount
					customer_product[tkey]['after_discounted_price'] = round(actual_amount,2)

				else:
					customer_product[tkey]['discount'] = 0
					customer_product[tkey]['after_discounted_price'] = tdata['out_price']

				qty_quey = ("""SELECT `qty` 
						FROM `customer_product_mapping_qty` WHERE `customer_mapping_id` = %s""")
				qty_data = (tdata['mapping_id'])
				rows_count_qty = cursor.execute(qty_quey,qty_data)
				if rows_count_qty > 0:
					qty = cursor.fetchone()
					customer_product[tkey]['qty'] = qty['qty']
				else:
					customer_product[tkey]['qty'] = ""	

			order_data['customer_product'] = customer_product

			get_query_redeem = ("""SELECT `redeem_point`,`remarks`
												FROM `redeem_history` rh												
												WHERE `transaction_id` = %s and `customer_id` = %s""")
			getdata_redeem = (order_id,user_id)
			count_redeem = cursor.execute(get_query_redeem,getdata_redeem)

			if count_redeem > 0:
				redeem_data = cursor.fetchone()
				order_data['remarks'] = redeem_data['remarks']
				order_data['redeem_point'] = redeem_data['redeem_point']

			else:
				order_data['redeem_point'] = 0
				order_data['remarks'] = ""			

			return ({"attributes": {
					"status_desc": "order_history",
					"status": "success"
				},
					"responseList":order_data}), status.HTTP_200_OK

		else:

			return ({"attributes": {
			    		"status_desc": "order_history",
			    		"status": "success"
			    	},
			    	"responseList":{} }), status.HTTP_200_OK

#----------------------Order-Details---------------------#


#----------------------search---------------------#
@name_space.route("/Search/<string:product_name>/<int:user_id>/<int:organisation_id>")	
class Search(Resource):
	def get(self,product_name,user_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_meta_query = ("""SELECT `meta_key_id` as `meta_key_value_id`,`meta_key` as `meta_key_value`
			FROM `meta_key_master` WHERE  `meta_key` LIKE %s and `organisation_id` = %s and `status` = 1""")

		getMetaData = ("%"+product_name+"%",organisation_id)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)

		if count_meta_data >0:
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				product_status = 1
				get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					WHERE p.`category_id`= %s and p.`organisation_id` = %s and p.`status` = %s""")
				getProductData = (data['meta_key_value_id'],organisation_id,product_status)
				count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:
					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key


						get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
				
						get_favourite = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

						getFavData = (pdata['product_meta_id'],user_id,organisation_id)
				
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
						getCartData = (pdata['product_meta_id'],user_id,organisation_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)
					
			
			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success"
				},
					"responseList":search_meta}), status.HTTP_200_OK
		else:
			product_status = 1
			get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`
			 	FROM `product_brand_mapping` pb 
			 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
			 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				WHERE m.`meta_key_value` LIKE %s and p.`organisation_id` = %s and p.`status` = %s""")
			getProductData = ("%"+product_name+"%",organisation_id,product_status)
			count_product_data = cursor.execute(get_product_query,getProductData)

			if count_product_data > 0:
				search_meta = cursor.fetchall()

				for key,data in enumerate(search_meta):
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						WHERE p.`product_id` = %s and p.`organisation_id` = %s and p.`status` = %s""")
					getProductData = (data['product_id'],organisation_id,product_status)
					count_product_data = cursor.execute(get_product_query,getProductData)

					if count_product_data > 0:
						product_data = cursor.fetchall()

						for pkey,pdata in enumerate(product_data):

							a_string = pdata['meta_key_text']
							a_list = a_string.split(',')

							met_key = {}

							for a in a_list:
								get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
								getdata_key_value = (a)
								cursor.execute(get_query_key_value,getdata_key_value)
								met_key_value_data = cursor.fetchone()

								get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
								getdata_key = (met_key_value_data['meta_key_id'])
								cursor.execute(get_query_key,getdata_key)
								met_key_data = cursor.fetchone()

								met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

								product_data[pkey]['met_key_value'] = met_key


							get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
							getdata_image = (pdata['product_meta_id'])
							product_image_count = cursor.execute(get_query_image,getdata_image)

							if product_image_count >0 :
								product_image = cursor.fetchone()
								product_data[pkey]['image'] = product_image['image']
							else:
								product_data[pkey]['image'] = ""

							get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
							getdata_discount = (pdata['product_meta_id'])
							count_dicscount = cursor.execute(get_query_discount,getdata_discount)

							if count_dicscount > 0:
								product_meta_discount = cursor.fetchone()
								product_data[pkey]['discount'] = product_meta_discount['discount']

								discount = (pdata['out_price']/100)*product_meta_discount['discount']
								actual_amount = pdata['out_price'] - discount

								product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
							else:
								product_data[pkey]['discount'] = 0
								product_data[pkey]['after_discounted_price'] = pdata['out_price']

							product_data[pkey]['rating'] = 4.3
					
							get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

							getFavData = (pdata['product_meta_id'],user_id,organisation_id)
					
							count_fav_product = cursor.execute(get_favourite,getFavData)

							if count_fav_product > 0:
								product_data[pkey]['is_favourite'] = "y"
							else:
								product_data[pkey]['is_favourite'] = "n"

							get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
							getCartData = (pdata['product_meta_id'],user_id,organisation_id)
							count_cart_product = cursor.execute(get_cart,getCartData)

							if count_cart_product > 0:
								product_data[pkey]['is_cart'] = "y"
							else:
								product_data[pkey]['is_cart'] = "n"

						search_meta[key]['product_list'] = product_data
					else:					
						search_meta.pop(key)

			else:
				product_status = 1
				get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
					WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s""")
				getProductData = ("%"+product_name+"%",organisation_id,product_status)
				count_product_data = cursor.execute(get_product_query,getProductData)

					
				if count_product_data > 0:
					product_status = 1
					search_meta = cursor.fetchall()

					for key,data in enumerate(search_meta):
						get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							WHERE p.`product_id` = %s and p.`organisation_id` = %s and p.`status` = %s""")
						getProductData = (data['product_id'],organisation_id,product_status)
						count_product_data = cursor.execute(get_product_query,getProductData)

						if count_product_data > 0:
							product_data = cursor.fetchall()

							for pkey,pdata in enumerate(product_data):

								a_string = pdata['meta_key_text']
								a_list = a_string.split(',')

								met_key = {}

								for a in a_list:
									get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
													FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
									getdata_key_value = (a)
									cursor.execute(get_query_key_value,getdata_key_value)
									met_key_value_data = cursor.fetchone()

									get_query_key = ("""SELECT `meta_key`
													FROM `meta_key_master` WHERE `meta_key_id` = %s """)
									getdata_key = (met_key_value_data['meta_key_id'])
									cursor.execute(get_query_key,getdata_key)
									met_key_data = cursor.fetchone()

									met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

									product_data[pkey]['met_key_value'] = met_key


								get_query_image = ("""SELECT `image`
													FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
								getdata_image = (pdata['product_meta_id'])
								product_image_count = cursor.execute(get_query_image,getdata_image)

								if product_image_count >0 :
									product_image = cursor.fetchone()
									product_data[pkey]['image'] = product_image['image']
								else:
									product_data[pkey]['image'] = ""

								get_query_discount = ("""SELECT `discount`
													FROM `product_meta_discount_mapping` pdm
													INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
													WHERE `product_meta_id` = %s """)
								getdata_discount = (pdata['product_meta_id'])
								count_dicscount = cursor.execute(get_query_discount,getdata_discount)

								if count_dicscount > 0:
									product_meta_discount = cursor.fetchone()
									product_data[pkey]['discount'] = product_meta_discount['discount']

									discount = (pdata['out_price']/100)*product_meta_discount['discount']
									actual_amount = pdata['out_price'] - discount

									product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
								else:
									product_data[pkey]['discount'] = 0
									product_data[pkey]['after_discounted_price'] = pdata['out_price']

								product_data[pkey]['rating'] = 4.3
						
								get_favourite = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

								getFavData = (pdata['product_meta_id'],user_id,organisation_id)
						
								count_fav_product = cursor.execute(get_favourite,getFavData)

								if count_fav_product > 0:
									product_data[pkey]['is_favourite'] = "y"
								else:
									product_data[pkey]['is_favourite'] = "n"

								get_cart = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
								getCartData = (pdata['product_meta_id'],user_id,organisation_id)
								count_cart_product = cursor.execute(get_cart,getCartData)

								if count_cart_product > 0:
									product_data[pkey]['is_cart'] = "y"
								else:
									product_data[pkey]['is_cart'] = "n"

							search_meta[key]['product_list'] = product_data
						else:					
							search_meta.pop(key)
				else:
					product_status = 1
					get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`
				 	FROM `product_category_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
					WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status)
					count_product_data = cursor.execute(get_product_query,getProductData)

						
					if count_product_data > 0:
						search_meta = cursor.fetchall()

						for key,data in enumerate(search_meta):
							get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
								FROM `product` p
								INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
								WHERE p.`product_id` = %s and p.`organisation_id` = %s and p.`status` = %s""")
							getProductData = (data['product_id'],organisation_id,product_status)
							count_product_data = cursor.execute(get_product_query,getProductData)

							if count_product_data > 0:
								product_data = cursor.fetchall()

								for pkey,pdata in enumerate(product_data):

									a_string = pdata['meta_key_text']
									a_list = a_string.split(',')

									met_key = {}

									for a in a_list:
										get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
														FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
										getdata_key_value = (a)
										cursor.execute(get_query_key_value,getdata_key_value)
										met_key_value_data = cursor.fetchone()

										get_query_key = ("""SELECT `meta_key`
														FROM `meta_key_master` WHERE `meta_key_id` = %s """)
										getdata_key = (met_key_value_data['meta_key_id'])
										cursor.execute(get_query_key,getdata_key)
										met_key_data = cursor.fetchone()

										met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

										product_data[pkey]['met_key_value'] = met_key


									get_query_image = ("""SELECT `image`
														FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
									getdata_image = (pdata['product_meta_id'])
									product_image_count = cursor.execute(get_query_image,getdata_image)

									if product_image_count >0 :
										product_image = cursor.fetchone()
										product_data[pkey]['image'] = product_image['image']
									else:
										product_data[pkey]['image'] = ""

									get_query_discount = ("""SELECT `discount`
														FROM `product_meta_discount_mapping` pdm
														INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
														WHERE `product_meta_id` = %s """)
									getdata_discount = (pdata['product_meta_id'])
									count_dicscount = cursor.execute(get_query_discount,getdata_discount)

									if count_dicscount > 0:
										product_meta_discount = cursor.fetchone()
										product_data[pkey]['discount'] = product_meta_discount['discount']

										discount = (pdata['out_price']/100)*product_meta_discount['discount']
										actual_amount = pdata['out_price'] - discount

										product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
									else:
										product_data[pkey]['discount'] = 0
										product_data[pkey]['after_discounted_price'] = pdata['out_price']

									product_data[pkey]['rating'] = 4.3
							
									get_favourite = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s """)

									getFavData = (pdata['product_meta_id'],user_id,organisation_id)
							
									count_fav_product = cursor.execute(get_favourite,getFavData)

									if count_fav_product > 0:
										product_data[pkey]['is_favourite'] = "y"
									else:
										product_data[pkey]['is_favourite'] = "n"

									get_cart = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c"  and `organisation_id` = %s""")
									getCartData = (pdata['product_meta_id'],user_id,organisation_id)
									count_cart_product = cursor.execute(get_cart,getCartData)

									if count_cart_product > 0:
										product_data[pkey]['is_cart'] = "y"
									else:
										product_data[pkey]['is_cart'] = "n"

								search_meta[key]['product_list'] = product_data
							else:					
								search_meta.pop(key)		
					else:
						search_meta = []	

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success"
				},
					"responseList":search_meta}), status.HTTP_200_OK

#----------------------search---------------------#

#----------------------search-With-Language---------------------#
@name_space.route("/SearchWithLanguage/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>")	
class SearchWithLanguage(Resource):
	def get(self,product_name,user_id,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_meta_query = ("""SELECT `meta_key_id` as `meta_key_value_id`,`meta_key` as `meta_key_value`
			FROM `meta_key_master` WHERE  `meta_key` LIKE %s and `status` = 1 and `language` = %s""")

		getMetaData = ("%"+product_name+"%",language)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)

		if count_meta_data >0:
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				product_status = 1
				get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					WHERE p.`category_id`= %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductData = (data['meta_key_value_id'],organisation_id,product_status,language)
				count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:
					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key


						get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
				
						get_favourite = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w"  and `organisation_id` = %s""")

						getFavData = (pdata['product_meta_id'],user_id,organisation_id)
				
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c"  and `organisation_id` = %s""")
						getCartData = (pdata['product_meta_id'],user_id,organisation_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)
					
			
			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success"
				},
					"responseList":search_meta}), status.HTTP_200_OK
		else:
			product_status = 1
			get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`
			 	FROM `product_brand_mapping` pb 
			 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
			 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				WHERE m.`meta_key_value` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
			getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
			count_product_data = cursor.execute(get_product_query,getProductData)

			if count_product_data > 0:
				search_meta = cursor.fetchall()

				for key,data in enumerate(search_meta):
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						WHERE p.`product_id` = %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductData = (data['product_id'],organisation_id,product_status,language)
					count_product_data = cursor.execute(get_product_query,getProductData)

					if count_product_data > 0:
						product_data = cursor.fetchall()

						for pkey,pdata in enumerate(product_data):

							a_string = pdata['meta_key_text']
							a_list = a_string.split(',')

							met_key = {}

							for a in a_list:
								get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
								getdata_key_value = (a)
								cursor.execute(get_query_key_value,getdata_key_value)
								met_key_value_data = cursor.fetchone()

								get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
								getdata_key = (met_key_value_data['meta_key_id'])
								cursor.execute(get_query_key,getdata_key)
								met_key_data = cursor.fetchone()

								met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

								product_data[pkey]['met_key_value'] = met_key


							get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
							getdata_image = (pdata['product_meta_id'])
							product_image_count = cursor.execute(get_query_image,getdata_image)

							if product_image_count >0 :
								product_image = cursor.fetchone()
								product_data[pkey]['image'] = product_image['image']
							else:
								product_data[pkey]['image'] = ""

							get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
							getdata_discount = (pdata['product_meta_id'])
							count_dicscount = cursor.execute(get_query_discount,getdata_discount)

							if count_dicscount > 0:
								product_meta_discount = cursor.fetchone()
								product_data[pkey]['discount'] = product_meta_discount['discount']

								discount = (pdata['out_price']/100)*product_meta_discount['discount']
								actual_amount = pdata['out_price'] - discount

								product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
							else:
								product_data[pkey]['discount'] = 0
								product_data[pkey]['after_discounted_price'] = pdata['out_price']

							product_data[pkey]['rating'] = 4.3
					
							get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

							getFavData = (pdata['product_meta_id'],user_id,organisation_id)
					
							count_fav_product = cursor.execute(get_favourite,getFavData)

							if count_fav_product > 0:
								product_data[pkey]['is_favourite'] = "y"
							else:
								product_data[pkey]['is_favourite'] = "n"

							get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
							getCartData = (pdata['product_meta_id'],user_id,organisation_id)
							count_cart_product = cursor.execute(get_cart,getCartData)

							if count_cart_product > 0:
								product_data[pkey]['is_cart'] = "y"
							else:
								product_data[pkey]['is_cart'] = "n"

						search_meta[key]['product_list'] = product_data
					else:					
						search_meta.pop(key)

			else:
				product_status = 1
				get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,p.`product_id`
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
					WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
				count_product_data = cursor.execute(get_product_query,getProductData)

					
				if count_product_data > 0:
					product_status = 1
					search_meta = cursor.fetchall()

					for key,data in enumerate(search_meta):
						get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							WHERE p.`product_id` = %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s """)
						getProductData = (data['product_id'],organisation_id,product_status,language)
						count_product_data = cursor.execute(get_product_query,getProductData)

						if count_product_data > 0:
							product_data = cursor.fetchall()

							for pkey,pdata in enumerate(product_data):

								a_string = pdata['meta_key_text']
								a_list = a_string.split(',')

								met_key = {}

								for a in a_list:
									get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
													FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
									getdata_key_value = (a)
									cursor.execute(get_query_key_value,getdata_key_value)
									met_key_value_data = cursor.fetchone()

									get_query_key = ("""SELECT `meta_key`
													FROM `meta_key_master` WHERE `meta_key_id` = %s """)
									getdata_key = (met_key_value_data['meta_key_id'])
									cursor.execute(get_query_key,getdata_key)
									met_key_data = cursor.fetchone()

									met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

									product_data[pkey]['met_key_value'] = met_key


								get_query_image = ("""SELECT `image`
													FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
								getdata_image = (pdata['product_meta_id'])
								product_image_count = cursor.execute(get_query_image,getdata_image)

								if product_image_count >0 :
									product_image = cursor.fetchone()
									product_data[pkey]['image'] = product_image['image']
								else:
									product_data[pkey]['image'] = ""

								get_query_discount = ("""SELECT `discount`
													FROM `product_meta_discount_mapping` pdm
													INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
													WHERE `product_meta_id` = %s """)
								getdata_discount = (pdata['product_meta_id'])
								count_dicscount = cursor.execute(get_query_discount,getdata_discount)

								if count_dicscount > 0:
									product_meta_discount = cursor.fetchone()
									product_data[pkey]['discount'] = product_meta_discount['discount']

									discount = (pdata['out_price']/100)*product_meta_discount['discount']
									actual_amount = pdata['out_price'] - discount

									product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
								else:
									product_data[pkey]['discount'] = 0
									product_data[pkey]['after_discounted_price'] = pdata['out_price']

								product_data[pkey]['rating'] = 4.3
						
								get_favourite = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

								getFavData = (pdata['product_meta_id'],user_id,organisation_id)
						
								count_fav_product = cursor.execute(get_favourite,getFavData)

								if count_fav_product > 0:
									product_data[pkey]['is_favourite'] = "y"
								else:
									product_data[pkey]['is_favourite'] = "n"

								get_cart = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c"  and `organisation_id` = %s""")
								getCartData = (pdata['product_meta_id'],user_id,organisation_id)
								count_cart_product = cursor.execute(get_cart,getCartData)

								if count_cart_product > 0:
									product_data[pkey]['is_cart'] = "y"
								else:
									product_data[pkey]['is_cart'] = "n"

							search_meta[key]['product_list'] = product_data
						else:					
							search_meta.pop(key)
				else:
					product_status = 1
					get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`
				 	FROM `product_category_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
					WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
					count_product_data = cursor.execute(get_product_query,getProductData)

						
					if count_product_data > 0:
						search_meta = cursor.fetchall()

						for key,data in enumerate(search_meta):
							get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
								FROM `product` p
								INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
								WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
							getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
							count_product_data = cursor.execute(get_product_query,getProductData)

							if count_product_data > 0:
								product_data = cursor.fetchall()

								for pkey,pdata in enumerate(product_data):

									a_string = pdata['meta_key_text']
									a_list = a_string.split(',')

									met_key = {}

									for a in a_list:
										get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
														FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
										getdata_key_value = (a)
										cursor.execute(get_query_key_value,getdata_key_value)
										met_key_value_data = cursor.fetchone()

										get_query_key = ("""SELECT `meta_key`
														FROM `meta_key_master` WHERE `meta_key_id` = %s """)
										getdata_key = (met_key_value_data['meta_key_id'])
										cursor.execute(get_query_key,getdata_key)
										met_key_data = cursor.fetchone()

										met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

										product_data[pkey]['met_key_value'] = met_key


									get_query_image = ("""SELECT `image`
														FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
									getdata_image = (pdata['product_meta_id'])
									product_image_count = cursor.execute(get_query_image,getdata_image)

									if product_image_count >0 :
										product_image = cursor.fetchone()
										product_data[pkey]['image'] = product_image['image']
									else:
										product_data[pkey]['image'] = ""

									get_query_discount = ("""SELECT `discount`
														FROM `product_meta_discount_mapping` pdm
														INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
														WHERE `product_meta_id` = %s """)
									getdata_discount = (pdata['product_meta_id'])
									count_dicscount = cursor.execute(get_query_discount,getdata_discount)

									if count_dicscount > 0:
										product_meta_discount = cursor.fetchone()
										product_data[pkey]['discount'] = product_meta_discount['discount']

										discount = (pdata['out_price']/100)*product_meta_discount['discount']
										actual_amount = pdata['out_price'] - discount

										product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
									else:
										product_data[pkey]['discount'] = 0
										product_data[pkey]['after_discounted_price'] = pdata['out_price']

									product_data[pkey]['rating'] = 4.3
							
									get_favourite = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

									getFavData = (pdata['product_meta_id'],user_id,organisation_id)
							
									count_fav_product = cursor.execute(get_favourite,getFavData)

									if count_fav_product > 0:
										product_data[pkey]['is_favourite'] = "y"
									else:
										product_data[pkey]['is_favourite'] = "n"

									get_cart = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c"  and `organisation_id` = %s""")
									getCartData = (pdata['product_meta_id'],user_id,organisation_id)
									count_cart_product = cursor.execute(get_cart,getCartData)

									if count_cart_product > 0:
										product_data[pkey]['is_cart'] = "y"
									else:
										product_data[pkey]['is_cart'] = "n"

								search_meta[key]['product_list'] = product_data
							else:					
								search_meta.pop(key)		
					else:
						search_meta = []	

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success"
				},
					"responseList":search_meta}), status.HTTP_200_OK

#----------------------search-With-Language---------------------#

#----------------------search-With-Language-And-Pagination---------------------#
@name_space.route("/SearchWithLanguageAndPagination/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class SearchWithLanguageAndPagination(Resource):
	def get(self,product_name,user_id,organisation_id,language,page):			

		if page == 1:
			offset = 0
			offsetvariation = 0
		else:
			offset = (page - 1)*20
			offsetvariation = page *2

		connection = mysql_connection()
		cursor = connection.cursor()

		get_meta_query = ("""SELECT `meta_key_id` as `meta_key_value_id`,`meta_key` as `meta_key_value`
			FROM `meta_key_master` WHERE  `meta_key` LIKE %s and `status` = 1 and `language` = %s and `organisation_id` = %s """)

		getMetaData = ("%"+product_name+"%",language,offset)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)

		if count_meta_data >0:
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				product_status = 1
				get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
					pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					WHERE p.`category_id`= %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
				getProductData = (data['meta_key_value_id'],organisation_id,product_status,language,offsetvariation)
				count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:
					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key


						get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
				
						get_favourite = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

						getFavData = (pdata['product_meta_id'],user_id,organisation_id)
				
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
						getCartData = (pdata['product_meta_id'],user_id,organisation_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)
			
			get_product_query_count = ("""SELECT count(*) as product_count
					FROM `product` p
					INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
					WHERE p.`category_id`= %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
			getProductDataCount = (data['meta_key_value_id'],organisation_id,product_status,language,offset)
			cursor.execute(get_product_query_count,getProductDataCount)
			product_data_count = cursor.fetchone()

			page_count = math.trunc(product_data_count['product_count']/20)

			if page_count == 0:
				page_count = 1
			else:
				page_count = page_count + 1
			
			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page":page,
					"page_count":page_count
				},
					"responseList":search_meta}), status.HTTP_200_OK
		else:
			product_status = 1
			get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
			FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = %s""")

			getMetaData = ("%"+product_name+"%",language,organisation_id)
			
			count_meta_data = cursor.execute(get_meta_query,getMetaData)

			if count_meta_data > 0:
				search_meta = cursor.fetchall()

				for key,data in enumerate(search_meta):
					get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
					 	FROM `product_brand_mapping` pb 
					 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
					 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
					 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`		 
						WHERE m.`meta_key_value` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s  limit %s,20""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
					count_product_data = cursor.execute(get_product_query,getProductData)

					if count_product_data > 0:
						product_data = cursor.fetchall()

						for pkey,pdata in enumerate(product_data):

							a_string = pdata['meta_key_text']
							a_list = a_string.split(',')

							met_key = {}

							for a in a_list:
								get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
								getdata_key_value = (a)
								cursor.execute(get_query_key_value,getdata_key_value)
								met_key_value_data = cursor.fetchone()

								get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
								getdata_key = (met_key_value_data['meta_key_id'])
								cursor.execute(get_query_key,getdata_key)
								met_key_data = cursor.fetchone()

								met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

								product_data[pkey]['met_key_value'] = met_key


							get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
							getdata_image = (pdata['product_meta_id'])
							product_image_count = cursor.execute(get_query_image,getdata_image)

							if product_image_count >0 :
								product_image = cursor.fetchone()
								product_data[pkey]['image'] = product_image['image']
							else:
								product_data[pkey]['image'] = ""

							get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
							getdata_discount = (pdata['product_meta_id'])
							count_dicscount = cursor.execute(get_query_discount,getdata_discount)

							if count_dicscount > 0:
								product_meta_discount = cursor.fetchone()
								product_data[pkey]['discount'] = product_meta_discount['discount']

								discount = (pdata['out_price']/100)*product_meta_discount['discount']
								actual_amount = pdata['out_price'] - discount

								product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
							else:
								product_data[pkey]['discount'] = 0
								product_data[pkey]['after_discounted_price'] = pdata['out_price']

							product_data[pkey]['rating'] = 4.3
					
							get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

							getFavData = (pdata['product_meta_id'],user_id,organisation_id)
					
							count_fav_product = cursor.execute(get_favourite,getFavData)

							if count_fav_product > 0:
								product_data[pkey]['is_favourite'] = "y"
							else:
								product_data[pkey]['is_favourite'] = "n"

							get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
							getCartData = (pdata['product_meta_id'],user_id,organisation_id)
							count_cart_product = cursor.execute(get_cart,getCartData)

							if count_cart_product > 0:
								product_data[pkey]['is_cart'] = "y"
							else:
								product_data[pkey]['is_cart'] = "n"

						search_meta[key]['product_list'] = product_data
					else:					
						search_meta.pop(key)

				get_product_query_count = ("""SELECT count(*) as product_count
			 	FROM `product_brand_mapping` pb 
			 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
			 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
			 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				WHERE m.`meta_key_value` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
				cursor.execute(get_product_query_count,getProductDataCount)
				
				product_data_count = cursor.fetchone()

				page_count = math.trunc(product_data_count['product_count']/20)

				if page_count == 0:
					page_count = 1
				else:
					page_count = page_count + 1

			else:
				product_status = 1
				get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = %s""")

				getMetaData = ("%"+product_name+"%",language,organisation_id)
			
				count_meta_data = cursor.execute(get_meta_query,getMetaData)

				if count_meta_data > 0:					
				
					product_status = 1
					search_meta = cursor.fetchall()

					for key,data in enumerate(search_meta):
						product_status = 1
						get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,
							p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_category_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)

						if count_product_data > 0:
							product_data = cursor.fetchall()

							for pkey,pdata in enumerate(product_data):

								a_string = pdata['meta_key_text']
								a_list = a_string.split(',')

								met_key = {}

								for a in a_list:
									get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
													FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
									getdata_key_value = (a)
									cursor.execute(get_query_key_value,getdata_key_value)
									met_key_value_data = cursor.fetchone()

									get_query_key = ("""SELECT `meta_key`
													FROM `meta_key_master` WHERE `meta_key_id` = %s """)
									getdata_key = (met_key_value_data['meta_key_id'])
									cursor.execute(get_query_key,getdata_key)
									met_key_data = cursor.fetchone()

									met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

									product_data[pkey]['met_key_value'] = met_key


								get_query_image = ("""SELECT `image`
													FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
								getdata_image = (pdata['product_meta_id'])
								product_image_count = cursor.execute(get_query_image,getdata_image)

								if product_image_count >0 :
									product_image = cursor.fetchone()
									product_data[pkey]['image'] = product_image['image']
								else:
									product_data[pkey]['image'] = ""

								get_query_discount = ("""SELECT `discount`
													FROM `product_meta_discount_mapping` pdm
													INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
													WHERE `product_meta_id` = %s """)
								getdata_discount = (pdata['product_meta_id'])
								count_dicscount = cursor.execute(get_query_discount,getdata_discount)

								if count_dicscount > 0:
									product_meta_discount = cursor.fetchone()
									product_data[pkey]['discount'] = product_meta_discount['discount']

									discount = (pdata['out_price']/100)*product_meta_discount['discount']
									actual_amount = pdata['out_price'] - discount

									product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
								else:
									product_data[pkey]['discount'] = 0
									product_data[pkey]['after_discounted_price'] = pdata['out_price']

								product_data[pkey]['rating'] = 4.3
						
								get_favourite = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

								getFavData = (pdata['product_meta_id'],user_id)
						
								count_fav_product = cursor.execute(get_favourite,getFavData)

								if count_fav_product > 0:
									product_data[pkey]['is_favourite'] = "y"
								else:
									product_data[pkey]['is_favourite'] = "n"

								get_cart = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
								getCartData = (pdata['product_meta_id'],user_id)
								count_cart_product = cursor.execute(get_cart,getCartData)

								if count_cart_product > 0:
									product_data[pkey]['is_cart'] = "y"
								else:
									product_data[pkey]['is_cart'] = "n"

							search_meta[key]['product_list'] = product_data
						else:					
							search_meta.pop(key)

					get_product_query_count = ("""SELECT count(*) as product_count
						 	FROM `product_category_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
					cursor.execute(get_product_query_count,getProductDataCount)
				
					product_data_count = cursor.fetchone()

					page_count = math.trunc(product_data_count['product_count']/20)

					if page_count == 0:
						page_count = 1
					else:
						page_count = page_count + 1

				else:
					product_status = 1
					get_product_query = ("""SELECT m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,pm.`product_meta_id`						
					 	FROM `product_brand_mapping` pb 
					 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
					 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
					 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 			 
						WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
					count_product_data = cursor.execute(get_product_query,getProductData)

						
					if count_product_data > 0:
						search_meta = cursor.fetchall()

						for key,data in enumerate(search_meta):
							get_product_query = ("""SELECT p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product` p							 		
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`		 
								WHERE pm.`product_meta_id` = %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
							getProductData = (data['product_meta_id'],organisation_id,product_status,language)
							count_product_data = cursor.execute(get_product_query,getProductData)

							if count_product_data > 0:
								product_data = cursor.fetchall()

								for pkey,pdata in enumerate(product_data):

									a_string = pdata['meta_key_text']
									a_list = a_string.split(',')

									met_key = {}

									for a in a_list:
										get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
														FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
										getdata_key_value = (a)
										cursor.execute(get_query_key_value,getdata_key_value)
										met_key_value_data = cursor.fetchone()

										get_query_key = ("""SELECT `meta_key`
														FROM `meta_key_master` WHERE `meta_key_id` = %s """)
										getdata_key = (met_key_value_data['meta_key_id'])
										cursor.execute(get_query_key,getdata_key)
										met_key_data = cursor.fetchone()

										met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

										product_data[pkey]['met_key_value'] = met_key


									get_query_image = ("""SELECT `image`
														FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
									getdata_image = (pdata['product_meta_id'])
									product_image_count = cursor.execute(get_query_image,getdata_image)

									if product_image_count >0 :
										product_image = cursor.fetchone()
										product_data[pkey]['image'] = product_image['image']
									else:
										product_data[pkey]['image'] = ""

									get_query_discount = ("""SELECT `discount`
														FROM `product_meta_discount_mapping` pdm
														INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
														WHERE `product_meta_id` = %s """)
									getdata_discount = (pdata['product_meta_id'])
									count_dicscount = cursor.execute(get_query_discount,getdata_discount)

									if count_dicscount > 0:
										product_meta_discount = cursor.fetchone()
										product_data[pkey]['discount'] = product_meta_discount['discount']

										discount = (pdata['out_price']/100)*product_meta_discount['discount']
										actual_amount = pdata['out_price'] - discount

										product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
									else:
										product_data[pkey]['discount'] = 0
										product_data[pkey]['after_discounted_price'] = pdata['out_price']

									product_data[pkey]['rating'] = 4.3
							
									get_favourite = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

									getFavData = (pdata['product_meta_id'],user_id)
							
									count_fav_product = cursor.execute(get_favourite,getFavData)

									if count_fav_product > 0:
										product_data[pkey]['is_favourite'] = "y"
									else:
										product_data[pkey]['is_favourite'] = "n"

									get_cart = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
									getCartData = (pdata['product_meta_id'],user_id)
									count_cart_product = cursor.execute(get_cart,getCartData)

									if count_cart_product > 0:
										product_data[pkey]['is_cart'] = "y"
									else:
										product_data[pkey]['is_cart'] = "n"

								search_meta[key]['product_list'] = product_data
							else:					
								search_meta.pop(key)

						get_product_query_count = ("""SELECT count(*) as product_count
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						WHERE p.`product_name` LIKE %s and p.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
						getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
						cursor.execute(get_product_query_count,getProductDataCount)
				
						product_data_count = cursor.fetchone()

						page_count = math.trunc(product_data_count['product_count']/20)

						if page_count == 0:
							page_count = 1
						else:
							page_count = page_count + 1
					else:
						search_meta = []	

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page_count":page_count,
					"page":page
				},
					"responseList":search_meta}), status.HTTP_200_OK

#----------------------search-With-Language---------------------#

#----------------------search-With-Language-And-Pagination---------------------#
@name_space.route("/SearchWithLanguageAndPaginationFromProductOrganisationMapping/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class SearchWithLanguageAndPaginationFromProductOrganisationMapping(Resource):
	def get(self,product_name,user_id,organisation_id,language,page):
		
		if page == 1:
			offset = 0
			offsetvariation = 0
		else:
			offset = (page - 1)*20
			offsetvariation = page *2

		connection = mysql_connection()
		cursor = connection.cursor()

		get_meta_query = ("""SELECT `meta_key_id` as `meta_key_value_id`,`meta_key` as `meta_key_value`
			FROM `meta_key_master` WHERE  `meta_key` LIKE %s and `status` = 1 and `language` = %s and `organisation_id` = 1 """)

		getMetaData = ("%"+product_name+"%",language)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)

		if count_meta_data >0:
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				product_status = 1

				if page >0: 
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = %s and p.`language` = %s limit %s,20""")
					getProductData = (data['meta_key_value_id'],organisation_id,product_status,product_status,language,offsetvariation)
					count_product_data = cursor.execute(get_product_query,getProductData)
				else:
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = %s and p.`language` = %s""")
					getProductData = (data['meta_key_value_id'],organisation_id,product_status,product_status,language)
					count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:
					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key

						get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
						get_out_price_data = (organisation_id, pdata['product_meta_id'])
						count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
						if count_out_price_data >0:
							out_price_data = cursor.fetchone()
							product_data[pkey]['out_price'] = out_price_data['out_price']
						else:
							product_data[pkey]['out_price'] = pdata['out_price']


						get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
				
						get_favourite = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

						getFavData = (pdata['product_meta_id'],user_id,organisation_id)
				
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
						getCartData = (pdata['product_meta_id'],user_id,organisation_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)

			if page >0:
				get_product_query_count = ("""SELECT count(*) as product_count
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = %s and p.`language` = %s""")
				getProductDataCount = (data['meta_key_value_id'],organisation_id,product_status,product_status,language)
				cursor.execute(get_product_query_count,getProductDataCount)
				product_data_count = cursor.fetchone()

				page_count = math.trunc(product_data_count['product_count']/20)

				if page_count == 0:
					page_count = 1
				else:
					page_count = page_count + 1
			else:
				get_product_query_count = ("""SELECT count(*) as product_count
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and pom.`product_status` = %s and  p.`language` = %s""")
				getProductDataCount = (data['meta_key_value_id'],organisation_id,product_status,product_status,language)
				page_count = cursor.execute(get_product_query_count,getProductDataCount)
			
			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page":page,
					"page_count":page_count
				},
					"responseList":search_meta}), status.HTTP_200_OK
		else:
			product_status = 1
			get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
			FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = 1""")

			getMetaData = ("%"+product_name+"%",language)
			
			count_meta_data = cursor.execute(get_meta_query,getMetaData)

			if count_meta_data > 0:
				search_meta = cursor.fetchall()

				for key,data in enumerate(search_meta):
					if page >0:
						get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 			 
							WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s limit %s,20""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)
					else:
						get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 			 
							WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id)
						count_product_data = cursor.execute(get_product_query,getProductData)

					if count_product_data > 0:
						product_data = cursor.fetchall()

						for pkey,pdata in enumerate(product_data):

							a_string = pdata['meta_key_text']
							a_list = a_string.split(',')

							met_key = {}

							for a in a_list:
								get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
								getdata_key_value = (a)
								cursor.execute(get_query_key_value,getdata_key_value)
								met_key_value_data = cursor.fetchone()

								get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
								getdata_key = (met_key_value_data['meta_key_id'])
								cursor.execute(get_query_key,getdata_key)
								met_key_data = cursor.fetchone()

								met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

								product_data[pkey]['met_key_value'] = met_key

							get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
							get_out_price_data = (organisation_id, pdata['product_meta_id'])
							count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
							if count_out_price_data >0:
								out_price_data = cursor.fetchone()
								product_data[pkey]['out_price'] = out_price_data['out_price']
							else:
								product_data[pkey]['out_price'] = pdata['out_price']
								
							get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
							getdata_image = (pdata['product_meta_id'])
							product_image_count = cursor.execute(get_query_image,getdata_image)

							if product_image_count >0 :
								product_image = cursor.fetchone()
								product_data[pkey]['image'] = product_image['image']
							else:
								product_data[pkey]['image'] = ""

							get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
							getdata_discount = (pdata['product_meta_id'])
							count_dicscount = cursor.execute(get_query_discount,getdata_discount)

							if count_dicscount > 0:
								product_meta_discount = cursor.fetchone()
								product_data[pkey]['discount'] = product_meta_discount['discount']

								discount = (pdata['out_price']/100)*product_meta_discount['discount']
								actual_amount = pdata['out_price'] - discount

								product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
							else:
								product_data[pkey]['discount'] = 0
								product_data[pkey]['after_discounted_price'] = pdata['out_price']

							product_data[pkey]['rating'] = 4.3
					
							get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

							getFavData = (pdata['product_meta_id'],user_id,organisation_id)
					
							count_fav_product = cursor.execute(get_favourite,getFavData)

							if count_fav_product > 0:
								product_data[pkey]['is_favourite'] = "y"
							else:
								product_data[pkey]['is_favourite'] = "n"

							get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
							getCartData = (pdata['product_meta_id'],user_id,organisation_id)
							count_cart_product = cursor.execute(get_cart,getCartData)

							if count_cart_product > 0:
								product_data[pkey]['is_cart'] = "y"
							else:
								product_data[pkey]['is_cart'] = "n"

						search_meta[key]['product_list'] = product_data
					else:					
						search_meta.pop(key)

				if page > 0:

					get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id`
				 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`				 	
					WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s""")
					getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id)
					cursor.execute(get_product_query_count,getProductDataCount)
					
					product_data_count = cursor.fetchone()

					page_count = math.trunc(product_data_count['product_count']/20)

					if page_count == 0:
						page_count = 1
					else:
						page_count = page_count + 1
				else:
					get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`				 	
					WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s""")
					getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id)
					page_count = cursor.execute(get_product_query_count,getProductDataCount)

			else:
				product_status = 1
				get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = 1""")

				getMetaData = ("%"+product_name+"%",language)
			
				count_meta_data = cursor.execute(get_meta_query,getMetaData)

				if count_meta_data > 0:					
				
					product_status = 1
					search_meta = cursor.fetchall()

					for key,data in enumerate(search_meta):
						product_status = 1

						if page > 0:
							get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,
								p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 	
								WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s limit %s,20""")
							getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id,offset)
							count_product_data = cursor.execute(get_product_query,getProductData)
						else:
							get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,
								p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 	
								WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s""")
							getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id)
							count_product_data = cursor.execute(get_product_query,getProductData)

						if count_product_data > 0:
							product_data = cursor.fetchall()

							for pkey,pdata in enumerate(product_data):

								a_string = pdata['meta_key_text']
								a_list = a_string.split(',')

								met_key = {}

								for a in a_list:
									get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
													FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
									getdata_key_value = (a)
									cursor.execute(get_query_key_value,getdata_key_value)
									met_key_value_data = cursor.fetchone()

									get_query_key = ("""SELECT `meta_key`
													FROM `meta_key_master` WHERE `meta_key_id` = %s """)
									getdata_key = (met_key_value_data['meta_key_id'])
									cursor.execute(get_query_key,getdata_key)
									met_key_data = cursor.fetchone()

									met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

									product_data[pkey]['met_key_value'] = met_key

								get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
								get_out_price_data = (organisation_id, pdata['product_meta_id'])
								count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
								if count_out_price_data >0:
									out_price_data = cursor.fetchone()
									product_data[pkey]['out_price'] = out_price_data['out_price']
								else:
									product_data[pkey]['out_price'] = pdata['out_price']


								get_query_image = ("""SELECT `image`
													FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
								getdata_image = (pdata['product_meta_id'])
								product_image_count = cursor.execute(get_query_image,getdata_image)

								if product_image_count >0 :
									product_image = cursor.fetchone()
									product_data[pkey]['image'] = product_image['image']
								else:
									product_data[pkey]['image'] = ""

								get_query_discount = ("""SELECT `discount`
													FROM `product_meta_discount_mapping` pdm
													INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
													WHERE `product_meta_id` = %s """)
								getdata_discount = (pdata['product_meta_id'])
								count_dicscount = cursor.execute(get_query_discount,getdata_discount)

								if count_dicscount > 0:
									product_meta_discount = cursor.fetchone()
									product_data[pkey]['discount'] = product_meta_discount['discount']

									discount = (pdata['out_price']/100)*product_meta_discount['discount']
									actual_amount = pdata['out_price'] - discount

									product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
								else:
									product_data[pkey]['discount'] = 0
									product_data[pkey]['after_discounted_price'] = pdata['out_price']

								product_data[pkey]['rating'] = 4.3
						
								get_favourite = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

								getFavData = (pdata['product_meta_id'],user_id,organisation_id)
						
								count_fav_product = cursor.execute(get_favourite,getFavData)

								if count_fav_product > 0:
									product_data[pkey]['is_favourite'] = "y"
								else:
									product_data[pkey]['is_favourite'] = "n"

								get_cart = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
								getCartData = (pdata['product_meta_id'],user_id,organisation_id)
								count_cart_product = cursor.execute(get_cart,getCartData)

								if count_cart_product > 0:
									product_data[pkey]['is_cart'] = "y"
								else:
									product_data[pkey]['is_cart'] = "n"

							search_meta[key]['product_list'] = product_data
						else:					
							search_meta.pop(key)

					if page > 0:

						get_product_query_count = ("""SELECT count(*) as product_count
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
								WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pb.`organisation_id` = %s and pom.`product_status` = %s""")
						getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language,organisation_id,product_status)
						cursor.execute(get_product_query_count,getProductDataCount)
					
						product_data_count = cursor.fetchone()

						page_count = math.trunc(product_data_count['product_count']/20)

						if page_count == 0:
							page_count = 1
						else:
							page_count = page_count + 1
					else:

						get_product_query_count = ("""SELECT count(*) as product_count
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
								WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pb.`organisation_id` = %s and pom.`product_status` = %s""")
						getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
						page_count = cursor.execute(get_product_query_count,getProductDataCount)

				else:	

					product_status = 1

					if page > 0:
						get_product_query = ("""SELECT m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,pm.`product_meta_id`						
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 						 			 
							WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s limit %s,20""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)
					else:
						get_product_query = ("""SELECT m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,pm.`product_meta_id`						
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 						 			 
							WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s and pom.`organisation_id` = %s""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,product_status,organisation_id)
						count_product_data = cursor.execute(get_product_query,getProductData)
						
					if count_product_data > 0:
						search_meta = cursor.fetchall()

						for key,data in enumerate(search_meta):
							get_product_query = ("""SELECT p.`product_name`,p.`product_id`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product` p							 		
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`		 
								WHERE pm.`product_meta_id` = %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s""")
							getProductData = (data['product_meta_id'],organisation_id,product_status,language,product_status)
							count_product_data = cursor.execute(get_product_query,getProductData)

							if count_product_data > 0:
								product_data = cursor.fetchall()

								for pkey,pdata in enumerate(product_data):

									a_string = pdata['meta_key_text']
									a_list = a_string.split(',')

									met_key = {}

									for a in a_list:
										get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
														FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
										getdata_key_value = (a)
										cursor.execute(get_query_key_value,getdata_key_value)
										met_key_value_data = cursor.fetchone()

										get_query_key = ("""SELECT `meta_key`
														FROM `meta_key_master` WHERE `meta_key_id` = %s """)
										getdata_key = (met_key_value_data['meta_key_id'])
										cursor.execute(get_query_key,getdata_key)
										met_key_data = cursor.fetchone()

										met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

										product_data[pkey]['met_key_value'] = met_key

									get_out_price_query = (""" SELECT `out_price` FROM `product_meta_out_price` where `organisation_id` = %s and `status` = 1 and `product_meta_id` = %s""")
									get_out_price_data = (organisation_id, pdata['product_meta_id'])
									count_out_price_data = cursor.execute(get_out_price_query,get_out_price_data)
									if count_out_price_data >0:
										out_price_data = cursor.fetchone()
										product_data[pkey]['out_price'] = out_price_data['out_price']
									else:
										product_data[pkey]['out_price'] = pdata['out_price']


									get_query_image = ("""SELECT `image`
														FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
									getdata_image = (pdata['product_meta_id'])
									product_image_count = cursor.execute(get_query_image,getdata_image)

									if product_image_count >0 :
										product_image = cursor.fetchone()
										product_data[pkey]['image'] = product_image['image']
									else:
										product_data[pkey]['image'] = ""

									get_query_discount = ("""SELECT `discount`
														FROM `product_meta_discount_mapping` pdm
														INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
														WHERE `product_meta_id` = %s """)
									getdata_discount = (pdata['product_meta_id'])
									count_dicscount = cursor.execute(get_query_discount,getdata_discount)

									if count_dicscount > 0:
										product_meta_discount = cursor.fetchone()
										product_data[pkey]['discount'] = product_meta_discount['discount']

										discount = (pdata['out_price']/100)*product_meta_discount['discount']
										actual_amount = pdata['out_price'] - discount

										product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
									else:
										product_data[pkey]['discount'] = 0
										product_data[pkey]['after_discounted_price'] = pdata['out_price']

									product_data[pkey]['rating'] = 4.3
							
									get_favourite = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

									getFavData = (pdata['product_meta_id'],user_id,organisation_id)
							
									count_fav_product = cursor.execute(get_favourite,getFavData)

									if count_fav_product > 0:
										product_data[pkey]['is_favourite'] = "y"
									else:
										product_data[pkey]['is_favourite'] = "n"

									get_cart = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
									getCartData = (pdata['product_meta_id'],user_id,organisation_id)
									count_cart_product = cursor.execute(get_cart,getCartData)

									if count_cart_product > 0:
										product_data[pkey]['is_cart'] = "y"
									else:
										product_data[pkey]['is_cart'] = "n"

								search_meta[key]['product_list'] = product_data
							else:					
								search_meta.pop(key)

						if page > 0:		
							get_product_query_count = ("""SELECT count(*) as product_count
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s""")
							getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language,product_status)
							cursor.execute(get_product_query_count,getProductDataCount)
					
							product_data_count = cursor.fetchone()

							page_count = math.trunc(product_data_count['product_count']/20)

							if page_count == 0:
								page_count = 1
							else:
								page_count = page_count + 1
						else:
							get_product_query_count = ("""SELECT count(*) as product_count
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s and pom.`product_status` = %s""")
							getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language,product_status)
							page_count = cursor.execute(get_product_query_count,getProductDataCount)
					else:
						search_meta = []	
						page_count = 0
						page = 1

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page_count":page_count,
					"page":page
				},
					"responseList":search_meta}), status.HTTP_200_OK

#----------------------search-With-Language---------------------#

#----------------------search-With-Language-And-Pagination---------------------#
@ecommerce_customer_new.route("/EcommerceCustomerNew/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
@cross_origin(origin='*',headers=['access-control-allow-origin','Content-Type'])	
def SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink(product_name,user_id,organisation_id,language,page):

#@name_space.route("/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
#class SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink(Resource):
	#def get(self,product_name,user_id,organisation_id,language,page):			

		if page == 1:
			offset = 0
			offsetvariation = 0
		else:
			offset = (page - 1)*20
			offsetvariation = page *2

		connection = mysql_connection()
		cursor = connection.cursor()

		get_meta_query = ("""SELECT `meta_key_id` as `meta_key_value_id`,`meta_key` as `meta_key_value`
			FROM `meta_key_master` WHERE  `meta_key` LIKE %s and `status` = 1 and `language` = %s and `organisation_id` = %s """)

		getMetaData = ("%"+product_name+"%",language,organisation_id)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)


		if count_meta_data >0:			
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				product_status = 1

				if page >0: 
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
					getProductData = (data['meta_key_value_id'],organisation_id,product_status,language,offsetvariation)
					count_product_data = cursor.execute(get_product_query,getProductData)
				else:
					get_product_query = ("""SELECT p.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
						pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductData = (data['meta_key_value_id'],organisation_id,product_status,language)
					count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:
					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
											FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
											FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key


						get_query_image = ("""SELECT `image`
											FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
											FROM `product_meta_discount_mapping` pdm
											INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
											WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
				
						get_favourite = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

						getFavData = (pdata['product_meta_id'],user_id,organisation_id)
				
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
							FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
						getCartData = (pdata['product_meta_id'],user_id,organisation_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)

			if page >0:
				get_product_query_count = ("""SELECT count(*) as product_count
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductDataCount = (data['meta_key_value_id'],organisation_id,product_status,language)
				cursor.execute(get_product_query_count,getProductDataCount)
				product_data_count = cursor.fetchone()

				page_count = math.trunc(product_data_count['product_count']/20)

				if page_count == 0:
					page_count = 1
					next_page = ""
					previous_page = ""
				else:
					for x in range(1, page_count+1):
						print(x)
						if page == x:
							next_page = x+1
							if next_page > page_count:
								next_page = ""
							previous_page = x-1
					page_count = page_count + 1
			else:
				get_product_query_count = ("""SELECT count(*) as product_count
						FROM `product` p
						INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
						WHERE p.`category_id`= %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductDataCount = (data['meta_key_value_id'],organisation_id,product_status,language)
				page_count = cursor.execute(get_product_query_count,getProductDataCount)
			
			if next_page:
				next_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/"+str(product_name)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(language)+"/"+str(next_page)
			else:
				next_page_link = ""

			if previous_page:
				previous_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/"+str(product_name)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(language)+"/"+str(previous_page)
			else:
				previous_page_link = ""

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page":page,
					"page_count":page_count,
					"next_page":next_page_link,
					"previous_page":previous_page_link
				},
					"responseList":search_meta}), status.HTTP_200_OK
		else:
			next_page = ""
			previous_page = ""
			product_status = 1
			get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
			FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = %s""")

			getMetaData = ("%"+product_name+"%",language,organisation_id)
			
			count_meta_data = cursor.execute(get_meta_query,getMetaData)

			if count_meta_data > 0:
				search_meta = cursor.fetchall()

				for key,data in enumerate(search_meta):
					if page >0:
						get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 			 
							WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s  limit %s,20""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)
					else:
						get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 			 
							WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)

					if count_product_data > 0:
						product_data = cursor.fetchall()

						for pkey,pdata in enumerate(product_data):

							a_string = pdata['meta_key_text']
							a_list = a_string.split(',')

							met_key = {}

							for a in a_list:
								get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
								getdata_key_value = (a)
								cursor.execute(get_query_key_value,getdata_key_value)
								met_key_value_data = cursor.fetchone()

								get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
								getdata_key = (met_key_value_data['meta_key_id'])
								cursor.execute(get_query_key,getdata_key)
								met_key_data = cursor.fetchone()

								met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

								product_data[pkey]['met_key_value'] = met_key


							get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
							getdata_image = (pdata['product_meta_id'])
							product_image_count = cursor.execute(get_query_image,getdata_image)

							if product_image_count >0 :
								product_image = cursor.fetchone()
								product_data[pkey]['image'] = product_image['image']
							else:
								product_data[pkey]['image'] = ""

							get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
							getdata_discount = (pdata['product_meta_id'])
							count_dicscount = cursor.execute(get_query_discount,getdata_discount)

							if count_dicscount > 0:
								product_meta_discount = cursor.fetchone()
								product_data[pkey]['discount'] = product_meta_discount['discount']

								discount = (pdata['out_price']/100)*product_meta_discount['discount']
								actual_amount = pdata['out_price'] - discount

								product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
							else:
								product_data[pkey]['discount'] = 0
								product_data[pkey]['after_discounted_price'] = pdata['out_price']

							product_data[pkey]['rating'] = 4.3
					
							get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

							getFavData = (pdata['product_meta_id'],user_id,organisation_id)
					
							count_fav_product = cursor.execute(get_favourite,getFavData)

							if count_fav_product > 0:
								product_data[pkey]['is_favourite'] = "y"
							else:
								product_data[pkey]['is_favourite'] = "n"

							get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
							getCartData = (pdata['product_meta_id'],user_id,organisation_id)
							count_cart_product = cursor.execute(get_cart,getCartData)

							if count_cart_product > 0:
								product_data[pkey]['is_cart'] = "y"
							else:
								product_data[pkey]['is_cart'] = "n"

						search_meta[key]['product_list'] = product_data
					else:					
						search_meta.pop(key)

				if page > 0:

					get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`				 	
					WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
					cursor.execute(get_product_query_count,getProductDataCount)
					
					product_data_count = cursor.fetchone()

					page_count = math.trunc(product_data_count['product_count']/20)
					print(product_data_count['product_count'])

					if page_count == 0:
						page_count = 1
						next_page = ""
						previous_page = ""
					else:
						for x in range(1, page_count+1):
							print(x)
							if page == x:
								next_page = x+1
								if next_page > page_count:
									next_page = ""
								previous_page = x-1
						page_count = page_count + 1
				else:
					get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`				 	
					WHERE m.`meta_key_value` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
					page_count = cursor.execute(get_product_query_count,getProductDataCount)

			else:				
				product_status = 1
				get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
					FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = %s""")

				getMetaData = ("%"+product_name+"%",language,organisation_id)
			
				count_meta_data = cursor.execute(get_meta_query,getMetaData)

				if count_meta_data > 0:					
				
					product_status = 1
					search_meta = cursor.fetchall()

					for key,data in enumerate(search_meta):
						product_status = 1

						if page > 0:
							get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,
								p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 	
								WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
							getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
							count_product_data = cursor.execute(get_product_query,getProductData)
						else:
							get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,
								p.`product_name`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 	
								WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s """)
							getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
							count_product_data = cursor.execute(get_product_query,getProductData)

						if count_product_data > 0:
							product_data = cursor.fetchall()

							for pkey,pdata in enumerate(product_data):

								a_string = pdata['meta_key_text']
								a_list = a_string.split(',')

								met_key = {}

								for a in a_list:
									get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
													FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
									getdata_key_value = (a)
									cursor.execute(get_query_key_value,getdata_key_value)
									met_key_value_data = cursor.fetchone()

									get_query_key = ("""SELECT `meta_key`
													FROM `meta_key_master` WHERE `meta_key_id` = %s """)
									getdata_key = (met_key_value_data['meta_key_id'])
									cursor.execute(get_query_key,getdata_key)
									met_key_data = cursor.fetchone()

									met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

									product_data[pkey]['met_key_value'] = met_key


								get_query_image = ("""SELECT `image`
													FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
								getdata_image = (pdata['product_meta_id'])
								product_image_count = cursor.execute(get_query_image,getdata_image)

								if product_image_count >0 :
									product_image = cursor.fetchone()
									product_data[pkey]['image'] = product_image['image']
								else:
									product_data[pkey]['image'] = ""

								get_query_discount = ("""SELECT `discount`
													FROM `product_meta_discount_mapping` pdm
													INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
													WHERE `product_meta_id` = %s """)
								getdata_discount = (pdata['product_meta_id'])
								count_dicscount = cursor.execute(get_query_discount,getdata_discount)

								if count_dicscount > 0:
									product_meta_discount = cursor.fetchone()
									product_data[pkey]['discount'] = product_meta_discount['discount']

									discount = (pdata['out_price']/100)*product_meta_discount['discount']
									actual_amount = pdata['out_price'] - discount

									product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
								else:
									product_data[pkey]['discount'] = 0
									product_data[pkey]['after_discounted_price'] = pdata['out_price']

								product_data[pkey]['rating'] = 4.3
						
								get_favourite = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

								getFavData = (pdata['product_meta_id'],user_id,organisation_id)
						
								count_fav_product = cursor.execute(get_favourite,getFavData)

								if count_fav_product > 0:
									product_data[pkey]['is_favourite'] = "y"
								else:
									product_data[pkey]['is_favourite'] = "n"

								get_cart = ("""SELECT `product_meta_id`
									FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
								getCartData = (pdata['product_meta_id'],user_id,organisation_id)
								count_cart_product = cursor.execute(get_cart,getCartData)

								if count_cart_product > 0:
									product_data[pkey]['is_cart'] = "y"
								else:
									product_data[pkey]['is_cart'] = "n"

							search_meta[key]['product_list'] = product_data
						else:					
							search_meta.pop(key)

					if page > 0:

						get_product_query_count = ("""SELECT count(*) as product_count
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
								WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
						getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
						cursor.execute(get_product_query_count,getProductDataCount)
					
						product_data_count = cursor.fetchone()

						page_count = math.trunc(product_data_count['product_count']/20)

						if page_count == 0:
							page_count = 1
							next_page = ""
							previous_page = ""
						else:
							for x in range(1, page_count+1):
								print(x)
								if page == x:
									next_page = x+1
									if next_page > page_count:
										next_page = ""
									previous_page = x-1
							page_count = page_count + 1

					else:

						get_product_query_count = ("""SELECT count(*) as product_count
							 	FROM `product_category_mapping` pb 
							 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
							 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`category_id`
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
								WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
						getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
						page_count = cursor.execute(get_product_query_count,getProductDataCount)

				else:										
					product_status = 1

					if page > 0:
						get_product_query = ("""SELECT m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,pm.`product_meta_id`						
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`						 						 			 
							WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s limit %s,20""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
						count_product_data = cursor.execute(get_product_query,getProductData)
					else:
						get_product_query = ("""SELECT m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,pm.`product_meta_id`						
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`							 						 			 
							WHERE p.`product_name` LIKE %s and pb.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
						getProductData = ("%"+product_name+"%",organisation_id,product_status,language)
						count_product_data = cursor.execute(get_product_query,getProductData)
						
					if count_product_data > 0:
						search_meta = cursor.fetchall()

						for key,data in enumerate(search_meta):
							get_product_query = ("""SELECT p.`product_name`,p.`product_id`,p.`product_short_description`,p.`product_short_description`,
								pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
							 	FROM `product` p							 		
							 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`		 
								WHERE pm.`product_meta_id` = %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
							getProductData = (data['product_meta_id'],organisation_id,product_status,language)
							count_product_data = cursor.execute(get_product_query,getProductData)

							if count_product_data > 0:
								product_data = cursor.fetchall()

								for pkey,pdata in enumerate(product_data):

									a_string = pdata['meta_key_text']
									a_list = a_string.split(',')

									met_key = {}

									for a in a_list:
										get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
														FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
										getdata_key_value = (a)
										cursor.execute(get_query_key_value,getdata_key_value)
										met_key_value_data = cursor.fetchone()

										get_query_key = ("""SELECT `meta_key`
														FROM `meta_key_master` WHERE `meta_key_id` = %s """)
										getdata_key = (met_key_value_data['meta_key_id'])
										cursor.execute(get_query_key,getdata_key)
										met_key_data = cursor.fetchone()

										met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

										product_data[pkey]['met_key_value'] = met_key


									get_query_image = ("""SELECT `image`
														FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
									getdata_image = (pdata['product_meta_id'])
									product_image_count = cursor.execute(get_query_image,getdata_image)

									if product_image_count >0 :
										product_image = cursor.fetchone()
										product_data[pkey]['image'] = product_image['image']
									else:
										product_data[pkey]['image'] = ""

									get_query_discount = ("""SELECT `discount`
														FROM `product_meta_discount_mapping` pdm
														INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
														WHERE `product_meta_id` = %s """)
									getdata_discount = (pdata['product_meta_id'])
									count_dicscount = cursor.execute(get_query_discount,getdata_discount)

									if count_dicscount > 0:
										product_meta_discount = cursor.fetchone()
										product_data[pkey]['discount'] = product_meta_discount['discount']

										discount = (pdata['out_price']/100)*product_meta_discount['discount']
										actual_amount = pdata['out_price'] - discount

										product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
									else:
										product_data[pkey]['discount'] = 0
										product_data[pkey]['after_discounted_price'] = pdata['out_price']

									product_data[pkey]['rating'] = 4.3
							
									get_favourite = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" and `organisation_id` = %s""")

									getFavData = (pdata['product_meta_id'],user_id,organisation_id)
							
									count_fav_product = cursor.execute(get_favourite,getFavData)

									if count_fav_product > 0:
										product_data[pkey]['is_favourite'] = "y"
									else:
										product_data[pkey]['is_favourite'] = "n"

									get_cart = ("""SELECT `product_meta_id`
										FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" and `organisation_id` = %s""")
									getCartData = (pdata['product_meta_id'],user_id,organisation_id)
									count_cart_product = cursor.execute(get_cart,getCartData)

									if count_cart_product > 0:
										product_data[pkey]['is_cart'] = "y"
									else:
										product_data[pkey]['is_cart'] = "n"

								search_meta[key]['product_list'] = product_data
							else:					
								search_meta.pop(key)

						if page > 0:		
							get_product_query_count = ("""SELECT count(*) as product_count
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
							getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
							cursor.execute(get_product_query_count,getProductDataCount)
					
							product_data_count = cursor.fetchone()

							page_count = math.trunc(product_data_count['product_count']/20)
							print(page_count)

							if page_count == 0:
								page_count = 1
								next_page = ""
								previous_page = ""
							else:
								for x in range(1, page_count+1):
									print(x)
									if page == x:
										next_page = x+1
										if next_page > page_count:
											next_page = ""
										previous_page = x-1
								page_count = page_count + 1

						else:
							get_product_query_count = ("""SELECT count(*) as product_count
							FROM `product` p
							INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
							INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
							WHERE p.`product_name` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
							getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
							page_count = cursor.execute(get_product_query_count,getProductDataCount)
					else:
						search_meta = []	
						page_count = 0
						page = 1
						next_page = ""
						previous_page = ""			
						
			if next_page:
				next_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/"+str(product_name)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(language)+"/"+str(next_page)
			else:
				next_page_link = ""

			if previous_page:
				previous_page_link = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/SearchWithLanguageAndPaginationFromProductOrganisationMappingWithLink/"+str(product_name)+"/"+str(user_id)+"/"+str(organisation_id)+"/"+str(language)+"/"+str(previous_page)
			else:
				previous_page_link = ""

			return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page_count":page_count,
					"page":page,
					"next_page":next_page_link,
					"previous_page":previous_page_link

				},
					"responseList":search_meta}), status.HTTP_200_OK

#----------------------search-With-Language---------------------#

#----------------------search-With-Language-And-Pagination---------------------#
@name_space.route("/SearchWithLanguageAndPaginationFromProductOrganisationMappingx/<string:product_name>/<int:user_id>/<int:organisation_id>/<string:language>/<int:page>")	
class SearchWithLanguageAndPaginationFromProductOrganisationMappingx(Resource):
	def get(self,product_name,user_id,organisation_id,language,page):
		
		if page == 1:
			offset = 0
			offsetvariation = 0
		else:
			offset = (page - 1)*20
			offsetvariation = page *2

		connection = mysql_connection()
		cursor = connection.cursor()

		product_status = 1
		get_meta_query = ("""SELECT `meta_key_value_id`,`meta_key_value`
			FROM `meta_key_value_master` WHERE  `meta_key_value` LIKE %s and `status` = 1 and `language` = %s and organisation_id = %s""")

		getMetaData = ("%"+product_name+"%",language,organisation_id)
			
		count_meta_data = cursor.execute(get_meta_query,getMetaData)

		if count_meta_data > 0:
			search_meta = cursor.fetchall()

			for key,data in enumerate(search_meta):
				if page >0:
					get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`		 
							WHERE m.`meta_key_value` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s  limit %s,20""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
					count_product_data = cursor.execute(get_product_query,getProductData)
				else:
					get_product_query = ("""SELECT p.`product_id`,m.`meta_key_value_id`,m.`meta_key_value`,pb.`product_id`,p.`product_name`,p.`product_short_description`,p.`product_short_description`,
							pm.`product_meta_id`,pm.`product_meta_code`,pm.`meta_key_text`,pm.`in_price`,pm.`out_price`
						 	FROM `product_brand_mapping` pb 
						 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
						 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`	
						 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
						 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`		 
							WHERE m.`meta_key_value` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
					getProductData = ("%"+product_name+"%",organisation_id,product_status,language,offset)
					count_product_data = cursor.execute(get_product_query,getProductData)

				if count_product_data > 0:

					product_data = cursor.fetchall()

					for pkey,pdata in enumerate(product_data):

						a_string = pdata['meta_key_text']
						a_list = a_string.split(',')

						met_key = {}

						for a in a_list:
							get_query_key_value = ("""SELECT `meta_key_id`,`meta_key_value`
												FROM `meta_key_value_master` WHERE `meta_key_value_id` = %s """)
							getdata_key_value = (a)
							cursor.execute(get_query_key_value,getdata_key_value)
							met_key_value_data = cursor.fetchone()

							get_query_key = ("""SELECT `meta_key`
												FROM `meta_key_master` WHERE `meta_key_id` = %s """)
							getdata_key = (met_key_value_data['meta_key_id'])
							cursor.execute(get_query_key,getdata_key)
							met_key_data = cursor.fetchone()

							met_key.update({met_key_data['meta_key']:met_key_value_data['meta_key_value']})

							product_data[pkey]['met_key_value'] = met_key


						get_query_image = ("""SELECT `image`
												FROM `product_meta_images` WHERE `product_meta_id` = %s and `default_image_flag` = 1""")
						getdata_image = (pdata['product_meta_id'])
						product_image_count = cursor.execute(get_query_image,getdata_image)

						if product_image_count >0 :
							product_image = cursor.fetchone()
							product_data[pkey]['image'] = product_image['image']
						else:
							product_data[pkey]['image'] = ""

						get_query_discount = ("""SELECT `discount`
												FROM `product_meta_discount_mapping` pdm
												INNER JOIN `discount_master` dm ON dm.`discount_id` = pdm.`discount_id`
												WHERE `product_meta_id` = %s """)
						getdata_discount = (pdata['product_meta_id'])
						count_dicscount = cursor.execute(get_query_discount,getdata_discount)

						if count_dicscount > 0:
							product_meta_discount = cursor.fetchone()
							product_data[pkey]['discount'] = product_meta_discount['discount']

							discount = (pdata['out_price']/100)*product_meta_discount['discount']
							actual_amount = pdata['out_price'] - discount

							product_data[pkey]['after_discounted_price'] = round(actual_amount ,2) 
						else:
							product_data[pkey]['discount'] = 0
							product_data[pkey]['after_discounted_price'] = pdata['out_price']

						product_data[pkey]['rating'] = 4.3
					
						get_favourite = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="w" """)

						getFavData = (pdata['product_meta_id'],user_id)
					
						count_fav_product = cursor.execute(get_favourite,getFavData)

						if count_fav_product > 0:
							product_data[pkey]['is_favourite'] = "y"
						else:
							product_data[pkey]['is_favourite'] = "n"

						get_cart = ("""SELECT `product_meta_id`
								FROM `customer_product_mapping` WHERE  `product_meta_id` = %s and `customer_id` = %s and product_status ="c" """)
						getCartData = (pdata['product_meta_id'],user_id)
						count_cart_product = cursor.execute(get_cart,getCartData)

						if count_cart_product > 0:
							product_data[pkey]['is_cart'] = "y"
						else:
							product_data[pkey]['is_cart'] = "n"

					search_meta[key]['product_list'] = product_data
				else:					
					search_meta.pop(key)

			if page > 0:

				get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE m.`meta_key_value` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
				cursor.execute(get_product_query_count,getProductDataCount)
					
				product_data_count = cursor.fetchone()

				page_count = math.trunc(product_data_count['product_count']/20)

				if page_count == 0:
					page_count = 1
				else:
					page_count = page_count + 1
			else:
				get_product_query_count = ("""SELECT count(*) as product_count
				 	FROM `product_brand_mapping` pb 
				 	INNER JOIN `product` p ON p.`product_id` = pb.`product_id` 
				 	INNER JOIN `meta_key_value_master` m ON m.`meta_key_value_id` = pb.`brand_id`
				 	INNER JOIN `product_meta` pm ON pm.`product_id` = p.`product_id`
				 	INNER JOIN `product_organisation_mapping` pom ON pom.`product_id` = p.`product_id`
					WHERE m.`meta_key_value` LIKE %s and pom.`organisation_id` = %s and p.`status` = %s and p.`language` = %s""")
				getProductDataCount = ("%"+product_name+"%",organisation_id,product_status,language)
				page_count = cursor.execute(get_product_query_count,getProductDataCount)

		return ({"attributes": {
					"status_desc": "product_list",
					"status": "success",
					"page_count":page_count,
					"page":page
				},
					"responseList":search_meta}), status.HTTP_200_OK


#----------------------search-With-Language-And-Pagination---------------------#


#----------------------Save-Device-Token---------------------#
@name_space.route("/saveDeviceToken")	
class saveDeviceToken(Resource):
	@api.expect(devicetoken_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()
		organisation_id = details['organisation_id']
		last_update_id = details['organisation_id']

		device_token_query = ("""SELECT `device_type`,`device_token`
				FROM `devices` WHERE `user_id` = %s and device_type = %s and `organisation_id` = %s""")
		deviceData = (details['user_id'],details['device_type'],organisation_id)
		count_device_token = cursor.execute(device_token_query,deviceData)

		if count_device_token >0 :
			update_query = ("""UPDATE `devices` SET `device_token` = %s
							WHERE `user_id` = %s and `device_type` = %s""")
			update_data = (details['device_token'],details['user_id'],details['device_type'])
			cursor.execute(update_query,update_data)
		else:
			insert_query = ("""INSERT INTO `devices`(`device_type`,`device_token`,`user_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s,%s,%s)""")

			insert_data = (details['device_type'],details['device_token'],details['user_id'],organisation_id,last_update_id)
			cursor.execute(insert_query,insert_data)

		return ({"attributes": {
				    		"status_desc": "device_token_details",
				    		"status": "success"
				    	},
				    	"responseList":details}), status.HTTP_200_OK

#----------------------Save-Device-Token---------------------#

#----------------------Product-Replication---------------------#
@name_space.route("/productReplicationx")	
class productReplicationx(Resource):
	@api.expect(productreplication_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()		

		brand_ids = details.get('brand_id',[])

		from_organisation_id = details['from_organisation_id']
		to_organisation_id = details['to_organisation_id']

		coppy_all_product = details['coppy_all_product']

		if coppy_all_product == 1:
			get_query = ("""SELECT *
					FROM  `product` WHERE `organisation_id` = %s""")
			getData = (from_organisation_id)
			count_product = cursor.execute(get_query,getData)

			if count_product > 0:
				product_data = cursor.fetchall()

				for key,data in enumerate(product_data):
					get_query_product_organisation = ("""SELECT *
							FROM  `product_organisation_mapping` WHERE `organisation_id` = %s and `product_id` = %s""")
					getDataProductOrganisation = (to_organisation_id,data['product_id'])
					count_product_organisation = cursor.execute(get_query_product_organisation,getDataProductOrganisation)

					if count_product_organisation > 0: 
						update_query = ("""UPDATE `product_organisation_mapping` SET `product_id` = %s,`organisation_id` = %s
							WHERE `organisation_id` = %s and `product_id` = %s""")
						update_data = (data['product_id'],to_organisation_id,to_organisation_id,data['product_id'])
						cursor.execute(update_query,update_data)

					else:				
						last_update_id = to_organisation_id
						insert_query = ("""INSERT INTO `product_organisation_mapping`(`product_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s)""")
						data = (data['product_id'],to_organisation_id,last_update_id)
						cursor.execute(insert_query,data)

		else:

			for keyb,brand_id in enumerate(brand_ids):

				get_query = ("""SELECT *
					FROM  `product_brand_mapping` WHERE `brand_id` = %s and `organisation_id` = %s""")
				getData = (brand_id,from_organisation_id)
				count_product = cursor.execute(get_query,getData)

				if count_product > 0:
					product_data = cursor.fetchall()

					for key,data in enumerate(product_data):
						get_query_product_organisation = ("""SELECT *
							FROM  `product_organisation_mapping` WHERE `organisation_id` = %s and `product_id` = %s""")
						getDataProductOrganisation = (to_organisation_id,data['product_id'])
						count_product_organisation = cursor.execute(get_query_product_organisation,getDataProductOrganisation)

						if count_product_organisation > 0: 
							update_query = ("""UPDATE `product_organisation_mapping` SET `product_id` = %s,`organisation_id` = %s
							WHERE `organisation_id` = %s and `product_id` = %s""")
							update_data = (data['product_id'],to_organisation_id,to_organisation_id,data['product_id'])
							cursor.execute(update_query,update_data)

						else:				
							last_update_id = to_organisation_id
							insert_query = ("""INSERT INTO `product_organisation_mapping`(`product_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s)""")
							data = (data['product_id'],to_organisation_id,last_update_id)
							cursor.execute(insert_query,data)


		return ({"attributes": {
				    		"status_desc": "Product Replication",
				    		"status": "success"
				},
				"responseList":details}), status.HTTP_200_OK


#----------------------Product-Replication---------------------#


#----------------------Product-Replication---------------------#
@name_space.route("/productReplication")	
class productReplication(Resource):
	@api.expect(productreplication_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()		

		brand_ids = details.get('brand_id',[])

		from_organisation_id = details['from_organisation_id']
		to_organisation_id = details['to_organisation_id']

		coppy_all_product = details['coppy_all_product']

		if coppy_all_product == 1:
			get_query = ("""SELECT *
					FROM  `product` WHERE `organisation_id` = %s""")
			getData = (from_organisation_id)
			count_product = cursor.execute(get_query,getData)

			if count_product > 0:
				product_data = cursor.fetchall()

				for key,data in enumerate(product_data):
					get_query_product_organisation = ("""SELECT *
							FROM  `product_organisation_mapping` WHERE `organisation_id` = %s and `product_id` = %s""")
					getDataProductOrganisation = (to_organisation_id,data['product_id'])
					count_product_organisation = cursor.execute(get_query_product_organisation,getDataProductOrganisation)

					if count_product_organisation > 0: 
						update_query = ("""UPDATE `product_organisation_mapping` SET `product_id` = %s,`organisation_id` = %s
							WHERE `organisation_id` = %s and `product_id` = %s""")
						update_data = (data['product_id'],to_organisation_id,to_organisation_id,data['product_id'])
						cursor.execute(update_query,update_data)

					else:				
						last_update_id = to_organisation_id
						insert_query = ("""INSERT INTO `product_organisation_mapping`(`product_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s)""")
						data = (data['product_id'],to_organisation_id,last_update_id)
						cursor.execute(insert_query,data)

					#print(data['product_id'])	
					#get_brand_query = ("""SELECT *
						#FROM  `product_brand_mapping` WHERE `product_id` = %s and `organisation_id` = %s""")
					#getBrandData = (data['product_id'],from_organisation_id)
					#count_brand_product = cursor.execute(get_brand_query,getBrandData)

					#if count_brand_product > 0:
						#product_brand_data = cursor.fetchone()

						#delete_query = ("""DELETE FROM `product_brand_mapping` WHERE `organisation_id` = %s and `brand_id` = %s """)
						#delData = (to_organisation_id,product_brand_data['brand_id'])
						
						#cursor.execute(delete_query,delData)	

						#last_update_id = to_organisation_id
						#insert_product_brnad_mapping_query = ("""INSERT INTO `product_brand_mapping`(`brand_id`,`product_id`,`status`,`organisation_id`,`last_update_id`)
							#VALUES(%s,%s,%s,%s,%s)""")
						#product_brand_mapping_status = 1
						#product_brand_insert_data = (product_brand_data['brand_id'],data['product_id'],product_brand_mapping_status,to_organisation_id,last_update_id)
						#cursor.execute(insert_product_brnad_mapping_query,product_brand_insert_data)

		else:

			for keyb,brand_id in enumerate(brand_ids):
				last_update_id = to_organisation_id
				get_brand_uqery = ("""SELECT *
							FROM  `organisation_brand_mapping` WHERE `organisation_id` = %s and `brand_id` = %s""")
				get_brand_data = (to_organisation_id,brand_id)
				count_brand_query = cursor.execute(get_brand_uqery,get_brand_data)
				
				if count_brand_query < 1:
					insert_brand_query = ("""INSERT INTO `organisation_brand_mapping`(`brand_id`,`organisation_id`,`last_update_id`) 
								VALUES(%s,%s,%s)""")
					brand_data = (brand_id,to_organisation_id,last_update_id)
					cursor.execute(insert_brand_query,brand_data)

				get_brand_category_query = ("""SELECT `brand_id`,`category_id`
					FROM `category_brand_mapping` WHERE  `brand_id` = %s and `organisation_id` = %s""")
				get_brand_category_data = (brand_id,from_organisation_id)
				count_brand_category = cursor.execute(get_brand_category_query,get_brand_category_data)
				brand_category = cursor.fetchall()

				for bckey,bcdata in enumerate(brand_category):
					get_brand_category_query_for_to_organisation = ("""SELECT `brand_id`,`category_id`
					FROM `category_brand_mapping` WHERE  `brand_id` = %s and `category_id` = %s and `organisation_id` = %s""")
					get_brand_category_data_for_to_organisation = (brand_id,bcdata['category_id'],to_organisation_id)
					count_brand_category_for_to_organisation = cursor.execute(get_brand_category_query_for_to_organisation,get_brand_category_data_for_to_organisation)

					if count_brand_category_for_to_organisation < 1:
						insert_brand_category_query = ("""INSERT INTO `category_brand_mapping`(`brand_id`,`category_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s,%s)""")
						insert_brand_category_data = (brand_id,bcdata['category_id'],to_organisation_id,to_organisation_id)
						cursor.execute(insert_brand_category_query,insert_brand_category_data)

				get_query = ("""SELECT *
					FROM  `product_brand_mapping` WHERE `brand_id` = %s and `organisation_id` = %s""")
				getData = (brand_id,from_organisation_id)
				count_product = cursor.execute(get_query,getData)

				if count_product > 0:
					product_data = cursor.fetchall()

					for key,data in enumerate(product_data):
						product_id = data['product_id']
						get_query_product_organisation = ("""SELECT *
							FROM  `product_organisation_mapping` WHERE `organisation_id` = %s and `product_id` = %s""")
						getDataProductOrganisation = (to_organisation_id,data['product_id'])
						count_product_organisation = cursor.execute(get_query_product_organisation,getDataProductOrganisation)

						if count_product_organisation > 0: 
							update_query = ("""UPDATE `product_organisation_mapping` SET `product_id` = %s,`organisation_id` = %s
							WHERE `organisation_id` = %s and `product_id` = %s""")
							update_data = (data['product_id'],to_organisation_id,to_organisation_id,data['product_id'])
							cursor.execute(update_query,update_data)

						else:				
							last_update_id = to_organisation_id
							insert_query = ("""INSERT INTO `product_organisation_mapping`(`product_id`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s)""")
							data = (data['product_id'],to_organisation_id,last_update_id)
							cursor.execute(insert_query,data)
											

						get_query_product_brand = ("""SELECT *
							FROM  `product_brand_mapping` WHERE `organisation_id` = %s and `product_id` = %s""")
						getDataProductBrand = (to_organisation_id,product_id)
						count_product_brand = cursor.execute(get_query_product_brand,getDataProductBrand)						

						if count_product_brand > 0: 
							print("update_product_brand")
							update_query = ("""UPDATE `product_brand_mapping` SET `product_id` = %s,`brand_id` = %s
							WHERE `organisation_id` = %s and `product_id` = %s and `brand_id` = %s""")
							update_data = (product_id,brand_id,to_organisation_id,product_id,brand_id)
							cursor.execute(update_query,update_data)

						else:
							print("insert_product_brand")
							insert_product_brand_query = ("""INSERT INTO `product_brand_mapping`(`brand_id`,`product_id`,`status`,`organisation_id`,`last_update_id`) 
							VALUES(%s,%s,%s,%s,%s)""")
							insert_product_brand_data = (brand_id,product_id,1,to_organisation_id,to_organisation_id)
							cursor.execute(insert_product_brand_query,insert_product_brand_data)

						#delete_query = ("""DELETE FROM `product_brand_mapping` WHERE `organisation_id` = %s and `brand_id` = %s """)
						#delData = (to_organisation_id,brand_id)
						
						#cursor.execute(delete_query,delData)	

						#last_update_id = to_organisation_id
						#insert_product_brnad_mapping_query = ("""INSERT INTO `product_brand_mapping`(`brand_id`,`product_id`,`status`,`organisation_id`,`last_update_id`)
							#VALUES(%s,%s,%s,%s,%s)""")
						#product_brand_mapping_status = 1
						#productbrand_data = (brand_id,data['product_id'],product_brand_mapping_status,to_organisation_id,last_update_id)
						#cursor.execute(insert_product_brnad_mapping_query,productbrand_data)
						#print(cursor._last_executed)

		connection.commit()
		cursor.close()				

		return ({"attributes": {
				    		"status_desc": "Product Replication",
				    		"status": "success"
				},
				"responseList":details}), status.HTTP_200_OK


#----------------------Product-Replication---------------------#

#----------------------Send-Push-Notification---------------------#

@name_space.route("/sendAppPushNotifications")
class sendAppPushNotifications(Resource):
	@api.expect(appmsg_model_order)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()

		update_status = details['update_status']

		if update_status == 'pending':		
			data_message = {
								"title" : "Order",
								"message": "Payment Incomplete. Please contact to store.."
							}
		else:
			data_message = {
								"title" : "Order",
								"message": "Order Placed Successfully"
							}

		api_key = details.get('firebase_key')
		device_id = details.get('device_id')
		push_service = FCMNotification(api_key=api_key)
		msgResponse = push_service.notify_single_device(registration_id=device_id,data_message = data_message)
		sent = 'N'
		if msgResponse.get('success') == 1:
			sent = 'Y'
		
		
		connection.commit()
		cursor.close()

		return ({"attributes": {
				    		"status_desc": "Push Notification",
				    		"status": "success"
				    	},
				    	"responseList":msgResponse}), status.HTTP_200_OK
#----------------------Send-Push-Notification---------------------#

#----------------------Send-Push-Notification---------------------#

@name_space.route("/sendAppPushNotificationforloyalityPoint")
class sendAppPushNotificationforloyalityPoint(Resource):
	@api.expect(appmsg_model)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()
		details = request.get_json()
		data_message = {
							"title" : "loyality Point",
							"message": "New Point Added"
						}
		api_key = details.get('firebase_key')
		device_id = details.get('device_id')
		push_service = FCMNotification(api_key=api_key)
		msgResponse = push_service.notify_single_device(registration_id=device_id,data_message = data_message)
		sent = 'N'
		if msgResponse.get('success') == 1:
			sent = 'Y'
		
		
		connection.commit()
		cursor.close()

		return ({"attributes": {
				    		"status_desc": "Push Notification",
				    		"status": "success"
				    	},
				    	"responseList":msgResponse}), status.HTTP_200_OK
#----------------------Send-Push-Notification---------------------#

#----------------------Send-Email---------------------#
@name_space.route("/send_email_test")
class send_email_test(Resource):
	@api.expect(send_email_model)
	def post(self):

		details = request.get_json()
		res = 'Failure. Wrong MailId or SourceApp.'

		msg = MIMEMultipart()
		msg['Subject'] = details['Subject']
		msg['From'] = EMAIL_ADDRESS
		msg['To'] = details['To']

		html = details['text']
		part1 = MIMEText(html, 'plain')
		print(part1)
		msg.attach(part1)

		try:
			smtp = SMTP('mail.creamsonservices.com', 587)
			smtp.starttls()
			smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
			smtp.sendmail(EMAIL_ADDRESS, details['To'], msg.as_string())

			res = {"status":'Success'}
			sent = 'Y'

		except Exception as e:
			res = {"status":'Failure'}
			sent = 'N'
		smtp.quit()			

		return ({"attributes": {
				    		"status_desc": "Send Email",
				    		"status": "success"
				    	},
				    	"responseList":res}), status.HTTP_200_OK
#----------------------Send-Email---------------------#

def invoice(data):
	customer_information = {}
	logo = "https://d1o7xhcyswcoe3.cloudfront.net/28/Am_Mobile_logo_crop_NEW.png"
	customer_information['customer_name'] = data['customer_data']['first_name']+''+data['customer_data']['last_name']
	customer_information['customer_address'] = data['customer_data']['address_line_1']+','+data['customer_data']['address_line_2']+','+data['customer_data']['city']+','+data['customer_data']['state']+','+data['customer_data']['country']
	customer_information['coupon_code'] = data['order_data']['coupon_code']	
	customer_information['customer_email'] = data['customer_data']['email']
	customer_information['date'] = data['order_data']['last_update_ts']
	customer_information['order_data'] = data['order_data']
	customer_information['logo'] = logo
	template = env.get_template('index.html')
	output = template.render(customer_information)
	print(output)
	sent_email_status = send_mail(output, data['customer_data']['email'])
	return sent_email_status

#----------------------Exchange-Device-Question---------------------#

@name_space.route("/getExchangeDeviceQuestion/<int:organisation_id>/<int:question_type>")	
class getExchangeDeviceQuestion(Resource):
	def get(self,organisation_id,question_type):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `exchange_device_question` WHERE `organisation_id` = %s and `question_type` = %s""")

		get_data = (organisation_id,question_type)
		cursor.execute(get_query,get_data)

		exchange_device_question_data = cursor.fetchall()

		for key,data in enumerate(exchange_device_question_data):
			get_ans_query = ("""SELECT `question_ans_id`,`ans`,`ans_image`
			FROM `exchange_device_question_ans` WHERE `question_id` = %s """)

			get_ans_data = (data['question_id'])
			cursor.execute(get_ans_query,get_ans_data)

			exchange_device_question_ans_data = cursor.fetchall()

			exchange_device_question_data[key]['ans'] = exchange_device_question_ans_data

			exchange_device_question_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "exchange_device_question_details",
		    		"status": "success"
		    	},
		    	"responseList":exchange_device_question_data}), status.HTTP_200_OK

#----------------------Exchange-Device-Question---------------------#

#----------------------Exchange-Device-Question-with-language---------------------#

@name_space.route("/getExchangeDeviceQuestionWithLanguage/<int:organisation_id>/<int:question_type>/<string:language>")	
class getExchangeDeviceQuestionWithLanguage(Resource):
	def get(self,organisation_id,question_type,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `exchange_device_question` WHERE `organisation_id` = %s and `question_type` = %s and `language` = %s""")

		get_data = (organisation_id,question_type,language)
		cursor.execute(get_query,get_data)

		exchange_device_question_data = cursor.fetchall()

		for key,data in enumerate(exchange_device_question_data):
			get_ans_query = ("""SELECT `question_ans_id`,`ans`,`ans_image`
			FROM `exchange_device_question_ans` WHERE `question_id` = %s and `language` = %s""")

			get_ans_data = (data['question_id'],language)
			cursor.execute(get_ans_query,get_ans_data)

			exchange_device_question_ans_data = cursor.fetchall()

			exchange_device_question_data[key]['ans'] = exchange_device_question_ans_data

			exchange_device_question_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "exchange_device_question_details",
		    		"status": "success"
		    	},
		    	"responseList":exchange_device_question_data}), status.HTTP_200_OK

#----------------------Exchange-Device-Question-with-language---------------------#


#----------------------Customer-Exchange-Device-Ans---------------------#
@name_space.route("/customerExchangeDeviceAns")
class customerExchangeDeviceAns(Resource):
	@api.expect(customer_exchange_model)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		customer_id = details['customer_id']		
		organisation_id = details['organisation_id']
		last_update_id = organisation_id

		if details and "amount" in details:
			amount = details['amount']
		else:
			amount = 0

		front_image = details['front_image']
		back_image = details['back_image']
		device_model = details['device_model']
		question_type = details['question_type']

		insert_query = ("""INSERT INTO `customer_exchange_device`(`customer_id`,`amount`,`front_image`,`back_image`,`device_model`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s,%s,%s)""")

		data = (customer_id,amount,front_image,back_image,device_model,organisation_id,last_update_id)
		cursor.execute(insert_query,data)

		exchange_id = cursor.lastrowid

		details['exchange_id'] = exchange_id

		question_ans_ids = details.get('question_ans_id',[])

		for question_ans_id in question_ans_ids: 
			customer_exchange_device_insert_query = ("""INSERT INTO `customer_exchange_device_ans`(`customer_id`,`exchange_id`,`question_type`,`question_ans_id`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s,%s)""")

			data_customer_exchange_device = (customer_id,exchange_id,question_type,question_ans_id,organisation_id,last_update_id)
			cursor.execute(customer_exchange_device_insert_query,data_customer_exchange_device)


		get_query = (""" SELECT *
			FROM `admins` WHERE admin_id = %s """)
		get_data = (customer_id)

		cursor.execute(get_query,get_data)

		customer_data = cursor.fetchone()

		get_user_retailer_query = (""" SELECT *
			FROM `user_retailer_mapping` WHERE user_id = %s and `organisation_id` = %s""")
		get_user_retailer_data = (customer_id,organisation_id)
		cursor.execute(get_user_retailer_query,get_user_retailer_data)

		user_retailer_data = cursor.fetchone()


		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
		payloadpushData = {
				"title":"Exchange Notification",
				"msg":customer_data['phoneno']+" has initiated exchange request but not completed",
				"img": "",
				"organisation_id": organisation_id
		}

		sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

		print(sndNotificationResponse)

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		sndNotificationRetailerUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToRetailer"
		payloadpushRetailerData = {
				"title":"Exchange Notification",
				"msg":customer_data['phoneno']+" has initiated exchange request but not completed",
				"img": "",
				"organisation_id": organisation_id,
				"retail_store_id": user_retailer_data['retailer_store_id']
		}

		sndNotificationRetailerResponse = requests.post(sndNotificationRetailerUrl,data=json.dumps(payloadpushRetailerData), headers=headers).json()

		print(sndNotificationRetailerResponse)

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		exchangeLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterExchange"
		exchangeLoyalityData = {
			"exchange_id":exchange_id,		
			"customer_id":customer_id,			
			"organisation_id": organisation_id
		}

		exchangeLoyalityResponse = requests.post(exchangeLoyalityUrl,data=json.dumps(exchangeLoyalityData), headers=headers).json()

		

		return ({"attributes": {
				    		"status_desc": "customer_exchange_device_ans",
				    		"status": "success"
				    	},
				    	"responseList":details}), status.HTTP_200_OK

#----------------------Customer-Exchange-Device-Ans---------------------#

#----------------------Update-Customer-Exchange---------------------#	
@name_space.route("/UpdatecustomerExchange/<int:exchange_id>")	
class UpdatecustomerExchange(Resource):
	@api.expect(customer_exchange_device_putmodel)
	def put(self,exchange_id):
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		if details and "amount" in details:
			amount = details['amount']
			update_query = ("""UPDATE `customer_exchange_device` SET `amount` = %s
				WHERE `exchange_id` = %s """)
			update_data = (amount,exchange_id)
			cursor.execute(update_query,update_data)

		if details and "front_image" in details:
			front_image = details['front_image']
			update_query = ("""UPDATE `customer_exchange_device` SET `front_image` = %s
				WHERE `exchange_id` = %s """)
			update_data = (front_image,exchange_id)
			cursor.execute(update_query,update_data)

		if details and "back_image" in details:
			back_image = details['back_image']
			update_query = ("""UPDATE `customer_exchange_device` SET `back_image` = %s
				WHERE `exchange_id` = %s """)
			update_data = (back_image,exchange_id)
			cursor.execute(update_query,update_data)

		if details and "final_submission_status" in details:
			final_submission_status	 = details['final_submission_status']
			print(final_submission_status)
			update_query = ("""UPDATE `customer_exchange_device` SET `final_submission_status` = %s
				WHERE `exchange_id` = %s """)
			update_data = (final_submission_status,exchange_id)
			cursor.execute(update_query,update_data)

		get_exchange_query = (""" SELECT *
			FROM `customer_exchange_device` WHERE `exchange_id` = %s """)
		exchange_data = (exchange_id)
		cursor.execute(get_exchange_query,exchange_data)
		exchange_data = cursor.fetchone()

		get_query = (""" SELECT *
			FROM `admins` WHERE admin_id = %s """)
		get_data = (exchange_data['customer_id'])

		cursor.execute(get_query,get_data)

		customer_data = cursor.fetchone()	

		get_user_retailer_query = (""" SELECT *
			FROM `user_retailer_mapping` WHERE user_id = %s and `organisation_id` = %s""")
		get_user_retailer_data = (exchange_data['customer_id'],exchange_data['organisation_id'])
		cursor.execute(get_user_retailer_query,get_user_retailer_data)

		user_retailer_data = cursor.fetchone()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
		payloadpushData = {
				"title":"Exchange Notification",
				"msg":customer_data['phoneno']+" has fully completed exchange request....",
				"img": "",
				"organisation_id": exchange_data['organisation_id']
		}

		sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

		print(sndNotificationResponse)

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		sndNotificationRetailerUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToRetailer"
		payloadpushRetailerData = {
				"title":"Exchange Notification",
				"msg":customer_data['phoneno']+" hhas fully completed exchange request....",
				"img": "",
				"organisation_id": exchange_data['organisation_id'],
				"retail_store_id": user_retailer_data['retailer_store_id']
		}

		sndNotificationRetailerResponse = requests.post(sndNotificationRetailerUrl,data=json.dumps(payloadpushRetailerData), headers=headers).json()

		print(sndNotificationRetailerResponse)

		connection.commit()
		cursor.close()

		return ({"attributes": {"status_desc": "Update_Customer_Exchange_Informatiom",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK

#----------------------Update-Customer-Exchange---------------------#	

#----------------------Update-Customer-Exchange-Device-Ans---------------------#	
@name_space.route("/UpdatecustomerExchangeDeviceAns/<int:customer_id>/<int:exchange_id>/<int:organisation_id>")	
class UpdatecustomerExchangeDeviceAns(Resource):
	@api.expect(customer_exchange_putmodel)
	def put(self,customer_id,exchange_id,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		question_type = details['question_type']

		if details and "device_model" in details:
			device_model = details['device_model']
			update_query = ("""UPDATE `customer_exchange_device` SET `device_model` = %s
					WHERE `exchange_id` = %s """)
			update_data = (device_model,exchange_id)
			cursor.execute(update_query,update_data)

		delete_query = ("""DELETE FROM `customer_exchange_device_ans` WHERE `exchange_id` = %s and `customer_id` = %s and `question_type` = %s""")
		delData = (exchange_id,customer_id,question_type)
		cursor.execute(delete_query,delData)

		question_ans_ids = details.get('question_ans_id',[])

		for question_ans_id in question_ans_ids: 			

			customer_exchange_device_insert_query = ("""INSERT INTO `customer_exchange_device_ans`(`customer_id`,`exchange_id`,`question_type`,`question_ans_id`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s,%s)""")

			data_customer_exchange_device = (customer_id,exchange_id,question_type,question_ans_id,organisation_id,organisation_id)
			cursor.execute(customer_exchange_device_insert_query,data_customer_exchange_device)

		return ({"attributes": {"status_desc": "Update Customer Exchange Device Ans",
								"status": "success"},
				"responseList": 'Updated Successfully'}), status.HTTP_200_OK


#----------------------Update-Customer-Exchange-Device-Ans---------------------#	

#---------------------Clone-Customer-Exchange-Device-Ans---------------------#	
@name_space.route("/ClonecustomerExchangeDeviceAns")	
class ClonecustomerExchangeDeviceAns(Resource):
	@api.expect(clone_exchange_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		organisation_id = details['organisation_id']
		customer_id = details['customer_id']
		exchange_id = details['exchange_id']

		get_customer_exchange_device_query = ("""SELECT *
			FROM `customer_exchange_device` ced			
			WHERE ced.`organisation_id` = %s and ced.`customer_id` = %s and ced.`exchange_id` = %s""")
		get_customer_exchange_device_data = (organisation_id,customer_id,exchange_id)
		count_ccustomer_exchange_device = cursor.execute(get_customer_exchange_device_query,get_customer_exchange_device_data)

		if count_ccustomer_exchange_device > 0 :

			customer_exchange_device_data = cursor.fetchone()

			customer_id = customer_exchange_device_data['customer_id']
			amount = customer_exchange_device_data['amount']
			front_image = customer_exchange_device_data['front_image']
			back_image = customer_exchange_device_data['back_image']
			device_model = customer_exchange_device_data['device_model']
			organisation_id = customer_exchange_device_data['organisation_id']
			exchange_status = 0
			final_submission_status = 0
			last_update_id = customer_exchange_device_data['last_update_id']

			insert_query = ("""INSERT INTO `customer_exchange_device`(`customer_id`,`amount`,`front_image`,`back_image`,`device_model`,`organisation_id`,`status`,`final_submission_status`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)""")
			data = (customer_id,amount,front_image,back_image,device_model,organisation_id,exchange_status,final_submission_status,last_update_id)
			cursor.execute(insert_query,data)

			customer_exchange_device_id = cursor.lastrowid

		get_customer_exchange_device_ans_query = ("""SELECT *
			FROM `customer_exchange_device_ans` ceda			
			WHERE ceda.`organisation_id` = %s and ceda.`customer_id` = %s and ceda.`exchange_id` = %s""")
		count_customer_exchange_device_ans = cursor.execute(get_customer_exchange_device_ans_query,get_customer_exchange_device_data)

		if count_customer_exchange_device_ans > 0:

			customer_exchange_device_ans_data = cursor.fetchall()

			for key,data in enumerate(customer_exchange_device_ans_data):
				customer_id = data['customer_id']
				exchange_id = customer_exchange_device_id
				question_type =  data['question_type']
				question_ans_id = data['question_ans_id']
				organisation_id = data['organisation_id']
				last_update_id = data['last_update_id']

				insert_query = ("""INSERT INTO `customer_exchange_device_ans`(`customer_id`,`exchange_id`,`question_type`,`question_ans_id`,`organisation_id`,`last_update_id`) 
					VALUES(%s,%s,%s,%s,%s,%s)""")
				data = (customer_id,exchange_id,question_type,question_ans_id,organisation_id,last_update_id)
				cursor.execute(insert_query,data)

				
		Is_clone = 0

		update_query = ("""UPDATE `customer_exchange_device` SET `Is_clone` = %s
					WHERE `exchange_id` = %s""")
		update_data = (Is_clone,exchange_id)
		cursor.execute(update_query,update_data)

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		exchangeLoyalityUrl = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/AddLoyalityAfterExchange"
		exchangeLoyalityData = {
			"exchange_id":customer_exchange_device_id,		
			"customer_id":customer_id,			
			"organisation_id": organisation_id
		}

		exchangeLoyalityResponse = requests.post(exchangeLoyalityUrl,data=json.dumps(exchangeLoyalityData), headers=headers).json()

		return ({"attributes": {
				    "status_desc": "Clone Exchnage",
				    "status": "success"
				},
				"responseList":"Clone Saved successfully"}), status.HTTP_200_OK



#----------------------Customer-Exchange-Ans---------------------#
@name_space.route("/getCustomerExchangeAns/<int:organisation_id>/<int:user_id>/<int:exchange_id>")	
class getCustomerExchangeAns(Resource):
	def get(self,organisation_id,user_id,exchange_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT ced.`exchange_id`,ced.`amount`,ced.`front_image`,ced.`back_image`,ced.`device_model`,ced.`last_update_ts`,a.`first_name`,a.`last_name`,ced.`status`,ced.`final_submission_status`
			FROM `customer_exchange_device` ced
			INNER JOIN `admins` a ON a.`admin_id` = ced.`customer_id` 
			WHERE ced.`organisation_id` = %s and ced.`customer_id` = %s and ced.`exchange_id` = %s""")

		get_data = (organisation_id,user_id,exchange_id)
		cursor.execute(get_query,get_data)

		customer_exchange_ans_data = cursor.fetchone()
		
		customer_exchange_ans_data['last_update_ts'] = str(customer_exchange_ans_data['last_update_ts'])

		get_customer_exchange_device_ans_query = ("""SELECT edqa.`ans`, edqa.`ans_image`,edq.`question_id`,edq.`question`,edq.`question_desc`,edq.`question_type`
				FROM `customer_exchange_device_ans` ceda
				INNER JOIN `exchange_device_question_ans` edqa ON edqa.`question_ans_id` = ceda.`question_ans_id`
				INNER JOIN `exchange_device_question` edq ON edq.`question_id` = edqa.`question_id`
				WHERE ceda.`exchange_id` = %s""")
		get_customer_exchange_device_ans_data = (customer_exchange_ans_data['exchange_id'])
		cursor.execute(get_customer_exchange_device_ans_query,get_customer_exchange_device_ans_data)
		customer_exchange_device_ans_query = cursor.fetchall()

		customer_exchange_ans_data['questions'] = customer_exchange_device_ans_query

		return ({"attributes": {
					"status_desc": "customer-exchange-ans",
					"status": "success"
				},
					"responseList":customer_exchange_ans_data}), status.HTTP_200_OK
#----------------------Customer-Exchange-Ans---------------------#

#----------------------Customer-Exchange-Ans---------------------#
@name_space.route("/getCustomerExchangeAnsWithQuestion/<int:question_type>/<int:organisation_id>/<int:exchange_id>/<int:user_id>")	
class getCustomerExchangeAnsWithQuestion(Resource):
	def get(self,question_type,organisation_id,exchange_id,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		if question_type == 4:
			get_query = ("""SELECT ced.`exchange_id`,ced.`status`,ced.`final_submission_status`,ced.`front_image`,ced.`back_image`,ced.`device_model`
			FROM `customer_exchange_device` ced
			INNER JOIN `admins` a ON a.`admin_id` = ced.`customer_id` 
			WHERE ced.`organisation_id` = %s and ced.`customer_id` = %s and ced.`exchange_id` = %s""")

			get_data = (organisation_id,user_id,exchange_id)
			cursor.execute(get_query,get_data)

			customer_exchange_ans_data = cursor.fetchone()

			return ({"attributes": {
		    		"status_desc": "exchange_device_question_details",
		    		"status": "success"
		    	},
		    	"responseList":customer_exchange_ans_data}), status.HTTP_200_OK
		else:

			get_query = ("""SELECT *
				FROM `exchange_device_question` WHERE `organisation_id` = 1 and `question_type` = %s""")

			get_data = (question_type)
			cursor.execute(get_query,get_data)

			exchange_device_question_data = cursor.fetchall()

			for key,data in enumerate(exchange_device_question_data):
				get_ans_query = ("""SELECT `question_ans_id`,`ans`,`ans_image`
				FROM `exchange_device_question_ans` WHERE `question_id` = %s """)

				get_ans_data = (data['question_id'])
				cursor.execute(get_ans_query,get_ans_data)

				exchange_device_question_ans_data = cursor.fetchall()

				for ekey,edata in enumerate(exchange_device_question_ans_data):
					get_customer_exchange_device_ans_query = ("""SELECT *
						FROM `customer_exchange_device_ans` where `exchange_id` = %s and `question_ans_id` = %s and `customer_id` = %s""")
					customer_exchange_device_ans_data = (exchange_id,edata['question_ans_id'],user_id)
					count_exchange_device_ans = cursor.execute(get_customer_exchange_device_ans_query,customer_exchange_device_ans_data)

					if count_exchange_device_ans > 0:
						exchange_device_question_ans_data[ekey]['is_attemted'] = 1
					else:
						 exchange_device_question_ans_data[ekey]['is_attemted'] = 0

				if exchange_id == 0:
					exchange_device_question_data[key]['device_model'] = ""
				
				else:
					get_customer_exchange_query = ("""SELECT ced.`exchange_id`,ced.`status`,ced.`final_submission_status`,ced.`front_image`,ced.`back_image`,ced.`device_model`
					FROM `customer_exchange_device` ced
					INNER JOIN `admins` a ON a.`admin_id` = ced.`customer_id` 
					WHERE ced.`organisation_id` = %s and ced.`customer_id` = %s and ced.`exchange_id` = %s""")

					get_customer_exchange_data = (organisation_id,user_id,exchange_id)
					count_customer_exchange = cursor.execute(get_customer_exchange_query,get_customer_exchange_data)

					if count_customer_exchange > 0:

						customer_exchange_ans_data = cursor.fetchone()

						exchange_device_question_data[key]['device_model'] = customer_exchange_ans_data['device_model']
					else:
						exchange_device_question_data[key]['device_model'] = ""

				exchange_device_question_data[key]['ans'] = exchange_device_question_ans_data

				exchange_device_question_data[key]['last_update_ts'] = str(data['last_update_ts'])

			return ({"attributes": {
		    		"status_desc": "exchange_device_question_details",
		    		"status": "success"
		    	},
		    	"responseList":exchange_device_question_data}), status.HTTP_200_OK

#----------------------Customer-Exchange---------------------#

@name_space.route("/getCustomerExchange/<int:organisation_id>/<int:user_id>")	
class getCustomerExchange(Resource):
	def get(self,organisation_id,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `customer_exchange_device` WHERE `organisation_id` = %s and `customer_id` = %s""")

		get_data = (organisation_id,user_id)
		cursor.execute(get_query,get_data)

		customer_exchange_data = cursor.fetchall()

		for key,data in enumerate(customer_exchange_data):
			customer_exchange_data[key]['exchange_id'] = "AMEXCHANGE-"+str(data['exchange_id'])
			customer_exchange_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "customer_exchange_data",
		    		"status": "success"
		    	},
		    	"responseList":customer_exchange_data}), status.HTTP_200_OK

#----------------------Customer-Exchange---------------------#

#----------------------Customer-Exchange---------------------#

@name_space.route("/getCustomerExchangeWithPagination/<int:organisation_id>/<int:user_id>/<int:page>")	
class getCustomerExchangeWithPagination(Resource):
	def get(self,organisation_id,user_id,page):
		
		if page == 1:
			offset = 0
		else:
			offset = (page - 1)*20

		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `customer_exchange_device` WHERE `organisation_id` = %s and `customer_id` = %s LIMIT %s,20""")

		get_data = (organisation_id,user_id,offset)
		cursor.execute(get_query,get_data)

		customer_exchange_data = cursor.fetchall()

		for key,data in enumerate(customer_exchange_data):
			customer_exchange_data[key]['exchange_id'] = "AMEXCHANGE-"+str(data['exchange_id'])
			customer_exchange_data[key]['last_update_ts'] = str(data['last_update_ts'])

		get_query_count = ("""SELECT count(*) as exchange_count
			FROM `customer_exchange_device` WHERE `organisation_id` = %s and `customer_id` = %s""")

		get_data_count = (organisation_id,user_id)
		cursor.execute(get_query_count,get_data_count)

		customer_exchange_data_count = cursor.fetchone()

		page_count = math.trunc(customer_exchange_data_count['exchange_count']/20)

		if page_count == 0:
			page_count =1
		else:
			page_count = page_count + 1	
				
		return ({"attributes": {
		    		"status_desc": "customer_exchange_data",
		    		"status": "success",
		    		"page_count":page_count,
		    		"page":page
		    	},
		    	"responseList":customer_exchange_data}), status.HTTP_200_OK

#----------------------Customer-Exchange---------------------#

#----------------------Get-Customer-Stories---------------------#

@name_space.route("/getExchangeCommunicationByExchangeId/<int:exchnage_id>")	
class getExchangeCommunicationByExchangeId(Resource):
	def get(self,exchnage_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `exchange_device_comments` where `exchange_id` = %s""")
		get_data = (exchnage_id)

		cursor.execute(get_query,get_data)

		exchange_coomunication_data = cursor.fetchall()

		for key,data in enumerate(exchange_coomunication_data):
			exchange_coomunication_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "exchange_communication",
		    		"status": "success"
		    	},
		    	"responseList":exchange_coomunication_data}), status.HTTP_200_OK
		
#-----------------------Get-Customer-Stories---------------------#

#----------------------Enquiry-Type-List---------------------#

@name_space.route("/getEnquiryTypeList/<int:organisation_id>")	
class getEnquiryTypeList(Resource):
	def get(self,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `enquiry_type_master` WHERE `organisation_id` = %s""")

		get_data = (organisation_id)
		cursor.execute(get_query,get_data)

		enquiry_type_data = cursor.fetchall()	

		for key,data in enumerate(enquiry_type_data):
			enquiry_type_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "enquiry_type_details",
		    		"status": "success"
		    	},
		    	"responseList":enquiry_type_data}), status.HTTP_200_OK

#----------------------Enquiry-Type-List---------------------#

#----------------------Enquiry-Type-List-With-Language---------------------#

@name_space.route("/getEnquiryTypeListWithLanguage/<int:organisation_id>/<string:language>")	
class getEnquiryTypeListWithLanguage(Resource):
	def get(self,organisation_id,language):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `enquiry_type_master` WHERE `organisation_id` = %s and `language` = %s""")

		get_data = (organisation_id,language)
		cursor.execute(get_query,get_data)

		enquiry_type_data = cursor.fetchall()	

		for key,data in enumerate(enquiry_type_data):
			enquiry_type_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "enquiry_type_details",
		    		"status": "success"
		    	},
		    	"responseList":enquiry_type_data}), status.HTTP_200_OK

#----------------------Enquiry-Type-List-With-Language---------------------#

#----------------------Create-Enquiery---------------------#

@name_space.route("/createEnquiry")
class createEnquiry(Resource):
	@api.expect(enquiry_postmodel)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		enquiry_type_id = details['enquiry_type_id']
		user_id = details['user_id']
		organisation_id = details['organisation_id']
		enquirystatus = 1
		last_update_id = 1

		insert_query = ("""INSERT INTO `enquiry_master`(`enquiry_type_id`,`user_id`,`organisation_id`,`status`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s)""")

		data = (enquiry_type_id,user_id,organisation_id,enquirystatus,last_update_id)
		cursor.execute(insert_query,data)
		details['enquiry_id'] = cursor.lastrowid

		text = "Welcome! I'm chat assistant. You can start a new chat."
		image = ""
		role = 1

		insert_communication_query = ("""INSERT INTO `enquiry_communication`(`enquiry_id`,`user_id`,`text`,`image`,`role`,`organisation_id`,`status`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

		communicatio_data = (details['enquiry_id'],user_id,text,image,role,organisation_id,enquirystatus,last_update_id)
		cursor.execute(insert_communication_query,communicatio_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "enquiry_details",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK

#----------------------Create-Enquiery---------------------#

#-----------------------Get-Enquiry-List----------------------#

@name_space.route("/getEnquiryList/<int:organisation_id>/<int:user_id>")	
class getEnquiryList(Resource):
	def get(self,organisation_id,user_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT em.`enquiry_id`,etm.`enquiry_type`,em.`last_update_ts`,em.`enquiery_status`,em.`date_of_closer`
			FROM `enquiry_master` em
			INNER JOIN `enquiry_type_master` etm ON etm.`enquiry_type_id` = em.`enquiry_type_id`
			WHERE em.`organisation_id` = %s and em.`user_id` = %s ORDER BY em.`enquiry_id` DESC""")

		get_data = (organisation_id,user_id)
		cursor.execute(get_query,get_data)

		enquiry_data = cursor.fetchall()

		for key,data in enumerate(enquiry_data):
			enquiry_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "enquiery_details",
		    		"status": "success"
		    	},
		    	"responseList":enquiry_data}), status.HTTP_200_OK

#-----------------------Get-Enquiry-List----------------------#


#----------------------Create-Enquiery-Communication---------------------#

@name_space.route("/createEnquiryCommunication")
class createEnquiryCommunication(Resource):
	@api.expect(enquiry_communication_postmodel)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		enquiry_id = details['enquiry_id']
		user_id = details['user_id']
		image = details['image']
		text = details['text']
		role = 2
		communication_status = 1
		organisation_id = details['organisation_id']		
		last_update_id = details['organisation_id']

		insert_query = ("""INSERT INTO `enquiry_communication`(`enquiry_id`,`user_id`,`text`,`image`,`role`,`organisation_id`,`status`,`last_update_id`) 
				VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

		data = (enquiry_id,user_id,text,image,role,organisation_id,communication_status,last_update_id)
		cursor.execute(insert_query,data)
		details['enquiry_communication'] = cursor.lastrowid

		get_query = ("""SELECT em.`enquiry_id`,em.`user_id`,etm.`enquiry_type`,em.`last_update_ts`,a.`first_name`,a.`last_name`
			FROM `enquiry_master` em
			INNER JOIN `enquiry_type_master` etm ON etm.`enquiry_type_id` = em.`enquiry_type_id`
			INNER JOIN `admins` a ON a.`admin_id` = em.`user_id`
			WHERE em.`organisation_id` = %s and em.`enquiry_id` = %s""")

		get_data = (organisation_id,enquiry_id)
		cursor.execute(get_query,get_data)
		enquiry_data = cursor.fetchone()

		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		Url = BASE_URL + "ecommerce_customer_new/EcommerceCustomerNew/postCommunication"
		payload = {
  					"sourceapp": "enquiery",
  					"organisation_id": organisation_id,
  					"mailParams": {"enquiery_name":enquiry_data['enquiry_type'],"user":enquiry_data['first_name']+" "+enquiry_data['last_name']}
				  }
		sent_enquery_email = requests.post(Url,data=json.dumps(payload), headers=headers).json()

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "enquiry_details",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK

#----------------------Create-Enquiery-Communication---------------------#

@name_space.route("/postCommunication")
class postCommunication(Resource):
	@api.expect(communication_model)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()	

		details = request.get_json()

		sourceapp = details['sourceapp']
		mailParams = details['mailParams']
		body_text = ''
		FIRST_NAME = "sourav"

		cursor.execute("""SELECT `application_name`,`title`,`Recipient`,`email`,`Email_Body`,`Subject`,`sms`,
			`SMS_Body`,`App_Description`,`from_mailid`,`from_number`,`Dashboard_Id`,`email`,`sms` 
			FROM `configuration` WHERE `application_name` = %s""",(sourceapp))


		config_info = cursor.fetchone()

		mail_body = config_info['Email_Body']

		for k,v in mailParams.items():
			body_text = mail_body.replace('{{'+k+'}}',v)

		body_text = body_text.format(user = FIRST_NAME)		
		config_info['Email_Body'] = body_text

		organisation_id = details['organisation_id']

		cursor.execute("""SELECT `email` as `EMAIL_ID`
			FROM `organisation_master` WHERE `organisation_id` = %s""",(organisation_id))
		user_info = cursor.fetchone()

		#user_info['EMAIL_ID'] = "sutandra.mazumder@gmail.com"
		if config_info['email'] == 1:
				mail_res = send_email(config_info = config_info, user_info = user_info)	

		cursor.close()
		return ({"attributes": {"status_desc": "Communication Status",
									"status": "success"
									},
					"responseList":{"mail_res":mail_res}}), status.HTTP_200_OK			

#-----------------------Get-Communication-List----------------------#

@name_space.route("/getCommunicationList/<int:organisation_id>/<int:user_id>/<int:enquiry_id>")	
class getCommunicationList(Resource):
	def get(self,organisation_id,user_id,enquiry_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_user_query = ("""SELECT `first_name`,`last_name`,`profile_image`
			FROM `admins`
			WHERE  `admin_id` = %s""")
		get_user_data = (user_id)
		cursor.execute(get_user_query,get_user_data)
		user_data = cursor.fetchone()

		get_query = ("""SELECT *
			FROM `enquiry_communication`
			WHERE `organisation_id` = %s and `user_id` = %s and enquiry_id =%s""")

		get_data = (organisation_id,user_id,enquiry_id)
		cursor.execute(get_query,get_data)

		communication_data = cursor.fetchall()			

		for key,data in enumerate(communication_data):
			communication_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "communication_details",
		    		"status": "success"
		    	},
		    	"responseList":communication_data,"user":user_data}), status.HTTP_200_OK

#-----------------------Get-Communication-List----------------------#

#----------------------Budet-List---------------------#

@name_space.route("/getBudgetList/<int:organisation_id>/<int:category_id>")	
class getBudgetList(Resource):
	def get(self,organisation_id,category_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_query = ("""SELECT *
			FROM `budget` WHERE  `organisation_id` = %s and `category_id` = %s""")

		get_data = (organisation_id,category_id)
		cursor.execute(get_query,get_data)

		meta_key_data = cursor.fetchall()

		for key,data in enumerate(meta_key_data):
			meta_key_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "budget_details",
		    		"status": "success"
		    	},
		    	"responseList":meta_key_data}), status.HTTP_200_OK

#----------------------Budet-List---------------------#

#----------------------Category-List---------------------#

@name_space.route("/getCategoryList/<int:organisation_id>")	
class getCategoryList(Resource):
	def get(self,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		if organisation_id == 83:

			get_query = ("""SELECT *
				FROM `category` WHERE `organisation_id` = %s""")
		else:
			get_query = ("""SELECT *
				FROM `category` WHERE `organisation_id` = %s and status = 1""")

		get_data = (organisation_id)
		cursor.execute(get_query,get_data)

		customer_category_data = cursor.fetchall()

		for key,data in enumerate(customer_category_data):			
			customer_category_data[key]['last_update_ts'] = str(data['last_update_ts'])
				
		return ({"attributes": {
		    		"status_desc": "customer_exchange_data",
		    		"status": "success"
		    	},
		    	"responseList":customer_category_data}), status.HTTP_200_OK

#----------------------Category-List---------------------#


#-----------------------get-Signup-Settings-By-Organisation---------------------#

@name_space.route("/getSignupSettingsByOrganisation/<int:organisation_id>")	
class getSignupSettingsByOrganisation(Resource):
	def get(self,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()		

		get_query = ("""SELECT *
				FROM `signup_settings` WHERE `organisation_id` = %s""")
		get_data = (organisation_id)
		count_signup_setting_data = cursor.execute(get_query,get_data)

		if count_signup_setting_data >0:

			signup_settings_data = cursor.fetchone()
					
			signup_settings_data['last_update_ts'] = str(signup_settings_data['last_update_ts'])
		else:
			signup_settings_data = {}
				
		return ({"attributes": {
		    		"status_desc": "signup_settings_data",
		    		"status": "success"
		    	},
		    	"responseList":signup_settings_data}), status.HTTP_200_OK

#-----------------------get-Signup-Settings-By-Organisation---------------------#

#----------------------Add-Enquiery---------------------#

@name_space.route("/AddEnquieryByCustomerId")
class AddEnquieryByCustomerId(Resource):
	@api.expect(customer_enquiry_postmodel)
	def post(self):
	
		connection = mysql_connection()
		cursor = connection.cursor()		
		details = request.get_json()

		if details and "phoneno" in details:
			phoneno = details['phoneno']
		else:
			phoneno = ""

		if details and "name" in details:
			name = details['name']
		else:
			name = ""

		if details and "address" in details:
			address = details['address']
		else:
			address = ""

		if details and "email" in details:
			email = details['email']
		else:
			email = ""

		if details and "comment" in details:
			comment = details['comment']
		else:
			comment = ""

		organisation_id = details['organisation_id']
		customer_id = details['customer_id']

		insert_query = ("""INSERT INTO `customer_enquiry`(`phoneno`,`name`,`address`,`email`,`comment`,`customer_id`,`organisation_id`,`last_update_id`) 
			VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

		data = (phoneno,name,address,email,comment,customer_id,organisation_id,organisation_id)
		cursor.execute(insert_query,data)

		get_query = (""" SELECT *
			FROM `admins` WHERE admin_id = %s """)
		get_data = (customer_id)

		cursor.execute(get_query,get_data)

		customer_data = cursor.fetchone()


		headers = {'Content-type':'application/json', 'Accept':'application/json'}
		sndNotificationUrl = BASE_URL + "ret_notification/RetailerNotification/SendPushNotificationsToOrganisation"
		payloadpushData = {
				"title":"Enquiry Notification",
				"msg":"New Enquiry submited from"+customer_data['first_name'],
				"img": "",
				"organisation_id": organisation_id
		}

		sndNotificationResponse = requests.post(sndNotificationUrl,data=json.dumps(payloadpushData), headers=headers).json()

		print(sndNotificationResponse)

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "Customer Enqiery",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK

#----------------------Add-Enquiery---------------------#

#----------------------Add-Loyality-After-Product-Purhcases---------------------#

@name_space.route("/AddLoyalityAfterProductPurchase")
class AddLoyalityAfterProductPurchase(Resource):
	@api.expect(loyality_product_purchase_postmodel)
	def post(self):

		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		product_meta_id = details['product_meta_id']
		organisation_id = details['organisation_id']
		customer_id = details['customer_id']

		get_product_details_query = ("""SELECT p.`product_id`,p.`category_id`,pscm.`sub_category_id`,pm.`out_price`
				FROM `product_meta` pm
				INNER JOIN `product` p ON p.`product_id` = pm.`product_id`
				INNER JOIN `product_sub_category_mapping` pscm ON pscm.`product_id` = p.`product_id`
				WHERE pm.`product_meta_id` = %s""")
		get_product_details_data = (product_meta_id)
		count_product_details = cursor.execute(get_product_details_query,get_product_details_data)

		if count_product_details > 0:
			product_data = cursor.fetchone()
			get_general_loyality_settings_query = ("""SELECT * from `sub_category_loyality_settings` where `organisation_id` = %s and `sub_category_id` = %s""")
			get_general_loyality_settings_data = (organisation_id,product_data['sub_category_id'])
			count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

			if count_general_loyality_setting_data > 0:
				general_loyality_setting_data = cursor.fetchone()

				if general_loyality_setting_data['sub_category_percentage'] != 0 and general_loyality_setting_data['sub_category_high_margine_percentage'] != 0 and general_loyality_setting_data['sub_category_low_margine_percentage'] != 0:
					get_product_section_query = ("""SELECT * from `product_section_mapping` where `product_id` = %s""")	
					get_product_section_data = (product_data['product_id'])
					product_section_count = cursor.execute(get_product_section_query,get_product_section_data)	
					if 	product_section_count > 0:
						product_section_data = cursor.fetchone()
						if product_section_data['section_id'] == 505:
							if general_loyality_setting_data['sub_category_id'] == product_data['sub_category_id'] :
								get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
								get_customer_wallet_transaction_data = (customer_id)
								customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

								if customer_wallet_transaction_count > 0:
									wallet_transaction_data = cursor.fetchone()
									previous_value = wallet_transaction_data['updated_value']
									transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_high_margine_percentage'])/100

									updated_value = previous_value + transaction_value
									transaction_source = "sub_category_high_margine_percentage"
									wallet_transaction_status = 1

									customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

									customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
									cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

									update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
									update_customer_wallet_data = (updated_value,customer_id)
									cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
								else:
									previous_value = 0
									transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_high_margine_percentage'])/100
									updated_value = previous_value + transaction_value
									transaction_source = "sub_category_high_margine_percentage"

									wallet_transaction_status = 1

									customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

									customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
									cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

									update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
									update_customer_wallet_data = (updated_value,data['admin_id'])
									cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
						elif  product_section_data['section_id'] == 504:
							if general_loyality_setting_data['sub_category_id'] == product_data['sub_category_id'] :
								get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
								get_customer_wallet_transaction_data = (customer_id)
								customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

								if customer_wallet_transaction_count > 0:
									wallet_transaction_data = cursor.fetchone()
									previous_value = wallet_transaction_data['updated_value']
									transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_low_margine_percentage'])/100

									updated_value = previous_value + transaction_value
									transaction_source = "sub_category_low_margine_percentage"
									wallet_transaction_status = 1

									customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

									customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
									cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

									update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
									update_customer_wallet_data = (updated_value,customer_id)
									cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
								else:
									previous_value = 0
									transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_low_margine_percentage'])/100
									updated_value = previous_value + transaction_value
									transaction_source = "sub_category_low_margine_percentage"

									wallet_transaction_status = 1

									customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

									customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
									cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

									update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
									update_customer_wallet_data = (updated_value,data['admin_id'])
									cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

					else:							
						if general_loyality_setting_data['sub_category_id'] == product_data['sub_category_id'] :
							get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
							get_customer_wallet_transaction_data = (customer_id)
							customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

							if customer_wallet_transaction_count > 0:
								wallet_transaction_data = cursor.fetchone()
								previous_value = wallet_transaction_data['updated_value']
								transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_percentage'])/100
								updated_value = previous_value + transaction_value

								transaction_source = "sub_category_loyality"
								wallet_transaction_status = 1

								customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

								customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
								cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

								update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
									WHERE `admin_id` = %s""")
								update_customer_wallet_data = (updated_value,customer_id)
								cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
							else:
								previous_value = 0
								transaction_value = (product_data['out_price'] *  general_loyality_setting_data['sub_category_percentage'])/100
								updated_value = previous_value + transaction_value
								transaction_source = "sub_category_loyality"

								wallet_transaction_status = 1

								customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

								customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
								cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

								update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
									WHERE `admin_id` = %s""")
								update_customer_wallet_data = (updated_value,data['admin_id'])
								cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
				else:
					get_general_loyality_settings_query = ("""SELECT * from `sub_category_loyality_settings` where `organisation_id` = %s and `category_id` = %s""")
					get_general_loyality_settings_data = (organisation_id,product_data['category_id'])
					count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)
					general_loyality_setting_data = cursor.fetchone()

					if general_loyality_setting_data['category_percentage'] != 0 and general_loyality_setting_data['category_high_margine_percentage'] != 0 and general_loyality_setting_data['category_low_margine_percentage'] != 0:
						get_product_section_query = ("""SELECT * from `product_section_mapping` where `product_id` = %s""")	
						get_product_section_data = (product_data['product_id'])
						product_section_count = cursor.execute(get_product_section_query,get_product_section_data)	
						if 	product_section_count > 0:
							product_section_data = cursor.fetchone()
							if product_section_data['section_id'] == 505:
								if general_loyality_setting_data['category_id'] == product_data['category_id'] :
									get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
									get_customer_wallet_transaction_data = (customer_id)
									customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

									if customer_wallet_transaction_count > 0:
										wallet_transaction_data = cursor.fetchone()
										previous_value = wallet_transaction_data['updated_value']
										transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_high_margine_percentage'])/100

										updated_value = previous_value + transaction_value
										transaction_source = "category_high_margine_percentage"
										wallet_transaction_status = 1

										customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

										customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
										cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

										update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
										update_customer_wallet_data = (updated_value,customer_id)
										cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
									else:
										previous_value = 0
										transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_high_margine_percentage'])/100
										updated_value = previous_value + transaction_value
										transaction_source = "category_high_margine_percentage"

										wallet_transaction_status = 1

										customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

										customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
										cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

										update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
										update_customer_wallet_data = (updated_value,data['admin_id'])
										cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
							elif  product_section_data['section_id'] == 504:
								if general_loyality_setting_data['category_id'] == product_data['category_id'] :
									get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
									get_customer_wallet_transaction_data = (customer_id)
									customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

									if customer_wallet_transaction_count > 0:
										wallet_transaction_data = cursor.fetchone()
										previous_value = wallet_transaction_data['updated_value']
										transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_low_margine_percentage'])/100

										updated_value = previous_value + transaction_value
										transaction_source = "category_low_margine_percentage"
										wallet_transaction_status = 1

										customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

										customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
										cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

										update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
										update_customer_wallet_data = (updated_value,customer_id)
										cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
									else:
										previous_value = 0
										transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_low_margine_percentage'])/100
										updated_value = previous_value + transaction_value
										transaction_source = "category_low_margine_percentage"

										wallet_transaction_status = 1

										customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

										customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
										cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

										update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
										update_customer_wallet_data = (updated_value,data['admin_id'])
										cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

					else:
						if general_loyality_setting_data['category_id'] == product_data['category_id'] :
							get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
							get_customer_wallet_transaction_data = (customer_id)
							customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

							if customer_wallet_transaction_count > 0:
								wallet_transaction_data = cursor.fetchone()
								previous_value =wallet_transaction_data['updated_value']
								transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_percentage'])/100
								updated_value = previous_value + transaction_value

								transaction_source = "category_loyality"
								wallet_transaction_status = 1

								customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

								customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
								cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

								update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
									WHERE `admin_id` = %s""")
								update_customer_wallet_data = (updated_value,customer_id)
								cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
							else:
								previous_value = 0
								transaction_value = (product_data['out_price'] *  general_loyality_setting_data['category_percentage'])/100
								updated_value = previous_value + transaction_value
								transaction_source = "category_loyality"

								wallet_transaction_status = 1

								customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
													VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

								customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
								cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

								update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
									WHERE `admin_id` = %s""")
								update_customer_wallet_data = (updated_value,data['admin_id'])
								cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
			else:
				general_loyality_setting_data = {}					

		else:
			product_data = {}

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "Product Loyality",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK

#----------------------Add-Loyality-After-Product-Purhcases---------------------#

#----------------------Add-Loyality-Birth-Day-Anniversary-Bonus--------------------#

@name_space.route("/AddLoyalityBirthdayAndAnniversaryBounus/<int:organisation_id>")	
class AddLoyalityBirthdayAndAnniversaryBounus(Resource):
	def get(self,organisation_id):

		connection = mysql_connection()
		cursor = connection.cursor()

		now = datetime.now()
		today_date = now.strftime("%m-%d")
		#today_date = '09-24'
		#today_date = '12-10'
		print(today_date)

		get_customer_list_query = ("""SELECT `dob`, `admin_id`,`organisation_id` FROM `admins` where `organisation_id` = %s and `dob` like %s""")
		get_customer_data = (organisation_id,"%"+today_date+"%")
		customer_count = cursor.execute(get_customer_list_query,get_customer_data)

		print(cursor._last_executed)

		if customer_count > 0:
			customer_list = cursor.fetchall()

			for key,data in enumerate(customer_list):
				get_general_loyality_settings_query = ("""SELECT * from `general_loyalty_master` where `organisation_id` = %s""")
				get_general_loyality_settings_data = (organisation_id)
				count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

				if count_general_loyality_setting_data > 0:
					general_loyality_setting_data = cursor.fetchone()
					if general_loyality_setting_data['birthday_bonus'] > 0 :
						get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
						get_customer_wallet_transaction_data = (data['admin_id'])
						customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

						if customer_wallet_transaction_count > 0:
							wallet_transaction_data = cursor.fetchone()
							previous_value = wallet_transaction_data['updated_value']
							transaction_value = general_loyality_setting_data['birthday_bonus']
							updated_value = previous_value + transaction_value

							transaction_source = "birthday_bonus"
							wallet_transaction_status = 1

							customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
												VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

							customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
							cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

							update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
								WHERE `admin_id` = %s""")
							update_customer_wallet_data = (updated_value,data['admin_id'])
							cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
						else:
							previous_value = 0
							transaction_value = general_loyality_setting_data['birthday_bonus']
							updated_value = previous_value + transaction_value
							transaction_source = "birthday_bonus"

							wallet_transaction_status = 1

							customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
												VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

							customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
							cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

							update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
								WHERE `admin_id` = %s""")
							update_customer_wallet_data = (updated_value,data['admin_id'])
							cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		else:
			customer_list = []

		get_anniversary_customer_list_query = ("""SELECT `anniversary`, `admin_id`,`organisation_id` FROM `admins` where `organisation_id` = %s and `anniversary` like %s""")
		get_anniversary_customer_data = (organisation_id,"%"+today_date+"%")
		anniversary_customer_count = cursor.execute(get_anniversary_customer_list_query,get_customer_data)

		print(cursor._last_executed)

		if anniversary_customer_count > 0:
			anniversary_customer_list = cursor.fetchall()

			for key,data in enumerate(anniversary_customer_list):
				get_general_loyality_settings_query = ("""SELECT * from `general_loyalty_master` where `organisation_id` = %s""")
				get_general_loyality_settings_data = (organisation_id)
				count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

				if count_general_loyality_setting_data > 0:
					general_loyality_setting_data = cursor.fetchone()
					if general_loyality_setting_data['anniversary_bonus'] > 0 :
						get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
						get_customer_wallet_transaction_data = (data['admin_id'])
						customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

						if customer_wallet_transaction_count > 0:
							wallet_transaction_data = cursor.fetchone()
							previous_value = wallet_transaction_data['updated_value']
							transaction_value = general_loyality_setting_data['anniversary_bonus']
							updated_value = previous_value + transaction_value

							transaction_source = "anniversary_bonus"
							wallet_transaction_status = 1

							customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
												VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

							customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
							cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

							update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
								WHERE `admin_id` = %s""")
							update_customer_wallet_data = (updated_value,data['admin_id'])
							cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
						else:
							previous_value = 0
							transaction_value = general_loyality_setting_data['anniversary_bonus']
							updated_value = previous_value + transaction_value
							transaction_source = "anniversary_bonus"

							wallet_transaction_status = 1

							customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
												VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

							customer_wallet_transaction_data = (data['admin_id'],transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
							cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

							update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
								WHERE `admin_id` = %s""")
							update_customer_wallet_data = (updated_value,data['admin_id'])
							cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		else:
			anniversary_customer_list = []

		connection.commit()
		cursor.close()

		return ({"attributes": {
	    				"status_desc": "Customer List",
	    				"status": "success"	    				
	    				},
	    				"responseList":{"birthday_customer_list":customer_list,"anniversary_customer_list":anniversary_customer_list}}), status.HTTP_200_OK

#----------------------Add-Loyality-Birth-Day-Bonus--------------------#

#----------------------Add-Loyality-First-Purchase--------------------#

@name_space.route("/AddLoyalityFirstPurchase")
class AddLoyalityFirstPurchase(Resource):
	@api.expect(loyality_first_purchase_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()
	
		organisation_id = details['organisation_id']
		customer_id = details['customer_id']

		get_instamojo_payemnt_request_details_query = ("""SELECT * from `instamojo_initiate_payment` where `user_id` = %s and `organisation_id` = %s""")
		get_instamojo_payemnt_request_details_data = (customer_id,organisation_id)
		instamojo_payment_request_count = cursor.execute(get_instamojo_payemnt_request_details_query,get_instamojo_payemnt_request_details_data)

		if instamojo_payment_request_count > 0:
			instamojo_payment_request_details = cursor.fetchone()
		else:
			instamojo_payment_request_details = {}

			get_general_loyality_settings_query = ("""SELECT * from `general_loyalty_master` where `organisation_id` = %s""")
			get_general_loyality_settings_data = (organisation_id)
			count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

			if count_general_loyality_setting_data > 0:
				general_loyality_setting_data = cursor.fetchone()
				print(general_loyality_setting_data)

				if general_loyality_setting_data['first_purchase_bonus'] != 0:

					get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
					get_customer_wallet_transaction_data = (customer_id)
					customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

					if customer_wallet_transaction_count > 0:
						wallet_transaction_data = cursor.fetchone()
						previous_value = wallet_transaction_data['updated_value']
						transaction_value = general_loyality_setting_data['first_purchase_bonus']
						updated_value = previous_value + int(transaction_value)

						transaction_source = "first_purchase_bonus"
						wallet_transaction_status = 1

						customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

						customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
						cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

						update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
						update_customer_wallet_data = (updated_value,customer_id)
						cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
					else:
						previous_value = 0
						transaction_value = general_loyality_setting_data['first_purchase_bonus']
						updated_value = previous_value + int(transaction_value)
						transaction_source = "first_purchase_bonus"

						wallet_transaction_status = 1

						customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

						customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
						cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

						update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
						update_customer_wallet_data = (updated_value,customer_id)
						cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

						connection.commit()
		cursor.close()
						
		return ({"attributes": {
			    		"status_desc": "First Purchse Loyality",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK


#----------------------Add-Loyality-First-Purchase--------------------#

#----------------------Customer-review--------------------#

@name_space.route("/customerReview")
class customerReview(Resource):
	@api.expect(customer_review_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_id = details['customer_id']
		review = details['review']
		retailer_store_store_id = details['retailer_store_store_id']
		organisation_id = details['organisation_id']

		customer_review_insert_query = ("""INSERT INTO `customer_review`(`customer_id`,`review`,`retailer_store_store_id`,`oraganisation_id`,`last_update_id`) 
												VALUES(%s,%s,%s,%s,%s)""")

		customer_review_insert_data = (customer_id,review,retailer_store_store_id,organisation_id,organisation_id)
		cursor.execute(customer_review_insert_query,customer_review_insert_data)

		get_general_loyality_settings_query = ("""SELECT * from `general_loyalty_master` where `organisation_id` = %s""")
		get_general_loyality_settings_data = (organisation_id)
		count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

		if count_general_loyality_setting_data > 0:
			general_loyality_setting_data = cursor.fetchone()

			if general_loyality_setting_data['customer_review_bonus'] != 0:
				get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
				get_customer_wallet_transaction_data = (customer_id)
				customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

				if customer_wallet_transaction_count > 0:
					wallet_transaction_data = cursor.fetchone()
					previous_value = wallet_transaction_data['updated_value']
					transaction_value = general_loyality_setting_data['customer_review_bonus']
					updated_value = previous_value + int(transaction_value)

					transaction_source = "customer_review_bonus"
					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
				else:
					previous_value = 0
					transaction_value = general_loyality_setting_data['customer_review_bonus']
					updated_value = previous_value + int(transaction_value)
					transaction_source = "customer_review_bonus"

					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		connection.commit()
		cursor.close()
						
		return ({"attributes": {
			    		"status_desc": "Customer Review",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK


#----------------------Customer-review--------------------#

#---------------------------Get-Customer-Review------------------------------------#

@name_space.route("/getCustomerReview/<int:organisation_id>")	
class getCustomerReview(Resource):
	def get(self,organisation_id):
		connection = mysql_connection()
		cursor = connection.cursor()

		get_customer_review_query = ("""SELECT a.`first_name`,cr.`review` from `customer_review` cr
										INNER JOIN `admins` a ON a.`admin_id` = cr.`customer_id` 
										where cr.`oraganisation_id` = %s""")
		get_customer_review_data = (organisation_id)
		customer_review_count = cursor.execute(get_customer_review_query,get_customer_review_data)

		if customer_review_count > 0:
			customer_review_data = cursor.fetchall()
		else:
			customer_review_data = []

						
		return ({"attributes": {
			    		"status_desc": "Customer Review",
			    		"status": "success"
			    	},
			    	"responseList":customer_review_data}), status.HTTP_200_OK


#---------------------------Get-Customer-Review------------------------------------#


#----------------------Add-Loyality-Pre-Book--------------------#

@name_space.route("/AddLoyalityPreBook")
class AddLoyalityPreBook(Resource):
	@api.expect(loyality_prebook_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_id = details['customer_id']		
		organisation_id = details['organisation_id']

		get_general_loyality_settings_query = ("""SELECT * from `general_loyalty_master` where `organisation_id` = %s""")
		get_general_loyality_settings_data = (organisation_id)
		count_general_loyality_setting_data = cursor.execute(get_general_loyality_settings_query,get_general_loyality_settings_data)

		if count_general_loyality_setting_data > 0:
			general_loyality_setting_data = cursor.fetchone()

			if general_loyality_setting_data['prebook_loyality_bonus'] != 0:
				get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
				get_customer_wallet_transaction_data = (customer_id)
				customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

				if customer_wallet_transaction_count > 0:
					wallet_transaction_data = cursor.fetchone()
					previous_value = wallet_transaction_data['updated_value']
					transaction_value = general_loyality_setting_data['prebook_loyality_bonus']
					updated_value = previous_value + int(transaction_value)

					transaction_source = "prebook_loyality_bonus"
					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
				else:
					previous_value = 0
					transaction_value = general_loyality_setting_data['prebook_loyality_bonus']
					updated_value = previous_value + int(transaction_value)
					transaction_source = "prebook_loyality_bonus"

					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
														VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
										WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "Prebook Loyality Bonus",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK


#----------------------Add-Loyality-Pre-Book--------------------#

#----------------------Add-Loyality-Lifetime-Purchase--------------------#

@name_space.route("/AddLoyalityLifetimePurchase")
class AddLoyalityLifetimePurchase(Resource):
	@api.expect(loyality_lifetime_purchase_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_id = details['customer_id']		
		organisation_id = details['organisation_id']

		get_total_purchase_query = ("""SELECT sum(`amount`) as total_purchase_amount from `instamojo_payment_request` where `organisation_id` = %s and `user_id` = %s""")
		get_total_purchase_data = (organisation_id,customer_id)
		total_purchase_count = cursor.execute(get_total_purchase_query,get_total_purchase_data)

		if total_purchase_count > 0:
			purchase_amount = cursor.fetchone()
			total_purchase_amount = purchase_amount['total_purchase_amount']
		else:
			total_purchase_amount = 0

		#total_purchase_amount = 75000

		transactional_bonus = 0

		get_transactional_loyality_query = ("""SELECT * FROM `total_transactional_loyality_settings` where `organisation_id` = %s""")
		get_transactional_loyality_data = (organisation_id)
		transactional_loyality_count = cursor.execute(get_transactional_loyality_query,get_transactional_loyality_data)

		if transactional_loyality_count > 0:
			transactional_loyality = cursor.fetchall()
			#print(transactional_loyality)
			for key,data in enumerate(transactional_loyality):
				if data['greaterthan_transactional_amount'] <= total_purchase_amount <= data['lessthan_transactional_amount']:
					transactional_bonus = data['transactional_bonus']

		if transactional_bonus > 0:

			get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
			get_customer_wallet_transaction_data = (customer_id)
			customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

			if customer_wallet_transaction_count > 0:
				wallet_transaction_data = cursor.fetchone()
				previous_value = wallet_transaction_data['updated_value']
				transaction_value = transactional_bonus
				updated_value = previous_value + int(transaction_value)

				transaction_source = "total_transactional_loyality_bonus"
				wallet_transaction_status = 1

				customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

				customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
				cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

				update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
				update_customer_wallet_data = (updated_value,customer_id)
				cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
			else:
				previous_value = 0
				transaction_value = transactional_bonus
				updated_value = previous_value + int(transaction_value)
				transaction_source = "total_transactional_loyality_bonus"

				wallet_transaction_status = 1

				customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

				customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
				cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

				update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
				update_customer_wallet_data = (updated_value,customer_id)
				cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		connection.commit()
		cursor.close()

		return ({"attributes": {
			    		"status_desc": "Loyality Lifetime Purchase",
			    		"status": "success"
			    	},
			    	"responseList":details}), status.HTTP_200_OK

#----------------------Add-Loyality-Lifetime-Purchase--------------------#

#----------------------Add-Loyality-Referal-Customer--------------------#

@name_space.route("/AddLoyalityReferalCustomer")
class AddLoyalityReferalCustomer(Resource):
	@api.expect(referal_loyality_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_id = details['customer_id']		
		organisation_id = details['organisation_id']

		get_referal_customer_count_query = ("""SELECT count(*) as total_refferal_customer from `customer_referral` cr
										INNER JOIN `user_referral_mapping` urm ON urm.`customer_referral_id` = cr.`customer_referral_id`
										where cr.`organisation_id` = %s and cr.`customer_id` = %s""")
		get_referal_customer_count_data = (organisation_id,customer_id)
		referal_customer_count = cursor.execute(get_referal_customer_count_query,get_referal_customer_count_data)

		if referal_customer_count > 0:
			referal_customer = cursor.fetchone() 
			total_referal_customer = referal_customer['total_refferal_customer']
		else:
			total_referal_customer = 0

		referal_bonus = 0
		referal_loyality_settings_id = 0

		get_referal_loyality_query = ("""SELECT * FROM `referal_loyality_settings_master` where `organisation_id` = %s""")
		get_referal_loyality_data = (organisation_id)
		referal_loyality_count = cursor.execute(get_referal_loyality_query,get_referal_loyality_data)

		if referal_loyality_count > 0:
			referal_loyality = cursor.fetchall()
			#print(transactional_loyality)
			for key,data in enumerate(referal_loyality):
				if data['greaterthan_person_count'] <= total_referal_customer <= data['lessthan_person_count']:
					referal_bonus = data['referal_bonus']
					referal_loyality_settings_id = data['referal_loyality_settings_id']

		get_customer_referal_rule_query = ("""SELECT * FROM `customer_referal_rule` where `organisation_id` = %s and `customer_id` = %s and `referal_loyality_settings_id` = %s""")
		get_customer_referal_rule_data = (organisation_id,customer_id,referal_loyality_settings_id)
		customer_referal_rule_count = cursor.execute(get_customer_referal_rule_query,get_customer_referal_rule_data)

		if customer_referal_rule_count < 1:			

			if referal_bonus > 0:

				get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
				get_customer_wallet_transaction_data = (customer_id)
				customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

				if customer_wallet_transaction_count > 0:
					wallet_transaction_data = cursor.fetchone()
					previous_value = wallet_transaction_data['updated_value']
					transaction_value = referal_bonus
					updated_value = previous_value + int(transaction_value)

					transaction_source = "referal_bonus"
					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
																VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
												WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
				else:
					previous_value = 0
					transaction_value = referal_bonus
					updated_value = previous_value + int(transaction_value)
					transaction_source = "referal_bonus"

					wallet_transaction_status = 1

					customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
																VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

					customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
					cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

					update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
												WHERE `admin_id` = %s""")
					update_customer_wallet_data = (updated_value,customer_id)
					cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

				customer_referal_rule_insert_query = ("""INSERT INTO `customer_referal_rule`(`referal_loyality_settings_id`,`customer_id`,`organisation_id`,`last_update_id`) 
																	VALUES(%s,%s,%s,%s)""")

				customer_referal_rule_insert_data = (referal_loyality_settings_id,customer_id,organisation_id,organisation_id)
				cursor.execute(customer_referal_rule_insert_query,customer_referal_rule_insert_data)

		connection.commit()
		cursor.close()


		return ({"attributes": {
			    		"status_desc": "Loyality Referal Customer",
			    		"status": "success"
			    	},
			    	"responseList":total_referal_customer}), status.HTTP_200_OK
#----------------------Add-Loyality-Referal-Customer--------------------#

#----------------------Add-Loyality-After-Exchange--------------------#

@name_space.route("/AddLoyalityAfterExchange")
class AddLoyalityAfterExchange(Resource):
	@api.expect(loyality_exchange_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		exchange_id = details['exchange_id']
		customer_id = details['customer_id']
		organisation_id = details['organisation_id']

		get_exchange_query = ("""SELECT * from `customer_exchange_device` where `exchange_id` = %s""")
		get_exchange_data = (exchange_id)
		exchange_count = cursor.execute(get_exchange_query,get_exchange_data)

		if exchange_count > 0:
			exchange_data = cursor.fetchone()
			exchange_amount = exchange_data['amount']
		else:
			exchange_amount = 0
		

		transactional_bonus = 0

		get_buy_back_loyality_query = ("""SELECT * FROM `buy_back_loyality_settings` where `organisation_id` = %s""")
		get_buy_back_loyality_data = (organisation_id)
		buy_back_loyality_count = cursor.execute(get_buy_back_loyality_query,get_buy_back_loyality_data)

		if buy_back_loyality_count > 0:
			buy_back_loyality = cursor.fetchall()
			print(buy_back_loyality)
			for key,data in enumerate(buy_back_loyality):
				if data['greaterthan_transactional_amount'] <= exchange_amount <= data['lessthan_transactional_amount']:
					transactional_bonus = data['transactional_bonus']

		if transactional_bonus > 0:
			get_customer_wallet_transaction_query = ("""SELECT * from `wallet_transaction` where `customer_id` = %s ORDER BY `wallet_transaction_id` desc""")
			get_customer_wallet_transaction_data = (customer_id)
			customer_wallet_transaction_count = cursor.execute(get_customer_wallet_transaction_query,get_customer_wallet_transaction_data)

			if customer_wallet_transaction_count > 0:
				wallet_transaction_data = cursor.fetchone()
				previous_value = wallet_transaction_data['updated_value']
				transaction_value = transactional_bonus
				updated_value = previous_value + int(transaction_value)

				transaction_source = "buyback_bonus"
				wallet_transaction_status = 1

				customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

				customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
				cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

				update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
				update_customer_wallet_data = (updated_value,customer_id)
				cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)
			else:
				previous_value = 0
				transaction_value = transactional_bonus
				updated_value = previous_value + int(transaction_value)
				transaction_source = "buyback_bonus"

				wallet_transaction_status = 1

				customer_wallet_transaction_insert_query = ("""INSERT INTO `wallet_transaction`(`customer_id`,`transaction_value`,`transaction_source`,`previous_value`,`updated_value`,`organisation_id`,`status`,`last_update_id`) 
															VALUES(%s,%s,%s,%s,%s,%s,%s,%s)""")

				customer_wallet_transaction_data = (customer_id,transaction_value,transaction_source,previous_value,updated_value,organisation_id,wallet_transaction_status,organisation_id)
				cursor.execute(customer_wallet_transaction_insert_query,customer_wallet_transaction_data)

				update_customer_wallet_transaction_query = ("""UPDATE `admins` SET `wallet` = %s
											WHERE `admin_id` = %s""")
				update_customer_wallet_data = (updated_value,customer_id)
				cursor.execute(update_customer_wallet_transaction_query,update_customer_wallet_data)

		connection.commit()
		cursor.close()


		return ({"attributes": {
			    		"status_desc": "Loyality Exchange Customer",
			    		"status": "success"
			    	},
			    	"responseList":exchange_amount}), status.HTTP_200_OK

#----------------------Add-Loyality-After-Exchange--------------------#

#----------------------Customer-Sms--------------------#

@name_space.route("/CustomerSms")
class CustomerSms(Resource):
	@api.expect(customer_sms_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_ids = details.get('customer_id',[])
		organisation_id = details['organisation_id']

		for key,customer_id in enumerate(customer_ids):

			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`,`wallet`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (customer_id)
					
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				if cstomerData['first_name'] == '':
					customer_name = "Customer"
				else:
					customer_name = cstomerData['first_name']

				url = "https://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage"
				PHONE_NUMBER = cstomerData['phoneno']
				userid = 2000207272
				password = '5thrMk8f4'
				msg = "Dear "+customer_name+",\u000AThank you for being a part of our Loyalty program.\u000AYou have earned "+str(cstomerData['wallet'])+" reward points. Shop with your points at https://www.ammobile.app \u000A \u000A T%26CA -AM Mobile Telecom Pvt Ltd"
				payload ="&send_to={}&msg={}&msg_type=TEXT&userid={}&auth_scheme=plain&password={}&v=1.1&format=text".format(PHONE_NUMBER,msg,userid,password)
				postUrl = url+payload
				print(postUrl)
						# print(msg)
				response = requests.request("GET", postUrl)


				response_text = response.text			

				if "error" in response_text:
					sent = 'N'					

				else:
						
					sent = 'Y'

					sms_query = ("""INSERT INTO `otp_sms`(`title`,`body`,
								`phone_number`,`Sent`,`organisation_id`,`customer_id`)  
								VALUES(%s,%s,%s,%s,%s,%s)""")
					smsdata = cursor.execute(sms_query,('loyality',msg,PHONE_NUMBER,
								'Yes',organisation_id,customer_id))	

		return ({"attributes": {"status_desc": "E-Commerce Loyality Sms",
	                                "status": "success"
	                                },
						"responseList":details}), status.HTTP_200_OK
					


#----------------------Customer-Sms--------------------#

#----------------------Customer-Email--------------------#

@name_space.route("/CustomerEmail")
class CustomerEmail(Resource):
	@api.expect(customer_email_postmodel)
	def post(self):
		connection = mysql_connection()
		cursor = connection.cursor()

		details = request.get_json()

		customer_ids = details.get('customer_id',[])
		organisation_id = details['organisation_id']
		otp = 123456

		for key,customer_id in enumerate(customer_ids):

			get_customer_data_query = ("""SELECT `first_name`,`last_name`,`email`,`phoneno`,`wallet`
				FROM `admins` WHERE  `admin_id` = %s""")

			getCustomerData = (customer_id)
					
			countCustomerData = cursor.execute(get_customer_data_query,getCustomerData)

			if countCustomerData > 0 :
				cstomerData = cursor.fetchone()

				if cstomerData['email'] == '':
					print('hiii')
				else:
					msg = MIMEMultipart()
					msg['Subject'] = details['title']
					msg['From'] = EMAIL_ADDRESS
					msg['To'] = cstomerData['email']
					html = """<html>
	                        <head>
	                        <title>E-Commerce.com</title>
	                        </head>
	                        <body>
	                        <p>
	                        Dear Sir/Madam,<br> <br>
	                        """+details['message']+"""
	                        <br> <br>	                        
	                        Thanks & Regards,<br>
							Customers Support Team<br>
							Am Mobile Telecom Pvt. Ltd
	                        </p    
                            </body>
	                        </html>"""
					message = html
					print(message)
					part1 = MIMEText(message, 'html')
					msg.attach(part1)
					print(msg)
					try:
						smtp = SMTP('mail.creamsonservices.com', 587)
						smtp.starttls()
						smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
						smtp.sendmail(EMAIL_ADDRESS, cstomerData['email'], msg.as_string())
						
						res = {"status":'Success'}
						sent = 'Y'

						print(sent)
						
					except Exception as e:
						res = {"status":'Failure'}
						sent = 'N'
						print(sent)
						# raise e
					smtp.quit()

			insert_query = ("""INSERT INTO `customer_email`(`title`,`body`,
							`email_id`,`Sent`,`customer_id`,`organisation_id`,`Last_Update_ID`) 
								VALUES(%s,%s,%s,%s,%s,%s,%s)""")

			data = (details['title'],details['message'],cstomerData['email'],sent,customer_id,organisation_id,organisation_id)
			cursor.execute(insert_query,data)

			print(cursor._last_executed)

		return ({"attributes": {"status_desc": "E-Commerce Email",
	                                "status": "success"
	                                },
						"responseList":details}), status.HTTP_200_OK


#----------------------Customer-Email--------------------#

def send_mail(bodyContent,toemail):
    to_email = toemail
    print(to_email)
    from_email = 'communications@creamsonservices.com'
    subject = 'Oder Details'
    message = MIMEMultipart()
    message['Subject'] = subject
    message['From'] = from_email
    message['To'] = to_email

    message.attach(MIMEText(bodyContent, "html"))
    msgBody = message.as_string()

    server = SMTP('mail.creamsonservices.com', 587)
    server.starttls()
    server.login(from_email, 'CReam7789%$intELLi')
    server.sendmail(from_email, to_email, msgBody)

    server.quit()

    res = {"status":'Success'}
    return res

def send_sms(phone_no):		
	url = "http://cloud.smsindiahub.in/vendorsms/pushsms.aspx?"
	user = 'creamsonintelli'
	password = 'denver@1234'	
	sid = 'CRMLTD'
	msg = "Thank You for Placing Order."
	msisdn = phone_no
	fl = '0'
	gwid = '2'
	payload ="user={}&password={}&msisdn={}&sid={}&msg={}&fl={}&gwid={}".format(user,password,
	msisdn,sid,msg,fl,gwid)
	postUrl = url+payload
	print(postUrl)
	print(msisdn,msg)

	response = requests.request("POST", postUrl)

	print(response.text)

def send_email(**kwagrs):
	connection = mysql_connection()
	cursor = connection.cursor()
	config_info = kwagrs['config_info']
	user_info = kwagrs['user_info']
	res = 'Failure. Wrong MailId or SourceApp.'

	if user_info['EMAIL_ID'] and config_info['application_name']:
		msg = MIMEMultipart()
		msg['Subject'] = config_info['Subject']
		msg['From'] = EMAIL_ADDRESS
		msg['To'] = user_info['EMAIL_ID']

		html = config_info['Email_Body']
		part1 = MIMEText(html, 'html')
		msg.attach(part1)
		try:
			smtp = SMTP('mail.creamsonservices.com', 587)
			smtp.starttls()
			smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
			smtp.sendmail(EMAIL_ADDRESS, user_info['EMAIL_ID'], msg.as_string())
			
			res = {"status":'Success'}
			sent = 'Y'
			
		except Exception as e:
			res = {"status":'Failure'}
			sent = 'N'
			# raise e
		smtp.quit()
		mailmessage_insert_query = ("""INSERT INTO `mails`(`tomail`, `subject`, `body`, 
			`sourceapp`, `sent`) VALUES (%s,%s,%s,%s,%s)""")
		mail_data = (user_info['EMAIL_ID'],config_info['Subject'],html,
			config_info['application_name'],sent)
		cursor.execute(mailmessage_insert_query,mail_data)
	connection.commit()
	cursor.close()
	
	return res
		